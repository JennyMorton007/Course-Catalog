[0m2021.03.17 19:51:05 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.17 19:53:02 INFO  time: initialize in 1m56s[0m
[0m2021.03.17 19:53:06 WARN  Build server is not auto-connectable.[0m
[0m2021.03.17 19:53:09 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\Main.scala[0m
[0m2021.03.17 19:53:09 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.17 19:53:25 INFO  running 'C:\Program Files\Java\jdk-11.0.10\bin\java -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\Jenny\AppData\Local\Temp\metals3427224658330699489\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'[0m
[0m2021.03.17 19:53:40 ERROR [info] [launcher] getting org.scala-sbt sbt 1.4.9  (this may take some time)...[0m
[0m2021.03.17 19:53:42 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m

package course_catalog.src.main.scala

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event

object Main extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(800,400){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      setup()
      

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all course descriptions");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Label(all.classes(x).getLong))
        screen.children= Array(new Label("All Course Descriptions"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Label(x.getLong());
        screen.children = Array(
          new Label(x.getCode()),
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {screen.children = Array(
          new Label(x.getCode()),
          new Label(x.getLong()),
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup():Unit = {
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
      all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

[0m2021.03.17 19:53:56 INFO  time: code lens generation in 8.53s[0m
[0m2021.03.17 19:53:56 INFO  time: code lens generation in 32s[0m
[0m2021.03.17 19:53:56 INFO  time: code lens generation in 35s[0m
[0m2021.03.17 19:53:56 INFO  time: code lens generation in 46s[0m
[0m2021.03.17 19:54:32 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/main_2.12/1.4.9/main_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:32 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/io_2.12/1.4.0/io_2.12-1.4.0.jar ...[0m
[0m2021.03.17 19:54:32 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/sbt/1.4.9/sbt-1.4.9.jar ...[0m
[0m2021.03.17 19:54:32 ERROR :: loading settings :: url = jar:file:/C:/Users/Jenny/AppData/Local/Temp/metals3427224658330699489/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml[0m
[0m2021.03.17 19:54:32 ERROR :: loading settings :: url = jar:file:/C:/Users/Jenny/AppData/Local/Temp/metals3427224658330699489/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml[0m
[0m2021.03.17 19:54:32 ERROR :: loading settings :: url = jar:file:/C:/Users/Jenny/AppData/Local/Temp/metals3427224658330699489/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml[0m
[0m2021.03.17 19:54:32 ERROR :: loading settings :: url = jar:file:/C:/Users/Jenny/AppData/Local/Temp/metals3427224658330699489/sbt-launch.jar!/org/apache/ivy/core/settings/ivysettings.xml[0m
[0m2021.03.17 19:54:32 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/logic_2.12/1.4.9/logic_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:35 ERROR 	[SUCCESSFUL ] org.scala-sbt#io_2.12;1.4.0!io_2.12.jar (2371ms)[0m
[0m2021.03.17 19:54:35 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/actions_2.12/1.4.9/actions_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:35 ERROR 	[SUCCESSFUL ] org.scala-sbt#actions_2.12;1.4.9!actions_2.12.jar (186ms)[0m
[0m2021.03.17 19:54:35 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/main-settings_2.12/1.4.9/main-settings_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:35 ERROR 	[SUCCESSFUL ] org.scala-sbt#main-settings_2.12;1.4.9!main-settings_2.12.jar (350ms)[0m
[0m2021.03.17 19:54:35 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/run_2.12/1.4.9/run_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:35 ERROR 	[SUCCESSFUL ] org.scala-sbt#run_2.12;1.4.9!run_2.12.jar (130ms)[0m
[0m2021.03.17 19:54:35 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/command_2.12/1.4.9/command_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:35 ERROR 	[SUCCESSFUL ] org.scala-sbt#command_2.12;1.4.9!command_2.12.jar (192ms)[0m
[0m2021.03.17 19:54:35 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/collections_2.12/1.4.9/collections_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#sbt;1.4.9!sbt.jar (4047ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/scripted-plugin_2.12/1.4.9/scripted-plugin_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#logic_2.12;1.4.9!logic_2.12.jar (3988ms)[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#collections_2.12;1.4.9!collections_2.12.jar (816ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-lm-integration_2.12/1.4.9/zinc-lm-integration_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-logging_2.12/1.4.9/util-logging_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#scripted-plugin_2.12;1.4.9!scripted-plugin_2.12.jar (91ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.3.0/scala-xml_2.12-1.3.0.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-lm-integration_2.12;1.4.9!zinc-lm-integration_2.12.jar (113ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/launcher-interface/1.1.6/launcher-interface-1.1.6.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#launcher-interface;1.1.6!launcher-interface.jar (113ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/com/github/ben-manes/caffeine/caffeine/2.8.5/caffeine-2.8.5.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-logging_2.12;1.4.9!util-logging_2.12.jar (339ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/io/get-coursier/lm-coursier-shaded_2.12/2.0.6/lm-coursier-shaded_2.12-2.0.6.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-xml_2.12;1.3.0!scala-xml_2.12.jar(bundle) (359ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.scala-sbt#main_2.12;1.4.9!main_2.12.jar (4546ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-api;2.11.2!log4j-api.jar (192ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.11.2/log4j-slf4j-impl-2.11.2.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] com.github.ben-manes.caffeine#caffeine;2.8.5!caffeine.jar (491ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/com/swoval/file-tree-views/2.1.6/file-tree-views-2.1.6.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-slf4j-impl;2.11.2!log4j-slf4j-impl.jar (107ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/librarymanagement-core_2.12/1.4.3/librarymanagement-core_2.12-1.4.3.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] org.apache.logging.log4j#log4j-core;2.11.2!log4j-core.jar (341ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/librarymanagement-ivy_2.12/1.4.3/librarymanagement-ivy_2.12-1.4.3.jar ...[0m
[0m2021.03.17 19:54:36 ERROR 	[SUCCESSFUL ] com.swoval#file-tree-views;2.1.6!file-tree-views.jar (161ms)[0m
[0m2021.03.17 19:54:36 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/compiler-interface/1.4.4/compiler-interface-1.4.4.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#compiler-interface;1.4.4!compiler-interface.jar (157ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-compile_2.12/1.4.4/zinc-compile_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#librarymanagement-core_2.12;1.4.3!librarymanagement-core_2.12.jar (350ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-relation_2.12/1.4.9/util-relation_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-compile_2.12;1.4.4!zinc-compile_2.12.jar (84ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-position_2.12/1.4.9/util-position_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-relation_2.12;1.4.9!util-relation_2.12.jar (93ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-scalajson_2.12/0.9.1/sjson-new-scalajson_2.12-0.9.1.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-position_2.12;1.4.9!util-position_2.12.jar (94ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-core_2.12/0.9.1/sjson-new-core_2.12-0.9.1.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#librarymanagement-ivy_2.12;1.4.3!librarymanagement-ivy_2.12.jar (402ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/shaded-jawn-parser_2.12/0.9.1/shaded-jawn-parser_2.12-0.9.1.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-scalajson_2.12;0.9.1!sjson-new-scalajson_2.12.jar (115ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/completion_2.12/1.4.9/completion_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] com.eed3si9n#shaded-jawn-parser_2.12;0.9.1!shaded-jawn-parser_2.12.jar (135ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/task-system_2.12/1.4.9/task-system_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-core_2.12;0.9.1!sjson-new-core_2.12.jar (213ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/tasks_2.12/1.4.9/tasks_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#completion_2.12;1.4.9!completion_2.12.jar (188ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/testing_2.12/1.4.9/testing_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#task-system_2.12;1.4.9!task-system_2.12.jar (128ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-tracking_2.12/1.4.9/util-tracking_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#tasks_2.12;1.4.9!tasks_2.12.jar (90ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal/3.19.0/jline-terminal-3.19.0.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-tracking_2.12;1.4.9!util-tracking_2.12.jar (113ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-classpath_2.12/1.4.4/zinc-classpath_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#testing_2.12;1.4.9!testing_2.12.jar (144ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-apiinfo_2.12/1.4.4/zinc-apiinfo_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal;3.19.0!jline-terminal.jar (134ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc_2.12/1.4.4/zinc_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-classpath_2.12;1.4.4!zinc-classpath_2.12.jar (102ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-control_2.12/1.4.9/util-control_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc_2.12;1.4.4!zinc_2.12.jar (96ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/jline/jline/2.14.7-sbt-a1b0ffbb8f64bb820f4f84a0c07a0c0964507493/jline-2.14.7-sbt-a1b0ffbb8f64bb820f4f84a0c07a0c0964507493.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-apiinfo_2.12;1.4.4!zinc-apiinfo_2.12.jar (137ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-reader/3.19.0/jline-reader-3.19.0.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-control_2.12;1.4.9!util-control_2.12.jar (87ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-builtins/3.19.0/jline-builtins-3.19.0.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt.jline#jline;2.14.7-sbt-a1b0ffbb8f64bb820f4f84a0c07a0c0964507493!jline.jar (144ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-interface/1.4.9/util-interface-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.jline#jline-reader;3.19.0!jline-reader.jar (171ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/core-macros_2.12/1.4.9/core-macros_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.jline#jline-builtins;3.19.0!jline-builtins.jar (160ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal-jna/3.19.0/jline-terminal-jna-3.19.0.jar ...[0m
[0m2021.03.17 19:54:37 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-interface;1.4.9!util-interface.jar (116ms)[0m
[0m2021.03.17 19:54:37 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-terminal-jansi/3.19.0/jline-terminal-jansi-3.19.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal-jna;3.19.0!jline-terminal-jna.jar (110ms)[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.scala-sbt#core-macros_2.12;1.4.9!core-macros_2.12.jar (121ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/com/lmax/disruptor/3.4.2/disruptor-3.4.2.jar ...[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/fusesource/jansi/jansi/2.1.0/jansi-2.1.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.jline#jline-terminal-jansi;3.19.0!jline-terminal-jansi.jar (128ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.5.0/jna-5.5.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] com.lmax#disruptor;3.4.2!disruptor.jar (120ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/net/java/dev/jna/jna-platform/5.5.0/jna-platform-5.5.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.fusesource.jansi#jansi;2.1.0!jansi.jar (297ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/jline/jline-style/3.19.0/jline-style-3.19.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.jline#jline-style;3.19.0!jline-style.jar (185ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/util-cache_2.12/1.4.9/util-cache_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.scala-sbt#util-cache_2.12;1.4.9!util-cache_2.12.jar (247ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/sjson-new-murmurhash_2.12/0.9.1/sjson-new-murmurhash_2.12-0.9.1.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] com.eed3si9n#sjson-new-murmurhash_2.12;0.9.1!sjson-new-murmurhash_2.12.jar (85ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/test-agent/1.4.9/test-agent-1.4.9.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] net.java.dev.jna#jna-platform;5.5.0!jna-platform.jar (721ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/compiler-bridge_2.12/1.4.4/compiler-bridge_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] net.java.dev.jna#jna;5.5.0!jna.jar (816ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-classfile_2.12/1.4.4/zinc-classfile_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.scala-sbt#test-agent;1.4.9!test-agent.jar (103ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/gigahorse-okhttp_2.12/0.5.0/gigahorse-okhttp_2.12-0.5.0.jar ...[0m
[0m2021.03.17 19:54:38 ERROR 	[SUCCESSFUL ] org.scala-sbt#compiler-bridge_2.12;1.4.4!compiler-bridge_2.12.jar (144ms)[0m
[0m2021.03.17 19:54:38 ERROR downloading https://repo1.maven.org/maven2/com/eed3si9n/gigahorse-core_2.12/0.5.0/gigahorse-core_2.12-0.5.0.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-classfile_2.12;1.4.4!zinc-classfile_2.12.jar (111ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/com/squareup/okhttp3/okhttp/3.14.2/okhttp-3.14.2.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.eed3si9n#gigahorse-core_2.12;0.5.0!gigahorse-core_2.12.jar (111ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.12/0.4.0/ssl-config-core_2.12-0.4.0.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.squareup.okhttp3#okhttp;3.14.2!okhttp.jar (206ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.typesafe#ssl-config-core_2.12;0.4.0!ssl-config-core_2.12.jar(bundle) (135ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.26/slf4j-api-1.7.26.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.eed3si9n#gigahorse-okhttp_2.12;0.5.0!gigahorse-okhttp_2.12.jar (356ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.12/1.1.2/scala-parser-combinators_2.12-1.1.2.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.reactivestreams#reactive-streams;1.0.2!reactive-streams.jar (70ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/com/typesafe/config/1.3.3/config-1.3.3.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.slf4j#slf4j-api;1.7.26!slf4j-api.jar (78ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/com/squareup/okio/okio/1.17.2/okio-1.17.2.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.typesafe#config;1.3.3!config.jar(bundle) (104ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-core_2.12/1.4.4/zinc-core_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] com.squareup.okio#okio;1.17.2!okio.jar (99ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-persist_2.12/1.4.4/zinc-persist_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-parser-combinators_2.12;1.1.2!scala-parser-combinators_2.12.jar(bundle) (141ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-compile-core_2.12/1.4.4/zinc-compile-core_2.12-1.4.4.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] io.get-coursier#lm-coursier-shaded_2.12;2.0.6!lm-coursier-shaded_2.12.jar (3193ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/zinc-persist-core-assembly/1.4.4/zinc-persist-core-assembly-1.4.4.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-core_2.12;1.4.4!zinc-core_2.12.jar (186ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/net/openhft/zero-allocation-hashing/0.10.1/zero-allocation-hashing-0.10.1.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-compile-core_2.12;1.4.4!zinc-compile-core_2.12.jar (216ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/sbinary_2.12/0.5.1/sbinary_2.12-0.5.1.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] net.openhft#zero-allocation-hashing;0.10.1!zero-allocation-hashing.jar(bundle) (103ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/protocol_2.12/1.4.9/protocol_2.12-1.4.9.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-persist_2.12;1.4.4!zinc-persist_2.12.jar (323ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/ipcsocket/ipcsocket/1.3.0/ipcsocket-1.3.0.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt#sbinary_2.12;0.5.1!sbinary_2.12.jar (125ms)[0m
[0m2021.03.17 19:54:39 ERROR downloading https://repo1.maven.org/maven2/org/checkerframework/checker-qual/3.4.1/checker-qual-3.4.1.jar ...[0m
[0m2021.03.17 19:54:39 ERROR 	[SUCCESSFUL ] org.scala-sbt.ipcsocket#ipcsocket;1.3.0!ipcsocket.jar (156ms)[0m
[0m2021.03.17 19:54:40 ERROR downloading https://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.4.0/error_prone_annotations-2.4.0.jar ...[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] org.checkerframework#checker-qual;3.4.1!checker-qual.jar (137ms)[0m
[0m2021.03.17 19:54:40 ERROR downloading https://repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.12/2.3.2/scala-collection-compat_2.12-2.3.2.jar ...[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] org.scala-sbt#protocol_2.12;1.4.9!protocol_2.12.jar (339ms)[0m
[0m2021.03.17 19:54:40 ERROR downloading https://repo1.maven.org/maven2/org/scala-sbt/ivy/ivy/2.3.0-sbt-fbc4f586aeeb1591710b14eb4f41b94880dcd745/ivy-2.3.0-sbt-fbc4f586aeeb1591710b14eb4f41b94880dcd745.jar ...[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] org.scala-lang.modules#scala-collection-compat_2.12;2.3.2!scala-collection-compat_2.12.jar (125ms)[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] com.google.errorprone#error_prone_annotations;2.4.0!error_prone_annotations.jar (136ms)[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] org.scala-sbt#zinc-persist-core-assembly;1.4.4!zinc-persist-core-assembly.jar (827ms)[0m
[0m2021.03.17 19:54:40 ERROR 	[SUCCESSFUL ] org.scala-sbt.ivy#ivy;2.3.0-sbt-fbc4f586aeeb1591710b14eb4f41b94880dcd745!ivy.jar (256ms)[0m
[0m2021.03.17 19:54:40 ERROR :: retrieving :: org.scala-sbt#boot-app[0m
[0m2021.03.17 19:54:40 ERROR 	confs: [default][0m
[0m2021.03.17 19:54:40 ERROR 	83 artifacts copied, 0 already retrieved[0m
[0m2021.03.17 19:54:40 ERROR [info] [launcher] getting Scala 2.12.12 (for sbt)...[0m
[0m2021.03.17 19:54:42 ERROR :: retrieving :: org.scala-sbt#boot-scala[0m
[0m2021.03.17 19:54:42 ERROR 	confs: [default][0m
[0m2021.03.17 19:54:42 ERROR 	6 artifacts copied, 0 already retrieved[0m
[0m2021.03.17 19:55:00 INFO  [info] welcome to sbt 1.4.9 (Oracle Corporation Java 11.0.10)[0m
[0m2021.03.17 19:55:22 INFO  [info] loading settings for project course-catalog-build-build from metals.sbt ...[0m
[0m2021.03.17 19:55:42 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project\project[0m
[0m2021.03.17 19:56:05 INFO  [info] loading settings for project course-catalog-build from metals.sbt ...[0m
[0m2021.03.17 19:56:06 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project[0m
[0m2021.03.17 19:56:38 INFO  [success] Generated .bloop\course-catalog-build.json[0m
[0m2021.03.17 19:56:38 INFO  [success] Total time: 32 s, completed Mar 17, 2021, 7:56:38 PM[0m
[0m2021.03.17 19:56:42 INFO  [info] set current project to course-catalog (in build file:/C:/Users/Jenny/course-catalog/)[0m
[0m2021.03.17 19:56:49 INFO  [success] Generated .bloop\course-catalog.json[0m
[0m2021.03.17 19:56:49 INFO  [success] Generated .bloop\course-catalog-test.json[0m
[0m2021.03.17 19:56:49 INFO  [success] Total time: 4 s, completed Mar 17, 2021, 7:56:49 PM[0m
[0m2021.03.17 19:56:51 INFO  sbt bloopInstall exit: 0[0m
[0m2021.03.17 19:56:51 INFO  time: ran 'sbt bloopInstall' in 3m26s[0m
[0m2021.03.17 19:56:51 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 30121'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading 2 projects from 'c:\Users\Jenny\course-catalog\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog.json'
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog-test.json'
[0m[32m[D][0m Cache miss for scala instance org.scala-lang:scala-compiler:2.12.12.
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jansi.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jline.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-compiler.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-library.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-reflect.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-xml_2.12.jar
[0m[32m[D][0m Missing analysis file for project 'course-catalog'
[0m[32m[D][0m Missing analysis file for project 'course-catalog-test'
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:30121...
The server is listening for incoming connections at tcp://127.0.0.1:30121...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.17 19:57:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.17 19:57:03 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 21539'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:21539...
The server is listening for incoming connections at tcp://127.0.0.1:21539...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.17 19:57:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.17 19:57:15 INFO  time: Connected to build server in 23s[0m
[0m2021.03.17 19:57:15 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.17 19:57:16 INFO  time: Imported build in 0.72s[0m
[0m2021.03.17 19:57:39 INFO  time: indexed workspace in 23s[0m
[0m2021.03.17 19:57:51 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.17 19:58:14 INFO  time: compiled course-catalog in 23s[0m
import _root_.scala.xml.{TopScope=>$scope}
import _root_.sbt._
import _root_.sbt.Keys._
import _root_.sbt.nio.Keys._
import _root_.sbt.ScriptedPlugin.autoImport._, _root_.sbt.plugins.MiniDependencyTreePlugin.autoImport._, _root_.bloop.integrations.sbt.BloopPlugin.autoImport._
import _root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.ScriptedPlugin, _root_.sbt.plugins.SbtPlugin, _root_.sbt.plugins.SemanticdbPlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, _root_.sbt.plugins.Giter8TemplatePlugin, _root_.sbt.plugins.MiniDependencyTreePlugin, _root_.bloop.integrations.sbt.BloopPlugin
name := "CS2Examples"
version := "1.0"
scalaVersion := "2.12.12"
run / fork := true
run / connectInput := true

libraryDependencies ++= Seq(
	"org.scalafx" %% "scalafx" % "8.0.144-R12",
	"com.novocode" % "junit-interface" % "0.11" % Test,
	"org.scalactic" %% "scalactic" % "3.0.5",
	"org.scalatest" %% "scalatest" % "3.0.5" % "test"
)

lazy val osName = System.getProperty("os.name") match {
  case n if n.startsWith("Linux") => "linux"
  case n if n.startsWith("Mac") => "mac"
  case n if n.startsWith("Windows") => "win"
  case _ => throw new Exception("Unknown platform!")
}

// Add JavaFX dependencies
lazy val javaFXModules = Seq("base", "controls", "fxml", "graphics", "media", "swing", "web")
libraryDependencies ++= javaFXModules.map( m=>
  "org.openjfx" % s"javafx-$m" % "11" classifier osName
)


//mainClass in (Compile, packageBin) := Some("cs2.net.ChatProgram")

[0m2021.03.17 20:00:27 INFO  time: code lens generation in 4.45s[0m
[0m2021.03.17 20:00:27 INFO  time: code lens generation in 12s[0m
import _root_.scala.xml.{TopScope=>$scope}
import _root_.sbt._
import _root_.sbt.Keys._
import _root_.sbt.nio.Keys._
import _root_.sbt.ScriptedPlugin.autoImport._, _root_.sbt.plugins.MiniDependencyTreePlugin.autoImport._, _root_.bloop.integrations.sbt.BloopPlugin.autoImport._
import _root_.sbt.plugins.IvyPlugin, _root_.sbt.plugins.JvmPlugin, _root_.sbt.plugins.CorePlugin, _root_.sbt.ScriptedPlugin, _root_.sbt.plugins.SbtPlugin, _root_.sbt.plugins.SemanticdbPlugin, _root_.sbt.plugins.JUnitXmlReportPlugin, _root_.sbt.plugins.Giter8TemplatePlugin, _root_.sbt.plugins.MiniDependencyTreePlugin, _root_.bloop.integrations.sbt.BloopPlugin
name := "course-catalog"
version := "1.0"
scalaVersion := "2.12.12"
run / fork := true
run / connectInput := true

libraryDependencies ++= Seq(
	"org.scalafx" %% "scalafx" % "8.0.144-R12",
	"com.novocode" % "junit-interface" % "0.11" % Test,
	"org.scalactic" %% "scalactic" % "3.0.5",
	"org.scalatest" %% "scalatest" % "3.0.5" % "test"
)

lazy val osName = System.getProperty("os.name") match {
  case n if n.startsWith("Linux") => "linux"
  case n if n.startsWith("Mac") => "mac"
  case n if n.startsWith("Windows") => "win"
  case _ => throw new Exception("Unknown platform!")
}

// Add JavaFX dependencies
lazy val javaFXModules = Seq("base", "controls", "fxml", "graphics", "media", "swing", "web")
libraryDependencies ++= javaFXModules.map( m=>
  "org.openjfx" % s"javafx-$m" % "11" classifier osName
)


//mainClass in (Compile, packageBin) := Some("cs2.net.ChatProgram")

[0m2021.03.17 20:00:56 INFO  running 'C:\Program Files\Java\jdk-11.0.10\bin\java -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\Jenny\AppData\Local\Temp\metals15354560012863004942\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'[0m
[0m2021.03.17 20:01:14 INFO  [info] welcome to sbt 1.4.9 (Oracle Corporation Java 11.0.10)[0m
[0m2021.03.17 20:01:22 INFO  [info] loading settings for project course-catalog-build-build from metals.sbt ...[0m
[0m2021.03.17 20:01:42 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project\project[0m
[0m2021.03.17 20:01:50 INFO  [info] loading settings for project course-catalog-build from metals.sbt ...[0m
[0m2021.03.17 20:01:51 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project[0m
[0m2021.03.17 20:02:11 INFO  [success] Generated .bloop\course-catalog-build.json[0m
[0m2021.03.17 20:02:11 INFO  [success] Total time: 20 s, completed Mar 17, 2021, 8:02:12 PM[0m
[0m2021.03.17 20:02:41 INFO  [info] loading settings for project course-catalog from build.sbt ...[0m
[0m2021.03.17 20:02:42 INFO  [info] set current project to course-catalog (in build file:/C:/Users/Jenny/course-catalog/)[0m
[0m2021.03.17 20:03:09 INFO  [success] Generated .bloop\course-catalog.json[0m
[0m2021.03.17 20:03:09 INFO  [success] Generated .bloop\course-catalog-test.json[0m
[0m2021.03.17 20:03:09 INFO  [success] Total time: 23 s, completed Mar 17, 2021, 8:03:09 PM[0m
[0m2021.03.17 20:03:12 INFO  sbt bloopInstall exit: 0[0m
[0m2021.03.17 20:03:12 INFO  time: ran 'sbt bloopInstall' in 2m16s[0m
[0m2021.03.17 20:03:12 INFO  Disconnecting from Bloop session...[0m
[0m2021.03.17 20:03:12 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.17 20:03:12 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.17 20:03:12 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 43956'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Loading 2 projects from 'c:\Users\Jenny\course-catalog\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog.json'
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog-test.json'
[0m[32m[D][0m Configured SemanticDB in projects 'course-catalog', 'course-catalog-test'
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:43956...
The server is listening for incoming connections at tcp://127.0.0.1:43956...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.17 20:03:28 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.17 20:03:28 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 15755'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:15755...
The server is listening for incoming connections at tcp://127.0.0.1:15755...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
Mar 17, 2021 8:03:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 77
[0m2021.03.17 20:03:45 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.17 20:03:45 INFO  time: Connected to build server in 32s[0m
[0m2021.03.17 20:03:45 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.17 20:03:45 INFO  time: Imported build in 0.22s[0m
[0m2021.03.17 20:03:56 INFO  time: indexed workspace in 10s[0m
[0m2021.03.17 20:04:09 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.17 20:04:25 WARN  no build target for: C:\Users\Jenny\course-catalog\project\assembly.sbt[0m
[0m2021.03.17 20:04:33 INFO  no build target: using presentation compiler with only scala-library: 2.12.12[0m
addSbtPlugin("com.eed3si9n" % "sbt-assembly" % "0.14.6")

[0m2021.03.17 20:04:35 INFO  time: code lens generation in 9.46s[0m
[0m2021.03.17 20:04:54 WARN  no build target for: C:\Users\Jenny\course-catalog\project\plugins.sbt[0m
addSbtPlugin("com.typesafe.sbteclipse" % "sbteclipse-plugin" % "5.2.4")

[0m2021.03.17 20:05:03 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.17 20:05:04 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-PEZ9JW6XRcCEyYqJR5b6Tw==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-PEZ9JW6XRcCEyYqJR5b6Tw==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.17 20:05:03 INFO  time: compiled course-catalog in 54s[0m
Mar 17, 2021 8:18:02 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
[0m2021.03.17 20:18:02 INFO  shutting down Metals[0m
[0m2021.03.17 20:18:02 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.22 17:53:48 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.22 17:53:51 INFO  time: initialize in 3.16s[0m
[0m2021.03.22 17:53:52 INFO  Attempting to connect to the build server...[0m
[0m2021.03.22 17:53:52 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\Main.scala[0m
[0m2021.03.22 17:53:52 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 41690'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Loading 2 projects from 'c:\Users\Jenny\course-catalog\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog.json'
[0m[32m[D][0m Cache miss for scala instance org.scala-lang:scala-compiler:2.12.12.
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jansi.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jline.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-compiler.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-library.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-reflect.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-xml_2.12.jar
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog-test.json'
[0m[32m[D][0m Configured SemanticDB in projects 'course-catalog', 'course-catalog-test'
[0m[32m[D][0m Missing analysis file for project 'course-catalog-test'
[0m[32m[D][0m Loading previous analysis for 'course-catalog' from 'C:\Users\Jenny\course-catalog\target\streams\compile\bloopAnalysisOut\_global\streams\inc_compile_2.12.zip'.
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:41690...
The server is listening for incoming connections at tcp://127.0.0.1:41690...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 17:53:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 17:53:55 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 13616'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:13616...
The server is listening for incoming connections at tcp://127.0.0.1:13616...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 17:53:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 17:53:56 INFO  time: Connected to build server in 4.36s[0m
[0m2021.03.22 17:53:56 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.22 17:53:57 INFO  running 'C:\Program Files\Java\jdk-11.0.10\bin\java -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\Jenny\AppData\Local\Temp\metals5869924662202048366\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'[0m
[0m2021.03.22 17:54:03 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.22 17:54:04 INFO  time: Imported build in 0.48s[0m
[0m2021.03.22 17:54:07 INFO  [info] welcome to sbt 1.4.9 (Oracle Corporation Java 11.0.10)[0m

package course_catalog.src.main.scala

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event

object Main extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(800,400){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      setup()
      

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all course descriptions");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Label(all.classes(x).getLong))
        screen.children= Array(new Label("All Course Descriptions"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Label(x.getLong());
        screen.children = Array(
          new Label(x.getCode()),
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {screen.children = Array(
          new Label(x.getCode()),
          new Label(x.getLong()),
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup():Unit = {
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
      all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

[0m2021.03.22 17:54:16 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m

package course_catalog.src.main.scala

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event

object Main extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(800,400){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      setup()
      

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all course descriptions");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Label(all.classes(x).getLong))
        screen.children= Array(new Label("All Course Descriptions"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Label(x.getLong());
        screen.children = Array(
          new Label(x.getCode()),
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {screen.children = Array(
          new Label(x.getCode()),
          new Label(x.getLong()),
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup():Unit = {
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
      all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

[0m2021.03.22 17:54:17 INFO  [info] loading settings for project course-catalog-build-build-build from metals.sbt ...[0m
[0m2021.03.22 17:54:18 INFO  time: code lens generation in 25s[0m
[0m2021.03.22 17:54:18 INFO  time: code lens generation in 20s[0m
[0m2021.03.22 17:54:21 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project\project\project[0m
[0m2021.03.22 17:54:21 INFO  time: indexed workspace in 17s[0m
[0m2021.03.22 17:54:33 INFO  [info] loading settings for project course-catalog-build-build from metals.sbt ...[0m
[0m2021.03.22 17:54:33 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project\project[0m
[0m2021.03.22 17:54:43 INFO  [success] Generated .bloop\course-catalog-build-build.json[0m
[0m2021.03.22 17:54:43 INFO  [success] Total time: 8 s, completed Mar 22, 2021, 5:54:43 PM[0m
[0m2021.03.22 17:54:46 INFO  [info] loading settings for project course-catalog-build from assembly.sbt,metals.sbt,plugins.sbt ...[0m
[0m2021.03.22 17:54:46 INFO  [info] loading project definition from C:\Users\Jenny\course-catalog\project[0m
[0m2021.03.22 17:54:50 INFO  [success] Generated .bloop\course-catalog-build.json[0m
[0m2021.03.22 17:54:50 INFO  [success] Total time: 4 s, completed Mar 22, 2021, 5:54:50 PM[0m
[0m2021.03.22 17:54:51 INFO  [info] loading settings for project course-catalog from build.sbt ...[0m
[0m2021.03.22 17:54:51 INFO  [info] set current project to course-catalog (in build file:/C:/Users/Jenny/course-catalog/)[0m
[0m2021.03.22 17:54:53 INFO  [success] Generated .bloop\course-catalog.json[0m
[0m2021.03.22 17:54:53 INFO  [success] Generated .bloop\course-catalog-test.json[0m
[0m2021.03.22 17:54:53 INFO  [success] Total time: 1 s, completed Mar 22, 2021, 5:54:53 PM[0m
[0m2021.03.22 17:54:53 INFO  sbt bloopInstall exit: 0[0m
[0m2021.03.22 17:54:53 INFO  time: ran 'sbt bloopInstall' in 55s[0m
[0m2021.03.22 17:54:53 INFO  Disconnecting from Bloop session...[0m
[0m2021.03.22 17:54:53 INFO  Shut down connection with build server.[0m
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
[0m2021.03.22 17:54:53 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.22 17:54:53 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 11976'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:11976...
The server is listening for incoming connections at tcp://127.0.0.1:11976...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 17:54:54 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 17:54:54 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 25726'...
[0m2021.03.22 17:54:54 INFO  Waiting for the bsp connection to come up...
Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 19587'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:19587...
The server is listening for incoming connections at tcp://127.0.0.1:19587...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:25726...
The server is listening for incoming connections at tcp://127.0.0.1:25726...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 17:54:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 17:54:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 17:54:55 INFO  time: Connected to build server in 2.12s[0m
[0m2021.03.22 17:54:55 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.22 17:54:55 INFO  time: Imported build in 0.11s[0m
[0m2021.03.22 17:54:57 INFO  time: indexed workspace in 2.13s[0m
[0m2021.03.22 17:55:06 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-tpwi1sC_QCygTJGhnzLZdA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-tpwi1sC_QCygTJGhnzLZdA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 17:55:06 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-tpwi1sC_QCygTJGhnzLZdA==\META-INF\semanticdb\src\main\scala\Requirement.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-tpwi1sC_QCygTJGhnzLZdA==\META-INF\semanticdb\src\main\scala\Requirement.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 18:08:30 INFO  shutting down Metals[0m
[0m2021.03.22 18:08:30 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.22 18:08:30 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.22 18:08:30 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.22 19:23:04 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.22 19:23:09 INFO  time: initialize in 4.3s[0m
[0m2021.03.22 19:23:10 INFO  Attempting to connect to the build server...[0m
[0m2021.03.22 19:23:10 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\Main.scala[0m
[0m2021.03.22 19:23:11 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 19:23:11 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 28142'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:28142...
The server is listening for incoming connections at tcp://127.0.0.1:28142...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 19:23:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 19:23:14 INFO  Attempting to connect to the build server...[0m
[0m2021.03.22 19:23:14 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 20808'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 36341'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:36341...
The server is listening for incoming connections at tcp://127.0.0.1:36341...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:20808...
The server is listening for incoming connections at tcp://127.0.0.1:20808...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.22 19:23:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 19:23:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.22 19:23:16 INFO  time: Connected to build server in 5.66s[0m
[0m2021.03.22 19:23:16 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.22 19:23:19 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.22 19:23:19 INFO  time: Imported build in 0.18s[0m

package course_catalog.src.main.scala

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event

object Main extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(800,400){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      setup()
      

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all course descriptions");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Label(all.classes(x).getLong))
        screen.children= Array(new Label("All Course Descriptions"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Label(x.getLong());
        screen.children = Array(
          new Label(x.getCode()),
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {screen.children = Array(
          new Label(x.getCode()),
          new Label(x.getLong()),
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup():Unit = {
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
      all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

[0m2021.03.22 19:23:25 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m

package course_catalog.src.main.scala

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event

object Main extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(800,400){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      setup()
      

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all course descriptions");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Label(all.classes(x).getLong))
        screen.children= Array(new Label("All Course Descriptions"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Label(x.getLong());
        screen.children = Array(
          new Label(x.getCode()),
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {screen.children = Array(
          new Label(x.getCode()),
          new Label(x.getLong()),
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup():Unit = {
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
      all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

[0m2021.03.22 19:23:26 INFO  time: code lens generation in 15s[0m
[0m2021.03.22 19:23:29 INFO  time: indexed workspace in 9.63s[0m
[0m2021.03.22 19:23:34 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Complete.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Complete.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 19:25:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:25:36 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:25:36 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 19:25:36 INFO  time: compiled course-catalog in 18s[0m
[0m2021.03.22 19:27:09 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:27:15 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:27:15 INFO  time: compiled course-catalog in 5.76s[0m
Mar 22, 2021 7:30:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 229
[0m2021.03.22 19:30:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:30:55 INFO  time: compiled course-catalog in 3.94s[0m
[0m2021.03.22 19:31:06 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:31:11 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:31:11 INFO  time: compiled course-catalog in 4.98s[0m
[0m2021.03.22 19:31:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:31:21 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:31:21 INFO  time: compiled course-catalog in 4.43s[0m
[0m2021.03.22 19:37:42 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:37:43 INFO  time: compiled course-catalog in 1.14s[0m
[0m2021.03.22 19:37:50 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:37:53 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:37:53 INFO  time: compiled course-catalog in 3.18s[0m
[0m2021.03.22 19:38:13 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:38:19 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:38:19 INFO  time: compiled course-catalog in 5.53s[0m
Mar 22, 2021 7:38:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 355
[0m2021.03.22 19:39:14 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:39:17 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.22 19:39:17 INFO  time: compiled course-catalog in 3.45s[0m
[0m2021.03.22 19:41:24 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:41:26 INFO  time: compiled course-catalog in 1.47s[0m
Mar 22, 2021 7:41:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 428
[0m2021.03.22 19:41:36 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:41:37 INFO  time: compiled course-catalog in 1.2s[0m
Mar 22, 2021 7:41:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 449
Mar 22, 2021 7:45:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 629
[0m2021.03.22 19:46:52 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:46:56 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.22 19:46:56 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.22 19:46:56 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.22 19:46:56 INFO  time: compiled course-catalog in 3.8s[0m
Mar 22, 2021 7:48:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 768
Mar 22, 2021 7:48:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 776
Mar 22, 2021 7:48:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 783
Mar 22, 2021 7:49:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 851
Mar 22, 2021 7:49:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 855
Mar 22, 2021 7:49:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 853
[0m2021.03.22 19:49:33 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:49:39 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.22 19:49:39 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.22 19:49:39 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.22 19:49:39 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-08M8h7Z4RP-mUtuO0p5FiA==\META-INF\semanticdb\src\main\scala\Main.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.22 19:49:39 INFO  time: compiled course-catalog in 6.62s[0m
Mar 22, 2021 7:49:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 871
Mar 22, 2021 7:50:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 883
Mar 22, 2021 7:50:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 895
Mar 22, 2021 7:50:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 901
Mar 22, 2021 7:50:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 908
Mar 22, 2021 7:51:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 916
Mar 22, 2021 7:52:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1023
[0m2021.03.22 19:52:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:52:37 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.22 19:52:37 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.22 19:52:37 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.22 19:52:37 INFO  time: compiled course-catalog in 3.04s[0m
[0m2021.03.22 19:53:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:53:04 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.22 19:53:04 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.22 19:53:04 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.22 19:53:04 INFO  time: compiled course-catalog in 2.65s[0m
Mar 22, 2021 7:53:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1056
Mar 22, 2021 7:53:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1064
Mar 22, 2021 7:54:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1076
[0m2021.03.22 19:55:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:55:07 INFO  time: compiled course-catalog in 1.17s[0m
[0m2021.03.22 19:55:11 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:55:15 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.22 19:55:15 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.22 19:55:15 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.22 19:55:15 INFO  time: compiled course-catalog in 3.88s[0m
[0m2021.03.22 19:57:08 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:57:10 INFO  time: compiled course-catalog in 1.84s[0m
[0m2021.03.22 19:58:18 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:58:20 INFO  time: compiled course-catalog in 1.5s[0m
[0m2021.03.22 19:58:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.22 19:58:59 INFO  time: compiled course-catalog in 1.32s[0m
[0m2021.03.22 19:59:59 INFO  shutting down Metals[0m
[0m2021.03.22 19:59:59 INFO  Shut down connection with build server.[0m
[0mNo more data in the client stdin, exiting...
2021.03.22 19:59:59 INFO  Shut down connection with build server.[0m
No more data in the server stdin, exiting...
[0m2021.03.22 19:59:59 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.25 17:27:05 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.25 17:27:08 INFO  time: initialize in 2.86s[0m
[0m2021.03.25 17:27:09 INFO  Attempting to connect to the build server...[0m
[0m2021.03.25 17:27:09 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.25 17:27:10 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 40912'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:40912...
The server is listening for incoming connections at tcp://127.0.0.1:40912...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.25 17:27:11 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.25 17:27:11 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
[0m2021.03.25 17:27:11Opening a bsp server connection with 'bsp --protocol tcp --port 20916'... 
INFO  Attempting to connect to the build server...[0m
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 35090'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:20916...
The server is listening for incoming connections at tcp://127.0.0.1:20916...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:35090...
The server is listening for incoming connections at tcp://127.0.0.1:35090...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.25 17:27:12 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.25 17:27:12 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.25 17:27:12 INFO  time: Connected to build server in 2.67s[0m
[0m2021.03.25 17:27:12 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.25 17:27:12 INFO  time: Imported build in 0.19s[0m
[0m2021.03.25 17:27:19 INFO  time: indexed workspace in 6.64s[0m
Mar 25, 2021 5:31:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 84
[0m2021.03.25 17:31:32 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.25 17:31:39 INFO  Deduplicating compilation of course-catalog from bsp client 'Metals 0.10.0' (since 4m 28.34s)[0m
[0m2021.03.25 17:31:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.25 17:31:42 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:31:42 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:31:42 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:31:42 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:31:42 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:31:42 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:31:42 INFO  time: compiled course-catalog in 2.51s[0m
[0m2021.03.25 17:36:48 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m
[0m2021.03.25 17:36:50 INFO  no build target: using presentation compiler with only scala-library: 2.12.12[0m





[0m2021.03.25 17:36:50 INFO  time: code lens generation in 2.22s[0m


































[0m2021.03.25 17:37:31 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert


[0m2021.03.25 17:38:34 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
Mar 25, 2021 5:39:22 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 5:39:22 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)


import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
Mar 25, 2021 5:40:00 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 25, 2021 5:40:02 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 25, 2021 5:40:03 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 5:40:03 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 25, 2021 5:40:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 483
Mar 25, 2021 5:41:36 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 25, 2021 5:41:38 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 25, 2021 5:43:06 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 25, 2021 5:43:07 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
Mar 25, 2021 5:43:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 962

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
Mar 25, 2021 5:43:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 966

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
Mar 25, 2021 5:43:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 977

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

}
[0m2021.03.25 17:44:24 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}
Mar 25, 2021 5:45:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1073

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}
Mar 25, 2021 5:45:10 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 5:45:10 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)


import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}
Mar 25, 2021 5:45:29 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 5:45:29 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)


import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}
Mar 25, 2021 5:45:41 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 5:45:41 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)


import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
    }
}
[0m2021.03.25 17:46:41 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}
Mar 25, 2021 5:49:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1679

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}
Mar 25, 2021 5:49:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1685

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {

    }
    @Test def printLong():Unit = {

    }
    @Test def checkPrereq():Unit = {

    }

}
[0m2021.03.25 17:50:14 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)

    }

}
[0m2021.03.25 17:51:23 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}
Mar 25, 2021 5:52:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1990
Mar 25, 2021 5:52:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1996
Mar 25, 2021 5:52:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2002

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}
Mar 25, 2021 5:52:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2014

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        example.prereq.foreach(x=> println(x.getShort))
    }

}
[0m2021.03.25 17:53:08 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\CourseTester.scala[0m

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}

import org.junit._
import org.junit.Assert

class CourseTester {
    var example = Course()

    @Before def init():Unit = {
        for(a <- "test.txt"){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}
Mar 25, 2021 5:56:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2048
[0m2021.03.25 17:56:52 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.25 17:56:59 INFO  time: compiled course-catalog-test in 6.82s[0m
[0m2021.03.25 17:58:21 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.25 17:58:21 INFO  time: compiled course-catalog-test in 0.33s[0m
[0m2021.03.25 17:58:41 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 17:58:44 WARN  failed to generate semanticdb for C:\Users\Jenny\course-catalog\src\main\scala\Complete.scala:
java.nio.file.NoSuchFileException: C:\Users\Jenny\course-catalog\src\main\scala\Complete.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.inputs.Input$File.chars$lzycompute(Input.scala:52)
	at scala.meta.inputs.Input$File.chars(Input.scala:52)
	at scala.meta.internal.parsers.ScalametaParser.<init>(ScalametaParser.scala:152)
	at scala.meta.internal.parsers.ScalametaParser$$anon$257.apply(ScalametaParser.scala:5039)
	at scala.meta.parsers.Api$XtensionParseDialectInput.parse(Api.scala:25)
	at scala.meta.internal.semanticdb.scalac.ParseOps$XtensionCompilationUnitSource.toSource(ParseOps.scala:17)
	at scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:201)
	at scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:52)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.saveSemanticdbForCompilationUnit(SemanticdbPipeline.scala:60)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.apply(SemanticdbPipeline.scala:67)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:454)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:402)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.run(SemanticdbPipeline.scala:77)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1511)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1495)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1488)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1614)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:148)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:123)
	at xsbt.CompilerInterface.run(CompilerInterface.scala:35)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:252)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:121)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:94)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.compileSources$1(BloopHighLevelCompiler.scala:142)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$7(BloopHighLevelCompiler.scala:160)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$1(BloopHighLevelCompiler.scala:72)
	at bloop.tracing.BraveTracer.traceInternal(BraveTracer.scala:65)
	at bloop.tracing.BraveTracer.trace(BraveTracer.scala:39)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.timed$1(BloopHighLevelCompiler.scala:71)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$6(BloopHighLevelCompiler.scala:160)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at monix.eval.internal.TaskRunLoop$.monix$eval$internal$TaskRunLoop$$loop$1(TaskRunLoop.scala:187)
	at monix.eval.internal.TaskRunLoop$RestartCallback$1.onSuccess(TaskRunLoop.scala:119)
	at monix.eval.Task$.$anonfun$forkedUnit$2(Task.scala:1463)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1426)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
[0m
[0m2021.03.25 17:58:44 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 17:58:48 WARN  failed to generate semanticdb for C:\Users\Jenny\course-catalog\src\main\scala\CourseCatalog.scala:
java.nio.file.NoSuchFileException: C:\Users\Jenny\course-catalog\src\main\scala\CourseCatalog.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.inputs.Input$File.chars$lzycompute(Input.scala:52)
	at scala.meta.inputs.Input$File.chars(Input.scala:52)
	at scala.meta.internal.parsers.ScalametaParser.<init>(ScalametaParser.scala:152)
	at scala.meta.internal.parsers.ScalametaParser$$anon$257.apply(ScalametaParser.scala:5039)
	at scala.meta.parsers.Api$XtensionParseDialectInput.parse(Api.scala:25)
	at scala.meta.internal.semanticdb.scalac.ParseOps$XtensionCompilationUnitSource.toSource(ParseOps.scala:17)
	at scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:201)
	at scala.meta.internal.semanticdb.scalac.TextDocumentOps$XtensionCompilationUnitDocument.toTextDocument(TextDocumentOps.scala:52)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.saveSemanticdbForCompilationUnit(SemanticdbPipeline.scala:60)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.apply(SemanticdbPipeline.scala:67)
	at scala.tools.nsc.Global$GlobalPhase.applyPhase(Global.scala:454)
	at scala.tools.nsc.Global$GlobalPhase.run(Global.scala:402)
	at scala.meta.internal.semanticdb.scalac.SemanticdbPipeline$SemanticdbTyperComponent$ComputeSemanticdbPhase.run(SemanticdbPipeline.scala:77)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1511)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1495)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1488)
	at scala.tools.nsc.Global$Run.compile(Global.scala:1614)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:148)
	at xsbt.CachedCompiler0.run(CompilerInterface.scala:123)
	at xsbt.CompilerInterface.run(CompilerInterface.scala:35)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at sbt.internal.inc.AnalyzingCompiler.call(AnalyzingCompiler.scala:252)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:121)
	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:94)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.compileSources$1(BloopHighLevelCompiler.scala:142)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$7(BloopHighLevelCompiler.scala:160)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$1(BloopHighLevelCompiler.scala:72)
	at bloop.tracing.BraveTracer.traceInternal(BraveTracer.scala:65)
	at bloop.tracing.BraveTracer.trace(BraveTracer.scala:39)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.timed$1(BloopHighLevelCompiler.scala:71)
	at sbt.internal.inc.bloop.internal.BloopHighLevelCompiler.$anonfun$compile$6(BloopHighLevelCompiler.scala:160)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at monix.eval.internal.TaskRunLoop$.monix$eval$internal$TaskRunLoop$$loop$1(TaskRunLoop.scala:187)
	at monix.eval.internal.TaskRunLoop$RestartCallback$1.onSuccess(TaskRunLoop.scala:119)
	at monix.eval.Task$.$anonfun$forkedUnit$2(Task.scala:1463)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1426)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
[0m
[0m2021.03.25 17:58:51 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 17:58:53 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:58:53 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:58:53 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:58:53 INFO  time: compiled course-catalog in 1.78s[0m
[0m2021.03.25 17:58:53 ERROR Unexpected error when compiling course-catalog: 'C:\Users\Jenny\course-catalog\src\main\scala\CourseCatalog.scala (The system cannot find the file specified)'[0m
[0m2021.03.25 17:58:53 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:58:53 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:58:53 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:58:53 ERROR Unexpected error when compiling course-catalog: 'C:\Users\Jenny\course-catalog\src\main\scala\CourseCatalog.scala (The system cannot find the file specified)'[0m
[0m2021.03.25 17:58:57 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:58:57 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:58:57 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:58:57 ERROR Unexpected error when compiling course-catalog: 'C:\Users\Jenny\course-catalog\src\main\scala\Group.scala (The system cannot find the file specified)'[0m
[0m2021.03.25 17:58:57 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 17:59:01 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:59:01 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:59:01 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:59:01 INFO  time: compiled course-catalog in 4.1s[0m
[0m2021.03.25 17:59:01 ERROR Unexpected error when compiling course-catalog: 'C:\Users\Jenny\course-catalog\src\main\scala\Requirement.scala (The system cannot find the file specified)'[0m
[0m2021.03.25 17:59:01 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 17:59:03 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.25 17:59:03 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.25 17:59:03 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.25 17:59:04 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-Tp02HSb7QgmO9R-Xu8IZeg==\META-INF\semanticdb\src\main\scala\cc\Group.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-Tp02HSb7QgmO9R-Xu8IZeg==\META-INF\semanticdb\src\main\scala\cc\Group.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.25 17:59:03 INFO  time: compiled course-catalog in 2.5s[0m
[0m2021.03.25 17:59:20 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.25 17:59:20 INFO  time: compiled course-catalog-test in 0.24s[0m
[0m2021.03.25 17:59:23 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.25 17:59:23 INFO  time: compiled course-catalog-test in 0.18s[0m
[0m2021.03.25 17:59:41 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.25 17:59:41 INFO  time: compiled course-catalog-test in 0.19s[0m
Mar 25, 2021 6:00:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2175
[0m2021.03.25 18:01:11 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.25 18:01:11 INFO  Deduplicating compilation of course-catalog from bsp client 'Metals 0.10.0' (since 34m 0.199s)[0m
[0m2021.03.25 18:01:11 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.25 18:01:11 INFO  time: compiled course-catalog in 92ms[0m
Mar 25, 2021 6:01:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2203
[0m2021.03.25 18:01:37 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.25 18:01:37 INFO  time: compiled course-catalog in 0.76s[0m
[0m2021.03.25 18:01:41 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.25 18:01:41 INFO  time: compiled course-catalog in 0.96s[0m
[0m2021.03.25 18:01:46 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:01:46 INFO  time: compiled course-catalog in 0.74s[0m
[0m2021.03.25 18:01:49 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:01:50 INFO  time: compiled course-catalog in 1.02s[0m
[0m2021.03.25 18:01:55 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:01:55 INFO  time: compiled course-catalog in 0.82s[0m
[0m2021.03.25 18:02:00 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:02:01 INFO  time: compiled course-catalog in 1.12s[0m
[0m2021.03.25 18:02:06 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:02:06 INFO  time: compiled course-catalog in 0.82s[0m
[0m2021.03.25 18:02:09 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:02:09 INFO  time: compiled course-catalog in 0.86s[0m
Mar 25, 2021 6:02:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2291
Mar 25, 2021 6:02:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2297
Mar 25, 2021 6:02:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2303
Mar 25, 2021 6:02:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2308
Mar 25, 2021 6:02:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2313
[0m2021.03.25 18:02:22 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:02:22 INFO  time: compiled course-catalog in 0.95s[0m
[0m2021.03.25 18:02:25 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:02:25 INFO  time: compiled course-catalog in 0.77s[0m
Mar 25, 2021 6:02:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2321
Mar 25, 2021 6:03:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2351
[0m2021.03.25 18:04:42 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:04:42 INFO  time: compiled course-catalog in 0.88s[0m
[0m2021.03.25 18:04:57 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:04:57 INFO  time: compiled course-catalog in 0.63s[0m
[0m2021.03.25 18:05:00 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:05:00 INFO  time: compiled course-catalog in 0.64s[0m
[0m2021.03.25 18:05:28 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:05:28 INFO  time: compiled course-catalog in 0.56s[0m
[0m2021.03.25 18:07:21 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:07:21 INFO  time: compiled course-catalog in 0.74s[0m
Mar 25, 2021 6:07:38 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 25, 2021 6:07:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2584
[0m2021.03.25 18:08:12 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:08:12 INFO  time: compiled course-catalog in 0.63s[0m
[0m2021.03.25 18:08:36 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:08:36 INFO  time: compiled course-catalog in 0.68s[0m
Mar 25, 2021 6:08:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2717
[0m2021.03.25 18:08:56 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.25 18:08:56 INFO  time: compiled course-catalog in 0.55s[0m
[0m2021.03.25 18:10:51 ERROR code navigation does not work for the file 'C:\Users\Jenny\course-catalog\src\test\scala\cc\CourseTester.scala' because the SemanticDB file 'C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\test-classes-Metals-Tp02HSb7QgmO9R-Xu8IZeg==\META-INF\semanticdb\src\test\scala\cc\CourseTester.scala.semanticdb' doesn't exist. There can be many reasons for this error. [0m
[0m2021.03.25 22:36:01 INFO  shutting down Metals[0m
[0m2021.03.25 22:36:01 INFO  Shut down connection with build server.[0m
[0m2021.03.25 22:36:01 INFO  Shut down connection with build server.[0m
[0m2021.03.25 22:36:01 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:11:34 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.29 12:11:38 INFO  time: initialize in 4.43s[0m
[0m2021.03.29 12:11:39 INFO  Attempting to connect to the build server...[0m
[0m2021.03.29 12:11:39 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\scala\cc\CourseTester.scala[0m
[0m2021.03.29 12:11:40 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.29 12:11:40 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 11881'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Loading 2 projects from 'c:\Users\Jenny\course-catalog\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog.json'
[0m[32m[D][0m Cache miss for scala instance org.scala-lang:scala-compiler:2.12.12.
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jansi.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jline.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-compiler.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-library.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-reflect.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-xml_2.12.jar
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog-test.json'
[0m[32m[D][0m Configured SemanticDB in projects 'course-catalog', 'course-catalog-test'
[0m[32m[D][0m Missing analysis file for project 'course-catalog-test'
[0m[32m[D][0m Loading previous analysis for 'course-catalog' from 'C:\Users\Jenny\course-catalog\target\streams\compile\bloopAnalysisOut\_global\streams\inc_compile_2.12.zip'.
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:11881...
The server is listening for incoming connections at tcp://127.0.0.1:11881...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:11:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:11:42 INFO  Attempting to connect to the build server...[0m
[0m2021.03.29 12:11:42 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 39445'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 34485'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:39445...
The server is listening for incoming connections at tcp://127.0.0.1:39445...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:34485...
The server is listening for incoming connections at tcp://127.0.0.1:34485...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:11:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:11:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:11:44 INFO  time: Connected to build server in 4.56s[0m
[0m2021.03.29 12:11:44 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.29 12:11:47 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.29 12:11:47 INFO  time: Imported build in 0.41s[0m
[0m2021.03.29 12:11:49 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.29 12:11:49 WARN  no build target for: C:\Users\Jenny\course-catalog\src\test\scala\cc\CourseTester.scala[0m
Exception in thread "pool-4-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:195)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
package cc

import org.junit._
import org.junit.Assert._
import scala.io.Source
import scalafx.Includes._

class CourseTester {
    var example:Course = null

    @Before def init():Unit = {
        
        for(a <- Source.fromFile("test.txt").getLines()){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}
package cc

import org.junit._
import org.junit.Assert._
import scala.io.Source
import scalafx.Includes._

class CourseTester {
    var example:Course = null

    @Before def init():Unit = {
        
        for(a <- Source.fromFile("test.txt").getLines()){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}
package cc

import org.junit._
import org.junit.Assert._
import scala.io.Source
import scalafx.Includes._

class CourseTester {
    var example:Course = null

    @Before def init():Unit = {
        
        for(a <- Source.fromFile("test.txt").getLines()){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}
[0m2021.03.29 12:11:54 INFO  time: code lens generation in 2.46s[0m
[0m2021.03.29 12:12:01 INFO  time: indexed workspace in 13s[0m
package cc

import org.junit._
import org.junit.Assert._
import scala.io.Source
import scalafx.Includes._

class CourseTester {
    var example:Course = null

    @Before def init():Unit = {
        
        for(a <- Source.fromFile("test.txt").getLines()){
          var line = a
          if(line==""){var course = Course()}
          else if (line==" "){example = (course.clone())}
          else if(course.sub==""){
            var ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        //example.fixPrereq
    }
    @Test def printShort():Unit = {
        assertTrue(example.getShort!="")
        println(example.getShort)
    }
    @Test def printLong():Unit = {
        assertTrue(example.getLong!="")
        println(example.getLong)
    }
    @Test def checkPrereq():Unit = {
        assertTrue(example.prq.length!=0)
        //assertTrue(example.prereq.size!=0)
        example.prq.foreach(x=> println(x))
        //example.prereq.foreach(x=> println(x.getShort))
    }

}
[0m2021.03.29 12:12:05 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:12:09 INFO  time: code lens generation in 29s[0m
[0m2021.03.29 12:12:18 INFO  Deduplicating compilation of course-catalog from bsp client 'Metals 0.10.0' (since 36.037s)[0m
[0m2021.03.29 12:12:18 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:12:29 INFO  time: compiled course-catalog in 10s[0m
[0m2021.03.29 12:12:40 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:12:48 INFO  time: compiled course-catalog in 7.04s[0m
[0m2021.03.29 12:12:51 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:12:55 INFO  time: compiled course-catalog in 4.15s[0m
[0m2021.03.29 12:12:58 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:13:00 INFO  time: compiled course-catalog in 2.29s[0m
[0m2021.03.29 12:13:09 INFO  compiling course-catalog (5 scala sources)[0m
[0m2021.03.29 12:13:18 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.29 12:13:18 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.29 12:13:18 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.29 12:13:18 INFO  time: compiled course-catalog in 9.84s[0m
[0m2021.03.29 12:13:21 INFO  compiling course-catalog-test (1 scala source)[0m
[0m2021.03.29 12:13:21 INFO  time: compiled course-catalog-test in 1s[0m
[0m2021.03.29 12:13:35 INFO  shutting down Metals[0m
[0m2021.03.29 12:13:35 INFO  Shut down connection with build server.[0m
[0m2021.03.29 12:13:35 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:13:35 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:14:24 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.29 12:14:28 INFO  time: initialize in 3.87s[0m
[0m2021.03.29 12:14:29 INFO  Attempting to connect to the build server...[0m
[0m2021.03.29 12:14:29 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala[0m
[0m2021.03.29 12:14:29 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala[0m
[0m2021.03.29 12:14:30 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.29 12:14:30 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17629'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17629...
The server is listening for incoming connections at tcp://127.0.0.1:17629...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:14:32 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:14:32 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 14140'...
[0m2021.03.29 12:14:32 INFO  Waiting for the bsp connection to come up...
Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 18934'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:18934...
The server is listening for incoming connections at tcp://127.0.0.1:18934...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:14140...
The server is listening for incoming connections at tcp://127.0.0.1:14140...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:14:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:14:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:14:34 INFO  time: Connected to build server in 4.94s[0m
[0m2021.03.29 12:14:34 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.29 12:14:36 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.29 12:14:37 INFO  time: Imported build in 0.39s[0m

package cc

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event
import scalafx.scene.text.Text
import _root_.scalafx.scene.text.TextAlignment

object CourseCatalog extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(1000,500){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      var types = Array[String]("ap","fl20","fl21","sp21","other")
      var reqs = "gradreqs"
      setup(types,reqs)

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction = (e:ActionEvent) => viewCourse(all.classes(x),"viewAllCourses")})
        screen.children= Array(new Label("All Courses"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup(types:Array[String],reqs:String):Unit = {
        makeCourses(types)
        //makeGradReqs(reqs)
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone());println(course.prq.toString())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
        all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }
      def makeCourses(arr:Array[String]):Unit = {

      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}

Mar 29, 2021 12:14:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
[0m2021.03.29 12:14:44 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
package cc

import scala.collection.mutable.Buffer

class Course (var sub:String, var num:Int, var name:String, var prereq:Set[Course], var des:String) extends Complete{
    var grade = ""
    var prq = Buffer[String]()
   /* def getSubject():String = {sub}
    */def getCode():String = {sub+" "+num}
    /*def getNumber():Int = {num}
    def getDescription():String = {des}
    def getRequirements():Map[String,Boolean] = {prereq}*/
    def getLong():String = {
        var ret = getShort()
        ret+= "\nDescription: "+des+"\nPreRequisites: "
        ret+=prq.toString()
        prereq.foreach((x)=>{ret+= x.getCode + (if(x.done){" (Complete)"}else{" (Incomplete)"})+"\t"})
        ret+"\n"
    }
    def getShort():String = {
        name+"  \t"+sub+" "+num+"\n"
    }
    def fixPrereq(courses:Group):Unit = {
        prq.foreach(x=>prereq+=courses.findCourse(x.strip()))
    }
    def fixDescript():Unit = {
        var ret = ""
        for(x <- 0 until des.length()){
            if(x%50==0){
                ret = des.substring(0,x)+"\n"+des.substring(x,des.length())
            }
        }
        //println(des)
        //des = ret
        //println(des)
    }
    override def toString(): String = {name}
    override def clone():Course = {
        val clon = new Course(sub,num,name,prereq,des)
        clon.grade=grade;clon.prq=prq.clone()
        return clon
    }
    def >(other:Course):Boolean = {if(this.sub==other.sub){this.num>other.num}else this.sub>other.sub}
    def checkReady():Unit = {
        if(!done){
            isReady()
            prereq.foreach((x)=>if(!x.done){notReady()})
        }
    }
}
object Course {
    def apply():Course = {new Course("",0,"",Set[Course](),"")}
}
[0m2021.03.29 12:14:47 INFO  time: code lens generation in 17s[0m
[0m2021.03.29 12:14:51 INFO  time: indexed workspace in 13s[0m
package cc

import scala.collection.mutable.Buffer

class Course (var sub:String, var num:Int, var name:String, var prereq:Set[Course], var des:String) extends Complete{
    var grade = ""
    var prq = Buffer[String]()
   /* def getSubject():String = {sub}
    */def getCode():String = {sub+" "+num}
    /*def getNumber():Int = {num}
    def getDescription():String = {des}
    def getRequirements():Map[String,Boolean] = {prereq}*/
    def getLong():String = {
        var ret = getShort()
        ret+= "\nDescription: "+des+"\nPreRequisites: "
        ret+=prq.toString()
        prereq.foreach((x)=>{ret+= x.getCode + (if(x.done){" (Complete)"}else{" (Incomplete)"})+"\t"})
        ret+"\n"
    }
    def getShort():String = {
        name+"  \t"+sub+" "+num+"\n"
    }
    def fixPrereq(courses:Group):Unit = {
        prq.foreach(x=>prereq+=courses.findCourse(x.strip()))
    }
    def fixDescript():Unit = {
        var ret = ""
        for(x <- 0 until des.length()){
            if(x%50==0){
                ret = des.substring(0,x)+"\n"+des.substring(x,des.length())
            }
        }
        //println(des)
        //des = ret
        //println(des)
    }
    override def toString(): String = {name}
    override def clone():Course = {
        val clon = new Course(sub,num,name,prereq,des)
        clon.grade=grade;clon.prq=prq.clone()
        return clon
    }
    def >(other:Course):Boolean = {if(this.sub==other.sub){this.num>other.num}else this.sub>other.sub}
    def checkReady():Unit = {
        if(!done){
            isReady()
            prereq.foreach((x)=>if(!x.done){notReady()})
        }
    }
}
object Course {
    def apply():Course = {new Course("",0,"",Set[Course](),"")}
}
[0m2021.03.29 12:17:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:17:36 INFO  time: compiled course-catalog in 1.07s[0m
Mar 29, 2021 12:17:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 95
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala in Array[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala, 46, 46, 61)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala in Array[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala, 46, 46, 54)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala in Array[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala, 46, 46, 56)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala in Array[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala, 46, 46, 59)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala in Array[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Test.scala, 46, 46, 59)
Mar 29, 2021 12:18:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 155
Mar 29, 2021 12:18:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 161
Mar 29, 2021 12:18:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 175
[0m2021.03.29 12:18:54 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:18:55 INFO  shutting down Metals[0m
[0m2021.03.29 12:18:55 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:18:55 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:18:55 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:24:23 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.29 12:24:27 INFO  time: initialize in 3.19s[0m
[0m2021.03.29 12:24:28 INFO  Attempting to connect to the build server...[0m
[0m2021.03.29 12:24:27 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\Test.scala[0m
[0m2021.03.29 12:24:28 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.29 12:24:28 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17840'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17840...
The server is listening for incoming connections at tcp://127.0.0.1:17840...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:24:30 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:24:30 INFO  Attempting to connect to the build server...[0m
[0m2021.03.29 12:24:30 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 16838'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 45041'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:45041...
The server is listening for incoming connections at tcp://127.0.0.1:45041...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:16838...
The server is listening for incoming connections at tcp://127.0.0.1:16838...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.29 12:24:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:24:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.29 12:24:31 INFO  time: Connected to build server in 3.86s[0m
[0m2021.03.29 12:24:31 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.29 12:24:35 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.29 12:24:35 INFO  time: Imported build in 0.27s[0m
package cc

object Test{
    def main(args:Array[String]):Unit = {
        println("Hello World")
    }
}
[0m2021.03.29 12:24:43 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
package cc

object Test{
    def main(args:Array[String]):Unit = {
        println("Hello World")
    }
}
[0m2021.03.29 12:24:45 INFO  time: code lens generation in 16s[0m
[0m2021.03.29 12:24:51 INFO  time: indexed workspace in 15s[0m
[0m2021.03.29 12:24:55 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:24:57 INFO  time: compiled course-catalog in 2.53s[0m
Mar 29, 2021 12:38:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15
Mar 29, 2021 12:38:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 27
[0m2021.03.29 12:39:04 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:39:06 INFO  time: compiled course-catalog in 1.66s[0m
Mar 29, 2021 12:39:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 160
Mar 29, 2021 12:42:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 406
Mar 29, 2021 12:43:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 537
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala, 115, 115, 126)
Mar 29, 2021 12:47:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 928
Mar 29, 2021 12:47:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 933
Mar 29, 2021 12:50:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1451
[0m2021.03.29 12:51:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:51:05 INFO  time: compiled course-catalog in 0.44s[0m
[0m2021.03.29 12:51:11 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.29 12:51:11 INFO  time: compiled course-catalog in 0.35s[0m
[0m2021.03.29 12:51:18 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:7:15: stale bloop error: class java.lang.String is not a value
    var prq = String
              ^^^^^^[0m
[0m2021.03.29 12:51:18 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:7:15: stale bloop error: class java.lang.String is not a value
    var prq = String
              ^^^^^^[0m
[0m2021.03.29 12:51:20 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.29 12:51:20 INFO  time: compiled course-catalog in 0.72s[0m
Mar 29, 2021 12:51:21 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
[0m2021.03.29 12:51:34 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.29 12:51:34 INFO  time: compiled course-catalog in 0.38s[0m
[0m2021.03.29 12:51:54 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.29 12:51:54 INFO  time: compiled course-catalog in 0.35s[0m
Mar 29, 2021 12:51:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1598
[0m2021.03.29 12:52:05 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.29 12:52:08 INFO  time: compiled course-catalog in 3.38s[0m
[0m2021.03.29 12:52:08 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:52:10 INFO  time: compiled course-catalog in 1.91s[0m
Mar 29, 2021 12:52:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1625
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:145:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:158:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:171:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:188:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:202:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:211:44: stale bloop error: value getCode is not a member of cc.Course
        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
                                           ^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:145:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:158:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:171:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:188:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:202:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:211:44: stale bloop error: value getCode is not a member of cc.Course
        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
                                           ^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:145:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:158:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:171:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:188:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:202:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:211:44: stale bloop error: value getCode is not a member of cc.Course
        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
                                           ^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:145:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:147:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:158:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:160:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:171:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:173:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:188:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:190:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:202:19: stale bloop error: value sub is not a member of cc.Course
          else if(course.sub==""){
                  ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:13: stale bloop error: value sub is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:204:33: stale bloop error: value num is not a member of cc.Course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^^^^^[0m
[0m2021.03.29 12:52:30 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:211:44: stale bloop error: value getCode is not a member of cc.Course
        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
                                           ^^^^^^^^^[0m
[0m2021.03.29 12:52:32 INFO  compiling course-catalog (3 scala sources)[0m
[0m2021.03.29 12:52:34 INFO  time: compiled course-catalog in 2.46s[0m
[0m2021.03.29 12:52:34 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:52:34 INFO  time: compiled course-catalog in 0.41s[0m
[0m2021.03.29 12:53:12 INFO  compiling course-catalog (3 scala sources)[0m
[0m2021.03.29 12:53:14 INFO  time: compiled course-catalog in 2.29s[0m
[0m2021.03.29 12:53:14 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:53:14 INFO  time: compiled course-catalog in 0.39s[0m
[0m2021.03.29 12:53:19 INFO  compiling course-catalog (3 scala sources)[0m
[0m2021.03.29 12:53:21 INFO  time: compiled course-catalog in 2.16s[0m
[0m2021.03.29 12:53:21 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:53:21 INFO  time: compiled course-catalog in 0.43s[0m
[0m2021.03.29 12:53:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:24:31: stale bloop error: value += is not a member of Int
  Expression does not convert to assignment because:
    value num is not a member of cc.Course
    expansion: sum = sum.+(x.<num: error>.<toString: error>().<substring: error>(1, 2).<toInt: error>)
        classes.foreach((x)=>{sum+=x.num.toString().substring(1,2).toInt})
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:38:39: stale bloop error: value getCode is not a member of cc.Course
        classes.foreach((x)=>{if(cod==x.getCode()){return x}})
                                      ^^^^^^^^^[0m
[0m2021.03.29 12:53:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:24:31: stale bloop error: value += is not a member of Int
  Expression does not convert to assignment because:
    value num is not a member of cc.Course
    expansion: sum = sum.+(x.<num: error>.<toString: error>().<substring: error>(1, 2).<toInt: error>)
        classes.foreach((x)=>{sum+=x.num.toString().substring(1,2).toInt})
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:24 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:38:39: stale bloop error: value getCode is not a member of cc.Course
        classes.foreach((x)=>{if(cod==x.getCode()){return x}})
                                      ^^^^^^^^^[0m
[0m2021.03.29 12:53:28 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:24:31: stale bloop error: value += is not a member of Int
  Expression does not convert to assignment because:
    value num is not a member of cc.Course
    expansion: sum = sum.+(x.<num: error>.<toString: error>().<substring: error>(1, 2).<toInt: error>)
        classes.foreach((x)=>{sum+=x.num.toString().substring(1,2).toInt})
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:28 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:38:39: stale bloop error: value getCode is not a member of cc.Course
        classes.foreach((x)=>{if(cod==x.getCode()){return x}})
                                      ^^^^^^^^^[0m
[0m2021.03.29 12:53:28 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:24:31: stale bloop error: value += is not a member of Int
  Expression does not convert to assignment because:
    value num is not a member of cc.Course
    expansion: sum = sum.+(x.<num: error>.<toString: error>().<substring: error>(1, 2).<toInt: error>)
        classes.foreach((x)=>{sum+=x.num.toString().substring(1,2).toInt})
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:28 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Group.scala:38:39: stale bloop error: value getCode is not a member of cc.Course
        classes.foreach((x)=>{if(cod==x.getCode()){return x}})
                                      ^^^^^^^^^[0m
[0m2021.03.29 12:53:30 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:53:30 INFO  time: compiled course-catalog in 0.45s[0m
[0m2021.03.29 12:53:34 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:53:34 INFO  time: compiled course-catalog in 0.4s[0m
[0m2021.03.29 12:53:38 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:28:30: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
            and.foreach((x)=>ret+=x.getCode()+"\t")
                             ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:38 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:34:32: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
                s.foreach((x)=>ret+=x.getCode()+"\t")
                               ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:38 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:28:30: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
            and.foreach((x)=>ret+=x.getCode()+"\t")
                             ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:38 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:34:32: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
                s.foreach((x)=>ret+=x.getCode()+"\t")
                               ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:45 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:28:30: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
            and.foreach((x)=>ret+=x.getCode()+"\t")
                             ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:45 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:34:32: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
                s.foreach((x)=>ret+=x.getCode()+"\t")
                               ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:45 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:28:30: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
            and.foreach((x)=>ret+=x.getCode()+"\t")
                             ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:45 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:34:32: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value getCode is not a member of cc.Course
    expansion: ret = ret.+(x.<getCode: error>().<$plus: error>("\t"))
                s.foreach((x)=>ret+=x.getCode()+"\t")
                               ^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.29 12:53:47 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:53:47 INFO  time: compiled course-catalog in 0.31s[0m
[0m2021.03.29 12:53:57 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:23:27: stale bloop error: not found: type Group
    def fixPrereq(courses:Group):Unit = {
                          ^^^^^[0m
[0m2021.03.29 12:53:57 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:23:27: stale bloop error: not found: type Group
    def fixPrereq(courses:Group):Unit = {
                          ^^^^^[0m
[0m2021.03.29 12:53:59 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:23:27: stale bloop error: not found: type Group
    def fixPrereq(courses:Group):Unit = {
                          ^^^^^[0m
[0m2021.03.29 12:53:59 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala:23:27: stale bloop error: not found: type Group
    def fixPrereq(courses:Group):Unit = {
                          ^^^^^[0m
[0m2021.03.29 12:54:00 INFO  compiling course-catalog (6 scala sources)[0m
[0m2021.03.29 12:54:02 INFO  time: compiled course-catalog in 2.36s[0m
Mar 29, 2021 12:54:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1795
[0m2021.03.29 12:54:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.29 12:54:37 INFO  time: compiled course-catalog in 1.73s[0m
[0m2021.03.29 12:57:31 INFO  shutting down Metals[0m
[0m2021.03.29 12:57:31 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:57:31 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.29 12:57:31 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.30 16:03:52 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.30 16:03:58 INFO  time: initialize in 6.48s[0m
[0m2021.03.30 16:04:00 INFO  Attempting to connect to the build server...[0m
[0m2021.03.30 16:04:00 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala[0m
[0m2021.03.30 16:04:00 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.30 16:04:01 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 24275'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Loading 2 projects from 'c:\Users\Jenny\course-catalog\.bloop'...
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog-test.json'
[0m[32m[D][0m Cache miss for scala instance org.scala-lang:scala-compiler:2.12.12.
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jansi.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\jline.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-compiler.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-library.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-reflect.jar
[0m[32m[D][0m   => C:\Users\Jenny\.sbt\boot\scala-2.12.12\lib\scala-xml_2.12.jar
[0m[32m[D][0m Loading project from 'c:\Users\Jenny\course-catalog\.bloop\course-catalog.json'
[0m[32m[D][0m Configured SemanticDB in projects 'course-catalog-test', 'course-catalog'
[0m[32m[D][0m Missing analysis file for project 'course-catalog-test'
[0m[32m[D][0m Loading previous analysis for 'course-catalog' from 'C:\Users\Jenny\course-catalog\target\streams\compile\bloopAnalysisOut\_global\streams\inc_compile_2.12.zip'.
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:24275...
The server is listening for incoming connections at tcp://127.0.0.1:24275...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.30 16:04:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 16:04:05 INFO  Attempting to connect to the build server...[0m
[0m2021.03.30 16:04:05 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 23343'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 38091'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:23343...
The server is listening for incoming connections at tcp://127.0.0.1:23343...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:38091...
The server is listening for incoming connections at tcp://127.0.0.1:38091...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.30 16:04:11 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.30 16:04:12 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 16:04:14 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 16:04:14 INFO  time: Connected to build server in 13s[0m
[0m2021.03.30 16:04:14 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.30 16:04:15 INFO  time: Imported build in 0.64s[0m
/*
package cc

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event
import scalafx.scene.text.Text
import _root_.scalafx.scene.text.TextAlignment

object CourseCatalog extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(1000,500){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      var types = Array[String]("ap","fl20","fl21","sp21","other")
      var reqs = "gradreqs"
      setup(types,reqs)

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction = (e:ActionEvent) => viewCourse(all.classes(x),"viewAllCourses")})
        screen.children= Array(new Label("All Courses"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup(types:Array[String],reqs:String):Unit = {
        makeCourses(types)
        //makeGradReqs(reqs)
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone());println(course.prq.toString())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
        all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }
      def makeCourses(arr:Array[String]):Unit = {

      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}
*/
[0m2021.03.30 16:04:24 INFO  no build target: using presentation compiler with only scala-library: 2.12.12[0m
[0m2021.03.30 16:04:33 INFO  time: indexed workspace in 18s[0m
/*
package cc

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event
import scalafx.scene.text.Text
import _root_.scalafx.scene.text.TextAlignment

object CourseCatalog extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(1000,500){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      var types = Array[String]("ap","fl20","fl21","sp21","other")
      var reqs = "gradreqs"
      setup(types,reqs)

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction = (e:ActionEvent) => viewCourse(all.classes(x),"viewAllCourses")})
        screen.children= Array(new Label("All Courses"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup(types:Array[String],reqs:String):Unit = {
        makeCourses(types)
        //makeGradReqs(reqs)
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone());println(course.prq.toString())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
        all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }
      def makeCourses(arr:Array[String]):Unit = {

      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}
*/
[0m2021.03.30 16:04:36 INFO  time: code lens generation in 35s[0m
[0m2021.03.30 16:04:36 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-9SDtrAOFSmCf6Mn5UUJ-Sg==\META-INF\semanticdb\src\main\scala\cc\Complete.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-9SDtrAOFSmCf6Mn5UUJ-Sg==\META-INF\semanticdb\src\main\scala\cc\Complete.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.30 16:04:50 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:04:56 INFO  time: compiled course-catalog in 5.53s[0m
Mar 30, 2021 4:05:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 56
Mar 30, 2021 4:05:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 58
Mar 30, 2021 4:05:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 59
Mar 30, 2021 4:05:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 60
[0m2021.03.30 16:07:52 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:07:52 INFO  time: compiled course-catalog in 0.45s[0m
Mar 30, 2021 4:08:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 308
[0m2021.03.30 16:08:12 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:08:12 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.30 16:08:15 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:08:15 INFO  time: compiled course-catalog in 0.17s[0m
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 82, 82, 92)
[0m2021.03.30 16:08:29 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:08:31 INFO  time: compiled course-catalog in 2.56s[0m
Mar 30, 2021 4:08:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 348
Mar 30, 2021 4:08:50 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 4:08:50 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 134)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 127)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 132)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 132)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 132)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 121, 121, 132)
[0m2021.03.30 16:10:23 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:23 INFO  time: compiled course-catalog in 0.25s[0m
[0m2021.03.30 16:10:27 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:27 INFO  time: compiled course-catalog in 0.17s[0m
Mar 30, 2021 4:10:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 534
[0m2021.03.30 16:10:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:35 INFO  time: compiled course-catalog in 0.15s[0m
[0m2021.03.30 16:10:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:37 INFO  time: compiled course-catalog in 0.18s[0m
[0m2021.03.30 16:10:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:40 INFO  time: compiled course-catalog in 0.14s[0m
Mar 30, 2021 4:10:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 557
[0m2021.03.30 16:10:44 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:10:44 INFO  time: compiled course-catalog in 0.14s[0m
Mar 30, 2021 4:10:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 564
Mar 30, 2021 4:10:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 578
[0m2021.03.30 16:11:01 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 16:11:01 INFO  time: compiled course-catalog in 0.71s[0m
[0m2021.03.30 16:11:34 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 16:11:36 INFO  time: compiled course-catalog in 2.26s[0m
Mar 30, 2021 4:11:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 654
[0m2021.03.30 16:12:22 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:12:24 INFO  time: compiled course-catalog in 1.18s[0m
Mar 30, 2021 4:12:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 753
Mar 30, 2021 4:12:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 759
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 101)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 94)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 95)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 97)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 98)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 99)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 99)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Tree.scala, 88, 88, 99)
[0m2021.03.30 16:15:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 16:15:54 INFO  time: compiled course-catalog in 1.43s[0m
[0m2021.03.30 16:16:25 INFO  shutting down Metals[0m
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...[0m
2021.03.30 16:16:25 INFO  Shut down connection with build server.[0m
[0m2021.03.30 16:16:25 INFO  Shut down connection with build server.[0m
[0m2021.03.30 16:16:25 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
[0m2021.03.30 17:52:30 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.30 17:52:35 INFO  time: initialize in 4.1s[0m
[0m2021.03.30 17:52:36 INFO  Attempting to connect to the build server...[0m
Mar 30, 2021 5:52:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "file:///c%3A/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala",
      "languageId": "scala",
      "version": 1,
      "text": "/*\r\npackage cc\r\n\r\nimport scala.io.Source\r\nimport scalafx.Includes._\r\nimport scala.collection.mutable.Map\r\nimport scala.collection.mutable.Buffer\r\nimport scalafx.application.JFXApp\r\nimport scalafx.scene.Scene\r\nimport scalafx.scene.layout.VBox\r\nimport scalafx.scene.control.Label\r\nimport scalafx.scene.control.Button\r\nimport scalafx.event.ActionEvent\r\nimport scalafx.scene.layout.FlowPane\r\nimport scalafx.geometry.Orientation\r\nimport scalafx.scene.control.OverrunStyle\r\nimport scalafx.scene.input.MouseEvent\r\nimport javafx.event.Event\r\nimport scalafx.event.EventHandler\r\nimport javafx.event\r\nimport scalafx.scene.text.Text\r\nimport _root_.scalafx.scene.text.TextAlignment\r\n\r\nobject CourseCatalog extends JFXApp {\r\n  stage \u003d new JFXApp.PrimaryStage{\r\n    title \u003d \"Course Catalog\"\r\n    scene \u003d new Scene(1000,500){\r\n      \r\n      \r\n      var ap \u003d new Group(\"AP Credit\")\r\n      var all \u003d new Group(\"All Courses\")\r\n      //var filename \u003d \"\"\r\n      var course \u003d Course()\r\n      var ln \u003d Array[String]()\r\n      var line \u003d \"\"\r\n      var fl20 \u003d new Group(\"Fall 2020\")\r\n      var sp21 \u003d new Group(\"Spring 2021\")\r\n      var current \u003d sp21\r\n      var fl21 \u003d new Group(\"Fall 2021\")\r\n      var next \u003d fl21\r\n      var grades \u003d Map[String,String]()\r\n      var options \u003d new Group(\"Options\")\r\n      //var gradreqs \u003d Set[Requirement]()\r\n      //var req \u003d Requirement()\r\n      //var x \u003d \"\"\r\n      //var reqcom \u003d 0\r\n      var credit \u003d new Group(\"Credit\")\r\n      var types \u003d Array[String](\"ap\",\"fl20\",\"fl21\",\"sp21\",\"other\")\r\n      var reqs \u003d \"gradreqs\"\r\n      setup(types,reqs)\r\n\r\n      var screen \u003d new FlowPane(Orientation.VERTICAL){\r\n        children \u003d Array(\r\n          new Label(\"Welcome to Your Course Catalog\"),\r\n          new Button(\"continue\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()}\r\n        )\r\n      }\r\n      content \u003d screen\r\n      def home():Unit \u003d {\r\n        screen.children \u003d Array(\r\n          new Label(\"Home Page\"),\r\n          new Button(\"View Grades \u0026 GPA\"){onAction \u003d (e:ActionEvent) \u003d\u003e {println(\"grades \u0026 gpa\");viewGrades_Gpa()}},\r\n          new Button(\"View Credit\"){onAction \u003d (e:ActionEvent)\u003d\u003e{println(\"credit for ap \u0026 fl20\");viewCredit()}},\r\n          new Button(\"View Current Classes\"){onAction \u003d (e:ActionEvent)\u003d\u003e{println(\"classes for sp21\");viewCurrent()}},\r\n          new Button(\"View Next Semester\"){onAction \u003d (e:ActionEvent)\u003d\u003e{println(\"classes for fl21\");viewNext()}},\r\n          new Button(\"View All Course Descriptions\"){onAction \u003d (e:ActionEvent)\u003d\u003e{println(\"all courses\");viewAllCourses()}}\r\n        )\r\n      }\r\n      def getBack(back:String):Unit \u003d {\r\n        back match {\r\n          case \"viewCurrent\" \u003d\u003e viewCurrent()\r\n          case \"viewNext\" \u003d\u003e viewNext()\r\n          case \"viewAllCourses\" \u003d\u003e viewAllCourses()\r\n          case _ \u003d\u003e home()\r\n        }\r\n      }\r\n      def viewGrades_Gpa():Unit \u003d {screen.children \u003d Array(\r\n          new Label(\"Grades\"),\r\n          new Label(getGrades),\r\n          new Label(\"GPA\"),\r\n          new Label(getGPA),\r\n          new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()}\r\n        )\r\n      }\r\n      def viewCredit():Unit \u003d {screen.children \u003d Array(\r\n          new Label(credit.getShort()),\r\n          new Label(\"Total: \"+credit.getHours()+\" hours\"),\r\n          new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()}\r\n        )\r\n      }\r\n      def viewCurrent():Unit \u003d {\r\n        var temp \u003d Array.tabulate(current.classes.length)(x \u003d\u003e new Button(current.classes(x).getShort){onAction \u003d (e:ActionEvent)\u003d\u003eviewCourse(current.classes(x),\"viewCurrent\")})\r\n        screen.children \u003d Array(new Label(\"Current Classes (\"+current.name+\")\"))++\r\n          temp++Array(new Label(\"Hours: \"+current.getHours()),new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()})\r\n      }\r\n      def viewNext():Unit \u003d {\r\n        var temp \u003d Array.tabulate(next.classes.length)(\r\n            x \u003d\u003e new Button(next.classes(x).getShort){onAction \u003d (e:ActionEvent)\u003d\u003eviewCourseEdit(next.classes(x))}\r\n          )\r\n        screen.children \u003d Array(new Label(\"Next Semester (\"+next.name+\")\"))++\r\n          temp++Array(new Button(\"Add Course\"){onAction\u003d(e:ActionEvent)\u003d\u003eviewAllCourseEdit()},new Label(\"Hours: \"+next.getHours()),new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()})\r\n        \r\n      }\r\n      def viewAllCourses():Unit \u003d {\r\n        var temp \u003d Array.tabulate(all.classes.length)(x \u003d\u003e new Button(all.classes(x).getShort){onAction \u003d (e:ActionEvent) \u003d\u003e viewCourse(all.classes(x),\"viewAllCourses\")})\r\n        screen.children\u003d Array(new Label(\"All Courses\"))++Array(new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()})++temp\r\n        \r\n      }\r\n      def viewCourse(x:Course,back:String):Unit \u003d {\r\n        var temp \u003d new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value \u003d 800\r\n        screen.children \u003d Array(\r\n          temp,\r\n          new Button(\"Back\"){onAction \u003d (e:ActionEvent)\u003d\u003egetBack(back)}\r\n        )\r\n      }\r\n      def viewCourseEdit(x:Course):Unit \u003d {\r\n        var temp \u003d new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value \u003d 800\r\n        screen.children \u003d Array(\r\n          temp,\r\n          new Button(\"Add Course\"){onAction \u003d (e:ActionEvent)\u003d\u003enext.add(x)},\r\n          new Button(\"Remove Course\"){onAction \u003d (e:ActionEvent)\u003d\u003enext.remove(x)},\r\n          new Button(\"Back\"){onAction \u003d (e:ActionEvent)\u003d\u003eviewNext()}\r\n        )\r\n      }\r\n      def viewAllCourseEdit():Unit \u003d {\r\n        \r\n        var temp \u003d Array.tabulate(all.classes.length)(x \u003d\u003e new Button(all.classes(x).getShort){onAction\u003d(e:ActionEvent)\u003d\u003eviewCourseEdit(all.classes(x))})\r\n        screen.children \u003d Array(new Label(\"All Courses\"))++Array(new Button(\"Back\"){onAction \u003d (e:ActionEvent)\u003d\u003eviewNext()},new Button(\"Home\"){onAction \u003d (e:ActionEvent) \u003d\u003e home()})++temp\r\n        \r\n      }\r\n    \r\n      \r\n\r\n      \r\n\r\n\r\n      def setup(types:Array[String],reqs:String):Unit \u003d {\r\n        makeCourses(types)\r\n        //makeGradReqs(reqs)\r\n        var filename \u003d Source.fromFile(\"ap.txt\").getLines()\r\n        for(a \u003c- filename){\r\n          line \u003d a\r\n          if(line\u003d\u003d\"\"){course \u003d Course()}\r\n          else if (line\u003d\u003d\" \"){ap.add(course.clone())}\r\n          else if(course.sub\u003d\u003d\"\"){\r\n            ln \u003d line.split(\" \")\r\n            course.sub \u003d ln(0); course.num \u003d ln(1).toInt\r\n          }\r\n          else if(course.name\u003d\u003d\"\"){course.name\u003dline}\r\n          else if(course.des\u003d\u003d\"\"){course.des\u003dline}\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{course.prq +\u003d r})}\r\n        }\r\n        filename \u003d Source.fromFile(\"fl20.txt\").getLines()\r\n        for(b \u003c- filename){\r\n          line \u003d b\r\n          if(line\u003d\u003d\"\"){course \u003d Course()}\r\n          else if (line\u003d\u003d\" \"){fl20.add(course.clone())}\r\n          else if(course.sub\u003d\u003d\"\"){\r\n            ln \u003d line.split(\" \")\r\n            course.sub \u003d ln(0); course.num \u003d ln(1).toInt;course.grade\u003dln(2)\r\n          }\r\n          else if(course.name\u003d\u003d\"\"){course.name\u003dline}\r\n          else if(course.des\u003d\u003d\"\"){course.des\u003dline}\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{course.prq +\u003d r})}\r\n        }\r\n        filename \u003d Source.fromFile(\"sp21.txt\").getLines()\r\n        for(c \u003c- filename){\r\n          line \u003d c\r\n          if(line\u003d\u003d\"\"){course \u003d Course()}\r\n          else if (line\u003d\u003d\" \"){sp21.add(course.clone());println(course.prq.toString())}\r\n          else if(course.sub\u003d\u003d\"\"){\r\n            ln \u003d line.split(\" \")\r\n            course.sub \u003d ln(0); course.num \u003d ln(1).toInt;//course.grade\u003dln(2)\r\n          }\r\n          else if(course.name\u003d\u003d\"\"){course.name\u003dline}\r\n          else if(course.des\u003d\u003d\"\"){course.des\u003dline}\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{course.prq +\u003d r})}\r\n        }\r\n        credit++\u003d fl20.classes++ap.classes\r\n        all++\u003d fl20.classes++ap.classes\r\n        all.classes.foreach((x)\u003d\u003ex.taken())\r\n\r\n        filename \u003d Source.fromFile(\"fl21.txt\").getLines()\r\n        for(d \u003c- filename){\r\n          line \u003d d\r\n          if(line\u003d\u003d\"\"){course \u003d Course()}\r\n          else if (line\u003d\u003d\" \"){fl21.add(course.clone())}\r\n          else if(course.sub\u003d\u003d\"\"){\r\n            ln \u003d line.split(\" \")\r\n            course.sub \u003d ln(0); course.num \u003d ln(1).toInt;//course.grade\u003dln(2)\r\n          }\r\n          else if(course.name\u003d\u003d\"\"){course.name\u003dline}\r\n          else if(course.des\u003d\u003d\"\"){course.des\u003dline}\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{course.prq +\u003d r})}\r\n        }\r\n        \r\n        filename \u003d Source.fromFile(\"other.txt\").getLines()\r\n        for(e \u003c- filename){\r\n          line \u003d e\r\n          if(line\u003d\u003d\"\"){course \u003d Course()}\r\n          else if (line\u003d\u003d\" \"){all.add(course.clone())}\r\n          else if(course.sub\u003d\u003d\"\"){\r\n            ln \u003d line.split(\" \")\r\n            course.sub \u003d ln(0); course.num \u003d ln(1).toInt\r\n          }\r\n          else if(course.name\u003d\u003d\"\"){course.name\u003dline}\r\n          else if(course.des\u003d\u003d\"\"){course.des\u003dline}\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{course.prq +\u003d r})}\r\n        }\r\n\r\n        fl20.classes.foreach((x)\u003d\u003egrades+\u003d(x.getCode-\u003ex.grade))\r\n        \r\n        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()\r\n        all.classes.foreach(x \u003d\u003e {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})\r\n        /*filename \u003d \"gradreqs.txt\"\r\n        for(x \u003c- Source.fromFile(filename).getLines()){\r\n          line \u003d x\r\n          if(line\u003d\u003d\"\"){req \u003d Requirement();}\r\n          else if (line\u003d\u003d\" \"){gradreqs+\u003dreq.clone()}\r\n          else if(req.name\u003d\u003d\"\"){req.name\u003dline}\r\n          else if(line.contains(\u0027/\u0027)){line.split(\"/\").foreach((r)\u003d\u003e{\r\n            courses.foreach((c)\u003d\u003eif(c.toString()\u003d\u003dr)arr+\u003d c)}) \r\n            req.or +\u003d (arr.clone -\u003e false)\r\n            arr \u003d Buffer[Course]()\r\n          }\r\n          else {line.split(\",\").foreach((r)\u003d\u003e{\r\n            courses.foreach((c)\u003d\u003eif(c.toString()\u003d\u003dr)course \u003d c)\r\n            req.and +\u003d (course -\u003e false)})\r\n          }\r\n        }\r\n        gradreqs.foreach(_.update())\r\n        gradreqs.foreach((x)\u003d\u003eif(x.checkTrue)reqcom+\u003d1)*/\r\n      }\r\n      def makeCourses(arr:Array[String]):Unit \u003d {\r\n\r\n      }\r\n\r\n      \r\n    \r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\n      def getGrades():String \u003d {\r\n        var ret \u003d \"\"\r\n        grades.foreach((tup)\u003d\u003eret+\u003d(tup._1+\"\\t\"+tup._2+\"\\n\"))\r\n        ret+\"\\n\"\r\n      }\r\n      def getGPA():String \u003d {\r\n        var ret \u003d 0.0\r\n        var sum \u003d 0\r\n        grades.foreach((tup)\u003d\u003eret+\u003d(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))\r\n        grades.foreach((tup)\u003d\u003esum+\u003dtup._1.substring(6,7).toInt)\r\n        \"GPA: \"+\"%.3f\".format(ret/sum)+\"\\n\"\r\n      }\r\n      def getGradePoint(grade:String):Double \u003d {\r\n        return grade match {\r\n          case \"A\" \u003d\u003e 4.0\r\n          case \"A-\" \u003d\u003e 3.667\r\n          case \"B+\" \u003d\u003e 3.333\r\n          case \"B\" \u003d\u003e 3.0\r\n          case \"B-\" \u003d\u003e 2.667\r\n          case \"C+\" \u003d\u003e 2.333\r\n          case \"C\" \u003d\u003e 2.0\r\n          case \"C-\" \u003d\u003e 1.667\r\n          case \"D+\" \u003d\u003e 1.333\r\n          case \"D\" \u003d\u003e 1.0\r\n          case _ \u003d\u003e 0.0\r\n        }\r\n      }\r\n    \r\n    }\r\n  }\r\n\r\n}\r\n*/"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.NoSuchFileException: c:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.MetalsLanguageServer.didOpen(MetalsLanguageServer.scala:939)
	... 16 more

[0m2021.03.30 17:52:36 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
Mar 30, 2021 5:52:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.util.NoSuchElementException: BatchedFunction
java.util.concurrent.CompletionException: java.util.NoSuchElementException: BatchedFunction
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.util.NoSuchElementException: BatchedFunction
	at scala.meta.internal.metals.BatchedFunction.<init>(BatchedFunction.scala:59)
	at scala.meta.internal.metals.MetalsLanguageServer.<init>(MetalsLanguageServer.scala:186)
	at scala.meta.metals.Main$.main(Main.scala:51)
	at scala.meta.metals.Main.main(Main.scala)

Mar 30, 2021 5:52:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
[0m2021.03.30 17:52:36 ERROR text document: file:///c:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala
java.nio.file.NoSuchFileException: c:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.metals.InteractiveSemanticdbs.$anonfun$textDocument$1(InteractiveSemanticdbs.scala:77)
	at java.util.HashMap.compute(HashMap.java:1228)
	at java.util.Collections$SynchronizedMap.compute(Collections.java:2692)
	at scala.meta.internal.metals.InteractiveSemanticdbs.textDocument(InteractiveSemanticdbs.scala:76)
	at scala.meta.internal.metals.AggregateSemanticdbs.loop$1(AggregateSemanticdbs.scala:30)
	at scala.meta.internal.metals.AggregateSemanticdbs.textDocument(AggregateSemanticdbs.scala:36)
	at scala.meta.internal.metals.CodeLensProvider.findLenses(CodeLensProvider.scala:22)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$2(MetalsLanguageServer.scala:1464)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$codeLens$1(MetalsLanguageServer.scala:1462)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$apply$2(CancelTokens.scala:26)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.30 17:52:37 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17667'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17667...
The server is listening for incoming connections at tcp://127.0.0.1:17667...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.30 17:52:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 17:52:38 INFO  Attempting to connect to the build server...[0m
[0m2021.03.30 17:52:38 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 31031'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 20279'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:31031...
The server is listening for incoming connections at tcp://127.0.0.1:31031...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:20279...
The server is listening for incoming connections at tcp://127.0.0.1:20279...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.30 17:52:41 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 17:52:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.30 17:52:42 INFO  time: Connected to build server in 5.72s[0m
[0m2021.03.30 17:52:42 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.30 17:52:44 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
Mar 30, 2021 5:52:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4
Mar 30, 2021 5:52:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2
Mar 30, 2021 5:52:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3
Mar 30, 2021 5:52:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5
[0m2021.03.30 17:52:44 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\CourseCatalog.scala[0m
[0m2021.03.30 17:52:44 INFO  time: Imported build in 0.38s[0m
[0m2021.03.30 17:52:45 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
Mar 30, 2021 5:52:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7
Mar 30, 2021 5:52:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10
[0m2021.03.30 17:52:45 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\Course.scala[0m
/*
package cc

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event
import scalafx.scene.text.Text
import _root_.scalafx.scene.text.TextAlignment

object CourseCatalog extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(1000,500){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      var types = Array[String]("ap","fl20","fl21","sp21","other")
      var reqs = "gradreqs"
      setup(types,reqs)

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction = (e:ActionEvent) => viewCourse(all.classes(x),"viewAllCourses")})
        screen.children= Array(new Label("All Courses"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup(types:Array[String],reqs:String):Unit = {
        makeCourses(types)
        //makeGradReqs(reqs)
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone());println(course.prq.toString())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
        all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }
      def makeCourses(arr:Array[String]):Unit = {

      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}
*/
package cc

import scala.collection.mutable.Buffer

class Course (var code:String, var name:String, var prereq:Buffer[Course], var des:String) extends Complete{
    var grade = ""
    var prq = ""
   // def getSubject():String = {sub}
    //def getCode():String = {sub+" "+num}
    /*def getNumber():Int = {num}
    def getDescription():String = {des}
    def getRequirements():Map[String,Boolean] = {prereq}*/
    def getLong():String = {
        var ret = getShort()
        ret+= "\nDescription: "+des+"\nPreRequisites: "
        ret+=prq.toString()
        prereq.foreach((x)=>{ret+= x.code + (if(x.done){" (Complete)"}else{" (Incomplete)"})+"\t"})
        ret+"\n"
    }
    def getShort():String = {
        name+"  \t"+code+"\n"
    }
    /*def fixPrereq(courses:Group):Unit = {
        prq.foreach(x=>prereq+=courses.findCourse(x))
    }*/
    def fixDescript():Unit = {
        var ret = ""
        for(x <- 0 until des.length()){
            if(x%50==0){
                ret = des.substring(0,x)+"\n"+des.substring(x,des.length())
            }
        }
        //println(des)
        //des = ret
        //println(des)
    }
    override def toString(): String = {name}
    override def clone():Course = {
        val clon = new Course(code,name,prereq,des)
        clon.grade=grade;clon.prq=prq
        return clon
    }
    def >(other:Course):Boolean = {this.code>other.code}
    def checkReady():Unit = {
        if(!done){
            isReady()
            prereq.foreach((x)=>if(!x.done){notReady()})
        }
    }
}
object Course {
    def apply():Course = {new Course("","",Buffer[Course](),"")}
}
package cc

import scala.collection.mutable.Buffer

class Course (var code:String, var name:String, var prereq:Buffer[Course], var des:String) extends Complete{
    var grade = ""
    var prq = ""
   // def getSubject():String = {sub}
    //def getCode():String = {sub+" "+num}
    /*def getNumber():Int = {num}
    def getDescription():String = {des}
    def getRequirements():Map[String,Boolean] = {prereq}*/
    def getLong():String = {
        var ret = getShort()
        ret+= "\nDescription: "+des+"\nPreRequisites: "
        ret+=prq.toString()
        prereq.foreach((x)=>{ret+= x.code + (if(x.done){" (Complete)"}else{" (Incomplete)"})+"\t"})
        ret+"\n"
    }
    def getShort():String = {
        name+"  \t"+code+"\n"
    }
    /*def fixPrereq(courses:Group):Unit = {
        prq.foreach(x=>prereq+=courses.findCourse(x))
    }*/
    def fixDescript():Unit = {
        var ret = ""
        for(x <- 0 until des.length()){
            if(x%50==0){
                ret = des.substring(0,x)+"\n"+des.substring(x,des.length())
            }
        }
        //println(des)
        //des = ret
        //println(des)
    }
    override def toString(): String = {name}
    override def clone():Course = {
        val clon = new Course(code,name,prereq,des)
        clon.grade=grade;clon.prq=prq
        return clon
    }
    def >(other:Course):Boolean = {this.code>other.code}
    def checkReady():Unit = {
        if(!done){
            isReady()
            prereq.foreach((x)=>if(!x.done){notReady()})
        }
    }
}
object Course {
    def apply():Course = {new Course("","",Buffer[Course](),"")}
}
[0m2021.03.30 17:52:51 INFO  time: code lens generation in 5.71s[0m
package cc

import scala.collection.mutable.Buffer

class Course (var code:String, var name:String, var prereq:Buffer[Course], var des:String) extends Complete{
    var grade = ""
    var prq = ""
   // def getSubject():String = {sub}
    //def getCode():String = {sub+" "+num}
    /*def getNumber():Int = {num}
    def getDescription():String = {des}
    def getRequirements():Map[String,Boolean] = {prereq}*/
    def getLong():String = {
        var ret = getShort()
        ret+= "\nDescription: "+des+"\nPreRequisites: "
        ret+=prq.toString()
        prereq.foreach((x)=>{ret+= x.code + (if(x.done){" (Complete)"}else{" (Incomplete)"})+"\t"})
        ret+"\n"
    }
    def getShort():String = {
        name+"  \t"+code+"\n"
    }
    /*def fixPrereq(courses:Group):Unit = {
        prq.foreach(x=>prereq+=courses.findCourse(x))
    }*/
    def fixDescript():Unit = {
        var ret = ""
        for(x <- 0 until des.length()){
            if(x%50==0){
                ret = des.substring(0,x)+"\n"+des.substring(x,des.length())
            }
        }
        //println(des)
        //des = ret
        //println(des)
    }
    override def toString(): String = {name}
    override def clone():Course = {
        val clon = new Course(code,name,prereq,des)
        clon.grade=grade;clon.prq=prq
        return clon
    }
    def >(other:Course):Boolean = {this.code>other.code}
    def checkReady():Unit = {
        if(!done){
            isReady()
            prereq.foreach((x)=>if(!x.done){notReady()})
        }
    }
}
object Course {
    def apply():Course = {new Course("","",Buffer[Course](),"")}
}
[0m2021.03.30 17:52:51 INFO  time: code lens generation in 5.85s[0m
/*
package cc

import scala.io.Source
import scalafx.Includes._
import scala.collection.mutable.Map
import scala.collection.mutable.Buffer
import scalafx.application.JFXApp
import scalafx.scene.Scene
import scalafx.scene.layout.VBox
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import scalafx.event.ActionEvent
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.OverrunStyle
import scalafx.scene.input.MouseEvent
import javafx.event.Event
import scalafx.event.EventHandler
import javafx.event
import scalafx.scene.text.Text
import _root_.scalafx.scene.text.TextAlignment

object CourseCatalog extends JFXApp {
  stage = new JFXApp.PrimaryStage{
    title = "Course Catalog"
    scene = new Scene(1000,500){
      
      
      var ap = new Group("AP Credit")
      var all = new Group("All Courses")
      //var filename = ""
      var course = Course()
      var ln = Array[String]()
      var line = ""
      var fl20 = new Group("Fall 2020")
      var sp21 = new Group("Spring 2021")
      var current = sp21
      var fl21 = new Group("Fall 2021")
      var next = fl21
      var grades = Map[String,String]()
      var options = new Group("Options")
      //var gradreqs = Set[Requirement]()
      //var req = Requirement()
      //var x = ""
      //var reqcom = 0
      var credit = new Group("Credit")
      var types = Array[String]("ap","fl20","fl21","sp21","other")
      var reqs = "gradreqs"
      setup(types,reqs)

      var screen = new FlowPane(Orientation.VERTICAL){
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue"){onAction = (e:ActionEvent) => home()}
        )
      }
      content = screen
      def home():Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA"){onAction = (e:ActionEvent) => {println("grades & gpa");viewGrades_Gpa()}},
          new Button("View Credit"){onAction = (e:ActionEvent)=>{println("credit for ap & fl20");viewCredit()}},
          new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def getBack(back:String):Unit = {
        back match {
          case "viewCurrent" => viewCurrent()
          case "viewNext" => viewNext()
          case "viewAllCourses" => viewAllCourses()
          case _ => home()
        }
      }
      def viewGrades_Gpa():Unit = {screen.children = Array(
          new Label("Grades"),
          new Label(getGrades),
          new Label("GPA"),
          new Label(getGPA),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCredit():Unit = {screen.children = Array(
          new Label(credit.getShort()),
          new Label("Total: "+credit.getHours()+" hours"),
          new Button("Home"){onAction = (e:ActionEvent) => home()}
        )
      }
      def viewCurrent():Unit = {
        var temp = Array.tabulate(current.classes.length)(x => new Button(current.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourse(current.classes(x),"viewCurrent")})
        screen.children = Array(new Label("Current Classes ("+current.name+")"))++
          temp++Array(new Label("Hours: "+current.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
      }
      def viewNext():Unit = {
        var temp = Array.tabulate(next.classes.length)(
            x => new Button(next.classes(x).getShort){onAction = (e:ActionEvent)=>viewCourseEdit(next.classes(x))}
          )
        screen.children = Array(new Label("Next Semester ("+next.name+")"))++
          temp++Array(new Button("Add Course"){onAction=(e:ActionEvent)=>viewAllCourseEdit()},new Label("Hours: "+next.getHours()),new Button("Home"){onAction = (e:ActionEvent) => home()})
        
      }
      def viewAllCourses():Unit = {
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction = (e:ActionEvent) => viewCourse(all.classes(x),"viewAllCourses")})
        screen.children= Array(new Label("All Courses"))++Array(new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
      def viewCourse(x:Course,back:String):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Back"){onAction = (e:ActionEvent)=>getBack(back)}
        )
      }
      def viewCourseEdit(x:Course):Unit = {
        var temp = new Text(x.getLong());temp.setTextAlignment(TextAlignment.LEFT);temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course"){onAction = (e:ActionEvent)=>next.add(x)},
          new Button("Remove Course"){onAction = (e:ActionEvent)=>next.remove(x)},
          new Button("Back"){onAction = (e:ActionEvent)=>viewNext()}
        )
      }
      def viewAllCourseEdit():Unit = {
        
        var temp = Array.tabulate(all.classes.length)(x => new Button(all.classes(x).getShort){onAction=(e:ActionEvent)=>viewCourseEdit(all.classes(x))})
        screen.children = Array(new Label("All Courses"))++Array(new Button("Back"){onAction = (e:ActionEvent)=>viewNext()},new Button("Home"){onAction = (e:ActionEvent) => home()})++temp
        
      }
    
      

      


      def setup(types:Array[String],reqs:String):Unit = {
        makeCourses(types)
        //makeGradReqs(reqs)
        var filename = Source.fromFile("ap.txt").getLines()
        for(a <- filename){
          line = a
          if(line==""){course = Course()}
          else if (line==" "){ap.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("fl20.txt").getLines()
        for(b <- filename){
          line = b
          if(line==""){course = Course()}
          else if (line==" "){fl20.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        filename = Source.fromFile("sp21.txt").getLines()
        for(c <- filename){
          line = c
          if(line==""){course = Course()}
          else if (line==" "){sp21.add(course.clone());println(course.prq.toString())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        credit++= fl20.classes++ap.classes
        all++= fl20.classes++ap.classes
        all.classes.foreach((x)=>x.taken())

        filename = Source.fromFile("fl21.txt").getLines()
        for(d <- filename){
          line = d
          if(line==""){course = Course()}
          else if (line==" "){fl21.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt;//course.grade=ln(2)
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }
        
        filename = Source.fromFile("other.txt").getLines()
        for(e <- filename){
          line = e
          if(line==""){course = Course()}
          else if (line==" "){all.add(course.clone())}
          else if(course.sub==""){
            ln = line.split(" ")
            course.sub = ln(0); course.num = ln(1).toInt
          }
          else if(course.name==""){course.name=line}
          else if(course.des==""){course.des=line}
          else {line.split(",").foreach((r)=>{course.prq += r})}
        }

        fl20.classes.foreach((x)=>grades+=(x.getCode->x.grade))
        
        ap.sort();fl20.sort();fl21.sort();sp21.sort();all.sort();options.sort()
        all.classes.foreach(x => {x.fixPrereq(all);x.checkReady();/*x.fixDescript()*/})
        /*filename = "gradreqs.txt"
        for(x <- Source.fromFile(filename).getLines()){
          line = x
          if(line==""){req = Requirement();}
          else if (line==" "){gradreqs+=req.clone()}
          else if(req.name==""){req.name=line}
          else if(line.contains('/')){line.split("/").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)arr+= c)}) 
            req.or += (arr.clone -> false)
            arr = Buffer[Course]()
          }
          else {line.split(",").foreach((r)=>{
            courses.foreach((c)=>if(c.toString()==r)course = c)
            req.and += (course -> false)})
          }
        }
        gradreqs.foreach(_.update())
        gradreqs.foreach((x)=>if(x.checkTrue)reqcom+=1)*/
      }
      def makeCourses(arr:Array[String]):Unit = {

      }

      
    





      

      def getGrades():String = {
        var ret = ""
        grades.foreach((tup)=>ret+=(tup._1+"\t"+tup._2+"\n"))
        ret+"\n"
      }
      def getGPA():String = {
        var ret = 0.0
        var sum = 0
        grades.foreach((tup)=>ret+=(tup._1.substring(6,7).toInt*getGradePoint(tup._2)))
        grades.foreach((tup)=>sum+=tup._1.substring(6,7).toInt)
        "GPA: "+"%.3f".format(ret/sum)+"\n"
      }
      def getGradePoint(grade:String):Double = {
        return grade match {
          case "A" => 4.0
          case "A-" => 3.667
          case "B+" => 3.333
          case "B" => 3.0
          case "B-" => 2.667
          case "C+" => 2.333
          case "C" => 2.0
          case "C-" => 1.667
          case "D+" => 1.333
          case "D" => 1.0
          case _ => 0.0
        }
      }
    
    }
  }

}
*/
[0m2021.03.30 17:52:52 INFO  time: code lens generation in 7.77s[0m
[0m2021.03.30 17:52:56 INFO  time: indexed workspace in 12s[0m
[0m2021.03.30 17:52:59 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 17:53:01 INFO  time: compiled course-catalog in 1.82s[0m
[0m2021.03.30 17:53:14 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 17:53:14 INFO  time: compiled course-catalog in 0.59s[0m
Mar 30, 2021 5:53:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 49
Mar 30, 2021 5:53:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 90
Mar 30, 2021 5:53:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 96
Mar 30, 2021 5:53:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 112
Mar 30, 2021 5:53:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 118
Mar 30, 2021 5:53:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 127
Mar 30, 2021 5:53:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 130
Mar 30, 2021 5:53:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 126
Mar 30, 2021 5:54:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 176
Mar 30, 2021 5:54:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 197
Mar 30, 2021 5:54:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 203
Mar 30, 2021 5:54:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 294
Mar 30, 2021 5:54:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 323
Mar 30, 2021 5:54:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 329
[0m2021.03.30 17:54:38 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 17:54:38 INFO  time: compiled course-catalog in 0.21s[0m
[0m2021.03.30 17:54:47 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 17:54:47 INFO  time: compiled course-catalog in 0.22s[0m
[0m2021.03.30 17:54:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 17:54:54 INFO  time: compiled course-catalog in 1.25s[0m
Mar 30, 2021 5:54:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 360
Mar 30, 2021 5:54:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 368
Mar 30, 2021 6:06:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 608
Mar 30, 2021 6:06:54 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 665
Mar 30, 2021 6:07:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 745
Mar 30, 2021 6:07:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 750
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala in Array[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala, 40, 40, 55)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala in Array[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala, 40, 40, 48)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala in Array[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala, 40, 40, 53)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala in Array[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala, 40, 40, 53)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala in Array[String]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/CourseCatalog.scala, 40, 40, 53)
[0m2021.03.30 18:07:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:07:46 INFO  time: compiled course-catalog in 0.85s[0m
Mar 30, 2021 6:07:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 830
[0m2021.03.30 18:07:50 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:07:52 INFO  time: compiled course-catalog in 2.14s[0m
Mar 30, 2021 6:11:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 911
[0m2021.03.30 18:11:23 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:11:23 INFO  time: compiled course-catalog in 0.83s[0m
Mar 30, 2021 6:11:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 926
[0m2021.03.30 18:11:26 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:11:27 INFO  time: compiled course-catalog in 1.08s[0m
Mar 30, 2021 6:11:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 936
Mar 30, 2021 6:11:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 940
Mar 30, 2021 6:11:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 956
[0m2021.03.30 18:12:22 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:22 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.30 18:12:29 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:29 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.30 18:12:36 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:36 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.30 18:12:41 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:41 INFO  time: compiled course-catalog in 0.14s[0m
[0m2021.03.30 18:12:45 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:45 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.30 18:12:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:12:51 INFO  time: compiled course-catalog in 0.16s[0m
[0m2021.03.30 18:13:18 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:13:18 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.30 18:14:13 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:14:13 INFO  time: compiled course-catalog in 0.21s[0m
[0m2021.03.30 18:14:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:14:20 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 18:14:20 INFO  time: compiled course-catalog in 1.24s[0m
Mar 30, 2021 6:14:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1201
Mar 30, 2021 6:14:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1212
Mar 30, 2021 6:14:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1217
[0m2021.03.30 18:14:50 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:14:51 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 18:14:51 INFO  time: compiled course-catalog in 1.35s[0m
[0m2021.03.30 18:15:59 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:15:59 INFO  time: compiled course-catalog in 0.69s[0m
Mar 30, 2021 6:17:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1332
Mar 30, 2021 6:17:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 30, 2021 6:17:36 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 6:17:36 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.30 18:18:20 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:18:21 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 18:18:21 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-HUHi3WHZQFWfXI1BqU_4-A==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-HUHi3WHZQFWfXI1BqU_4-A==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.30 18:18:21 INFO  time: compiled course-catalog in 1.34s[0m
[0m2021.03.30 18:18:44 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:18:45 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 18:18:45 INFO  time: compiled course-catalog in 1.27s[0m
Mar 30, 2021 6:18:46 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1519
[0m2021.03.30 18:20:09 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:20:10 INFO  time: compiled course-catalog in 1.28s[0m
[0m2021.03.30 18:20:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:20:35 INFO  time: compiled course-catalog in 1.13s[0m
Mar 30, 2021 6:20:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1613
Mar 30, 2021 6:20:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1623
Mar 30, 2021 6:20:52 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1629
Mar 30, 2021 6:21:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1765
[0m2021.03.30 18:24:15 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:24:15 INFO  time: compiled course-catalog in 0.69s[0m
Mar 30, 2021 6:24:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2057
Mar 30, 2021 6:24:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2066
[0m2021.03.30 18:25:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:25:40 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 18:25:40 INFO  time: compiled course-catalog in 1.81s[0m
[0m2021.03.30 18:26:26 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:26:26 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.30 18:26:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:26:34 INFO  time: compiled course-catalog in 0.11s[0m
[0m2021.03.30 18:26:41 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:26:41 INFO  time: compiled course-catalog in 0.77s[0m
[0m2021.03.30 18:27:04 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:27:04 INFO  time: compiled course-catalog in 0.86s[0m
[0m2021.03.30 18:28:31 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:28:31 INFO  time: compiled course-catalog in 0.96s[0m
[0m2021.03.30 18:29:25 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:29:25 INFO  time: compiled course-catalog in 0.9s[0m
Mar 30, 2021 6:30:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2953
[0m2021.03.30 18:31:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:31:16 INFO  time: compiled course-catalog in 0.18s[0m
[0m2021.03.30 18:31:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:31:37 INFO  time: compiled course-catalog in 0.18s[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:23:14: stale bloop error: not found: value file
    for(a <- file){
             ^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:25:24: stale bloop error: not found: value course
          if(line==""){course = Course()}
                       ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:26:38: stale bloop error: not found: value course
          else if (line==" "){ap.add(course.clone())}
                                     ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:27:19: stale bloop error: not found: value course
          else if(course.sub==""){
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:28:13: stale bloop error: not found: value ln
            ln = line.split(" ")
            ^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:29:13: stale bloop error: not found: value course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:29:33: stale bloop error: not found: value course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:31:19: stale bloop error: not found: value course
          else if(course.name==""){course.name=line}
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:31:36: stale bloop error: not found: value course
          else if(course.name==""){course.name=line}
                                   ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:32:19: stale bloop error: not found: value course
          else if(course.des==""){course.des=line}
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:32:35: stale bloop error: not found: value course
          else if(course.des==""){course.des=line}
                                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:33:47: stale bloop error: not found: value course
          else {line.split(",").foreach((r)=>{course.prq += r})}
                                              ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:23:14: stale bloop error: not found: value file
    for(a <- file){
             ^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:25:24: stale bloop error: not found: value course
          if(line==""){course = Course()}
                       ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:26:38: stale bloop error: not found: value course
          else if (line==" "){ap.add(course.clone())}
                                     ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:27:19: stale bloop error: not found: value course
          else if(course.sub==""){
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:28:13: stale bloop error: not found: value ln
            ln = line.split(" ")
            ^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:29:13: stale bloop error: not found: value course
            course.sub = ln(0); course.num = ln(1).toInt
            ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:29:33: stale bloop error: not found: value course
            course.sub = ln(0); course.num = ln(1).toInt
                                ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:31:19: stale bloop error: not found: value course
          else if(course.name==""){course.name=line}
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:31:36: stale bloop error: not found: value course
          else if(course.name==""){course.name=line}
                                   ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:32:19: stale bloop error: not found: value course
          else if(course.des==""){course.des=line}
                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:32:35: stale bloop error: not found: value course
          else if(course.des==""){course.des=line}
                                  ^^^^^^[0m
[0m2021.03.30 18:32:05 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:33:47: stale bloop error: not found: value course
          else {line.split(",").foreach((r)=>{course.prq += r})}
                                              ^^^^^^[0m
[0m2021.03.30 18:32:23 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:32:23 INFO  time: compiled course-catalog in 0.21s[0m
[0m2021.03.30 18:33:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:33:16 INFO  time: compiled course-catalog in 0.24s[0m
[0m2021.03.30 18:33:26 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:33:26 INFO  time: compiled course-catalog in 0.23s[0m
[0m2021.03.30 18:34:00 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:34:00 INFO  time: compiled course-catalog in 0.16s[0m
[0m2021.03.30 18:35:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:37:22 INFO  time: compiled course-catalog in 1m30s[0m
Mar 30, 2021 6:39:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3985
[0m2021.03.30 18:40:10 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:40:11 INFO  time: compiled course-catalog in 1.42s[0m
Mar 30, 2021 6:40:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4016
Mar 30, 2021 6:40:26 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4022
Mar 30, 2021 6:40:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4114
[0m2021.03.30 18:41:55 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:41:55 INFO  time: compiled course-catalog in 0.2s[0m
[0m2021.03.30 18:42:01 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:42:02 INFO  time: compiled course-catalog in 1.06s[0m
Mar 30, 2021 6:42:05 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4321
Mar 30, 2021 6:42:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4327
Mar 30, 2021 6:42:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4331
[0m2021.03.30 18:42:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:42:54 INFO  time: compiled course-catalog in 1.05s[0m
[0m2021.03.30 18:43:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:43:36 INFO  time: compiled course-catalog in 1.04s[0m
[0m2021.03.30 18:44:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:44:30 INFO  time: compiled course-catalog in 81ms[0m
Mar 30, 2021 6:45:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4556
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala in scala.collection.mutable.Buffer[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala, 115, 115, 129)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala in scala.collection.mutable.Buffer[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala, 115, 115, 129)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala in scala.collection.mutable.Buffer[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Course.scala, 115, 115, 129)
[0m2021.03.30 18:46:10 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:46:10 INFO  time: compiled course-catalog in 91ms[0m
[0m2021.03.30 18:47:37 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:47:37 INFO  time: compiled course-catalog in 80ms[0m
Mar 30, 2021 6:47:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4904
[0m2021.03.30 18:47:51 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:47:51 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.30 18:48:03 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:48:05 INFO  time: compiled course-catalog in 1.66s[0m
[0m2021.03.30 18:48:05 INFO  compiling course-catalog (2 scala sources)[0m
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Group.scala in scala.collection.mutable.Buffer[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Group.scala, 210, 210, 224)
[0m2021.03.30 18:49:36 INFO  time: compiled course-catalog in 1m30s[0m
[0m2021.03.30 18:49:38 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:49:39 INFO  time: compiled course-catalog in 1.34s[0m
[0m2021.03.30 18:51:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:51:17 INFO  time: compiled course-catalog in 0.55s[0m
[0m2021.03.30 18:51:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:51:17 INFO  time: compiled course-catalog in 0.13s[0m
Mar 30, 2021 6:51:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5160
[0m2021.03.30 18:51:33 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:51:33 INFO  time: compiled course-catalog in 0.13s[0m
Mar 30, 2021 6:51:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5175
[0m2021.03.30 18:51:36 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:51:36 INFO  time: compiled course-catalog in 0.13s[0m
Mar 30, 2021 6:51:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5180
[0m2021.03.30 18:51:38 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:51:38 INFO  time: compiled course-catalog in 0.14s[0m
[0m2021.03.30 18:51:51 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:51:51 INFO  time: compiled course-catalog in 0.99s[0m
Mar 30, 2021 6:53:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5418
Mar 30, 2021 6:53:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5424
Mar 30, 2021 6:53:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5430
Mar 30, 2021 6:53:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5436
Mar 30, 2021 6:53:51 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5448
[0m2021.03.30 18:54:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:54:55 INFO  time: compiled course-catalog in 1.23s[0m
[0m2021.03.30 18:55:03 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:55:03 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.30 18:55:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:55:46 INFO  time: compiled course-catalog in 0.96s[0m
Mar 30, 2021 6:56:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5698
[0m2021.03.30 18:56:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:56:30 INFO  time: compiled course-catalog in 0.59s[0m
[0m2021.03.30 18:56:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:56:31 INFO  time: compiled course-catalog in 0.54s[0m
Mar 30, 2021 6:56:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5752
[0m2021.03.30 18:57:59 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:57:59 INFO  time: compiled course-catalog in 0.14s[0m
[0m2021.03.30 18:58:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 18:58:05 INFO  time: compiled course-catalog in 0.15s[0m
Mar 30, 2021 6:58:11 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5990
Mar 30, 2021 6:58:28 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 6:58:28 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 30, 2021 6:58:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6026
Mar 30, 2021 6:58:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6136
[0m2021.03.30 18:59:18 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 18:59:18 INFO  time: compiled course-catalog in 0.18s[0m
[0m2021.03.30 19:00:29 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:00:29 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.30 19:00:45 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:00:46 INFO  time: compiled course-catalog in 1.57s[0m
Mar 30, 2021 7:00:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6429
Mar 30, 2021 7:01:08 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6442
[0m2021.03.30 19:02:00 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:02:02 INFO  time: compiled course-catalog in 1.16s[0m
Mar 30, 2021 7:02:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6511
[0m2021.03.30 19:02:41 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:02:42 INFO  time: compiled course-catalog in 1.07s[0m
Mar 30, 2021 7:02:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6615
Mar 30, 2021 7:03:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6631
[0m2021.03.30 19:03:55 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:03:56 INFO  time: compiled course-catalog in 1.04s[0m
Mar 30, 2021 7:04:17 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6672
Mar 30, 2021 7:04:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6683
[0m2021.03.30 19:05:04 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:05:06 INFO  time: compiled course-catalog in 1.43s[0m
Mar 30, 2021 7:09:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6746
[0m2021.03.30 19:09:27 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:09:27 INFO  time: compiled course-catalog in 86ms[0m
[0m2021.03.30 19:09:45 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:09:45 INFO  time: compiled course-catalog in 0.22s[0m
Mar 30, 2021 7:10:20 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 30, 2021 7:10:22 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

[0m2021.03.30 19:11:01 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:11:01 INFO  time: compiled course-catalog in 80ms[0m
[0m2021.03.30 19:11:12 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:11:12 INFO  time: compiled course-catalog in 0.18s[0m
Mar 30, 2021 7:11:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7020
Mar 30, 2021 7:11:26 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 7:11:26 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.30 19:12:08 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:12:08 INFO  time: compiled course-catalog in 0.26s[0m
[0m2021.03.30 19:12:24 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:12:24 INFO  time: compiled course-catalog in 0.26s[0m
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in () => <error>RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 1398, 1404, 1400)
[0m2021.03.30 19:12:35 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:12:35 INFO  time: compiled course-catalog in 0.28s[0m
[0m2021.03.30 19:12:39 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:12:39 INFO  time: compiled course-catalog in 0.23s[0m
Mar 30, 2021 7:12:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7246
Mar 30, 2021 7:13:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7314
Mar 30, 2021 7:14:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7437
Mar 30, 2021 7:15:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7472
Mar 30, 2021 7:15:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7485
Mar 30, 2021 7:15:30 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7494
[0m2021.03.30 19:15:40 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:15:40 INFO  time: compiled course-catalog in 0.24s[0m
[0m2021.03.30 19:15:57 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:15:57 INFO  time: compiled course-catalog in 0.3s[0m
Mar 30, 2021 7:16:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7567
[0m2021.03.30 19:18:05 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:18:05 INFO  time: compiled course-catalog in 0.3s[0m
[0m2021.03.30 19:18:37 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:18:37 INFO  time: compiled course-catalog in 0.29s[0m
[0m2021.03.30 19:20:02 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:20:02 INFO  time: compiled course-catalog in 0.33s[0m
[0m2021.03.30 19:20:21 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:20:21 INFO  time: compiled course-catalog in 0.26s[0m
[0m2021.03.30 19:20:50 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:20:50 INFO  time: compiled course-catalog in 0.33s[0m
Mar 30, 2021 7:21:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8192
[0m2021.03.30 19:21:32 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:21:32 INFO  time: compiled course-catalog in 0.26s[0m
[0m2021.03.30 19:21:49 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:21:51 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 19:21:51 INFO  time: compiled course-catalog in 1.84s[0m
Mar 30, 2021 7:26:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8304
[0m2021.03.30 19:26:26 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:26:28 INFO  time: compiled course-catalog in 1.63s[0m
Mar 30, 2021 7:28:15 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8324
[0m2021.03.30 19:34:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:34:17 INFO  time: compiled course-catalog in 0.26s[0m
Mar 30, 2021 7:34:32 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 30, 2021 7:34:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 30, 2021 7:34:35 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 7:34:35 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 30, 2021 7:34:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8431
Mar 30, 2021 7:34:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8443
[0m2021.03.30 19:35:45 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:35:45 INFO  time: compiled course-catalog in 0.22s[0m
Mar 30, 2021 7:35:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8570
Mar 30, 2021 7:35:58 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 7:35:58 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 30, 2021 7:38:17 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 30, 2021 7:38:17 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.30 19:40:32 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:40:32 INFO  time: compiled course-catalog in 0.32s[0m
[0m2021.03.30 19:40:40 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.30 19:40:42 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 19:40:42 INFO  time: compiled course-catalog in 1.6s[0m
Mar 30, 2021 7:41:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9116
[0m2021.03.30 19:41:57 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:41:59 INFO  time: compiled course-catalog in 1.44s[0m
Mar 30, 2021 7:42:01 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9182
[0m2021.03.30 19:42:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:42:54 INFO  time: compiled course-catalog in 1.51s[0m
[0m2021.03.30 19:44:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:44:40 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 19:44:40 INFO  time: compiled course-catalog in 1.22s[0m
[0m2021.03.30 19:44:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:44:49 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 19:44:49 INFO  time: compiled course-catalog in 1.49s[0m
[0m2021.03.30 19:45:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.30 19:45:41 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.30 19:45:41 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-HUHi3WHZQFWfXI1BqU_4-A==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-HUHi3WHZQFWfXI1BqU_4-A==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.30 19:45:41 INFO  time: compiled course-catalog in 1.21s[0m
[0m2021.03.30 22:49:40 INFO  shutting down Metals[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.31 12:54:12 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.54.3.[0m
[0m2021.03.31 12:54:18 INFO  time: initialize in 5.88s[0m
[0m2021.03.31 12:54:20 INFO  Attempting to connect to the build server...[0m
[0m2021.03.31 12:54:19 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CatalogApp.scala[0m
[0m2021.03.31 12:54:20 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 12:54:21 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 14266'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:14266...
The server is listening for incoming connections at tcp://127.0.0.1:14266...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.31 12:54:25 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 12:54:25 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17008'...
Waiting for the bsp connection to come up...
[0m2021.03.31 12:54:25 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 17909'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17909...
The server is listening for incoming connections at tcp://127.0.0.1:17909...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:17008...
The server is listening for incoming connections at tcp://127.0.0.1:17008...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.31 12:54:31 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
Exception in thread "pool-3-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.$anonfun$onCompilerJobQueue$1(CompilerAccess.scala:195)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:103)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
[0m2021.03.31 12:54:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 12:54:32 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 12:54:32 INFO  time: Connected to build server in 11s[0m
[0m2021.03.31 12:54:32 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.31 12:54:31 INFO  time: Imported build in 0.29s[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1000, 500) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          } //,
          //new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          //new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          //new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }

      content = screen
    }
  }
}

[0m2021.03.31 12:54:37 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1000, 500) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          } //,
          //new Button("View Current Classes"){onAction = (e:ActionEvent)=>{println("classes for sp21");viewCurrent()}},
          //new Button("View Next Semester"){onAction = (e:ActionEvent)=>{println("classes for fl21");viewNext()}},
          //new Button("View All Course Descriptions"){onAction = (e:ActionEvent)=>{println("all courses");viewAllCourses()}}
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }

      content = screen
    }
  }
}

[0m2021.03.31 12:54:38 INFO  time: code lens generation in 17s[0m
[0m2021.03.31 12:54:38 INFO  time: code lens generation in 7.13s[0m
Mar 31, 2021 12:54:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8
Mar 31, 2021 12:54:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13
[0m2021.03.31 12:54:42 INFO  time: indexed workspace in 9.91s[0m
Mar 31, 2021 12:55:13 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 69
Mar 31, 2021 12:55:40 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 121
Mar 31, 2021 12:55:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 138
Mar 31, 2021 12:57:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 458
[0m2021.03.31 12:57:49 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 12:57:50 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 499
[0m2021.03.31 12:57:53 INFO  time: compiled course-catalog in 4.11s[0m
[0m2021.03.31 12:57:56 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 12:57:56 INFO  time: compiled course-catalog in 0.49s[0m
[0m2021.03.31 12:58:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 12:58:39 INFO  time: compiled course-catalog in 0.35s[0m
Mar 31, 2021 12:58:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 573
Mar 31, 2021 12:59:04 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 12:59:05 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 12:59:25 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 12:59:28 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.31 12:59:28 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 12:59:28 INFO  time: compiled course-catalog in 2.92s[0m
Mar 31, 2021 12:59:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 753
Mar 31, 2021 12:59:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 759
Mar 31, 2021 1:00:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 800
[0m2021.03.31 13:00:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:00:04 INFO  time: compiled course-catalog in 2.27s[0m
Mar 31, 2021 1:00:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 904
Mar 31, 2021 1:00:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 906
Mar 31, 2021 1:01:01 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 13:01:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:01:30 INFO  time: compiled course-catalog in 0.22s[0m
[0m2021.03.31 13:02:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:02:39 INFO  time: compiled course-catalog in 96ms[0m
[0m2021.03.31 13:02:50 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:02:50 INFO  time: compiled course-catalog in 0.32s[0m
[0m2021.03.31 13:02:59 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:02:59 INFO  time: compiled course-catalog in 0.29s[0m
[0m2021.03.31 13:03:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:03:07 INFO  time: compiled course-catalog in 2.51s[0m
[0m2021.03.31 13:03:15 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:03:18 INFO  time: compiled course-catalog in 2.67s[0m
[0m2021.03.31 13:03:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:03:37 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.31 13:03:37 INFO  time: compiled course-catalog in 2.64s[0m
[0m2021.03.31 13:05:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:05:19 INFO  time: compiled course-catalog in 1.95s[0m
Mar 31, 2021 1:06:04 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1320
Mar 31, 2021 1:06:27 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 31, 2021 1:07:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1551
[0m2021.03.31 13:07:47 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:07:48 INFO  time: compiled course-catalog in 1.29s[0m
[0m2021.03.31 13:07:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:07:48 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.31 13:07:48 INFO  time: compiled course-catalog in 0.69s[0m
Mar 31, 2021 1:08:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1725
Mar 31, 2021 1:09:01 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:09:04 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:09:05 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:09:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1767
Mar 31, 2021 1:11:19 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1793
Mar 31, 2021 1:12:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1878
[0m2021.03.31 13:12:53 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 1:12:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1961
[0m2021.03.31 13:12:56 INFO  time: compiled course-catalog in 2.39s[0m
[0m2021.03.31 13:14:07 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:14:09 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.31 13:14:09 INFO  time: compiled course-catalog in 2.12s[0m
[0m2021.03.31 13:14:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:14:21 WARN  there was one deprecation warning (since 8.0.60-R10); re-run with -deprecation for details[0m
[0m2021.03.31 13:14:21 INFO  time: compiled course-catalog in 1.95s[0m
Mar 31, 2021 1:15:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2247
[0m2021.03.31 13:16:27 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 1:16:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2291
[0m2021.03.31 13:16:28 INFO  time: compiled course-catalog in 1.32s[0m
Mar 31, 2021 1:16:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2299
[0m2021.03.31 13:16:56 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:16:58 INFO  time: compiled course-catalog in 1.77s[0m
Mar 31, 2021 1:17:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2350
[0m2021.03.31 13:18:21 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:18:21 INFO  time: compiled course-catalog in 0.26s[0m
Mar 31, 2021 1:18:24 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
[0m2021.03.31 13:18:28 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:18:28 INFO  time: compiled course-catalog in 0.23s[0m
[0m2021.03.31 13:18:32 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:18:32 INFO  time: compiled course-catalog in 0.23s[0m
[0m2021.03.31 13:18:52 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:18:52 INFO  time: compiled course-catalog in 0.22s[0m
[0m2021.03.31 13:19:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:19:19 INFO  time: compiled course-catalog in 0.28s[0m
[0m2021.03.31 13:19:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:19:35 INFO  time: compiled course-catalog in 0.25s[0m
[0m2021.03.31 13:19:59 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:19:59 INFO  time: compiled course-catalog in 0.25s[0m
Mar 31, 2021 1:20:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2640
Mar 31, 2021 1:20:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2646
[0m2021.03.31 13:21:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:21:05 INFO  time: compiled course-catalog in 0.22s[0m
[0m2021.03.31 13:21:20 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:21:20 INFO  time: compiled course-catalog in 0.35s[0m
[0m2021.03.31 13:21:27 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:21:27 INFO  time: compiled course-catalog in 0.25s[0m
[0m2021.03.31 13:21:32 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:21:33 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:21:33 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:21:33 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:21:33 INFO  time: compiled course-catalog in 1.32s[0m
[0m2021.03.31 13:21:47 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:21:48 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:21:48 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:21:48 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:21:48 INFO  time: compiled course-catalog in 1.22s[0m
[0m2021.03.31 13:23:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:23:54 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:23:54 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:23:54 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:23:54 INFO  time: compiled course-catalog in 1.72s[0m
[0m2021.03.31 13:23:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:24:00 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:24:00 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:24:00 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:24:00 INFO  time: compiled course-catalog in 1.56s[0m
[0m2021.03.31 13:24:49 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:24:52 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:24:52 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:24:52 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:24:52 INFO  time: compiled course-catalog in 2.73s[0m
[0m2021.03.31 13:25:15 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:25:17 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:25:17 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:25:17 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:25:17 INFO  time: compiled course-catalog in 2s[0m
[0m2021.03.31 13:25:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:25:58 INFO  time: compiled course-catalog in 0.39s[0m
[0m2021.03.31 13:26:09 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:26:09 INFO  time: compiled course-catalog in 0.43s[0m
Mar 31, 2021 1:26:17 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:26:18 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 31, 2021 1:26:19 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 1:26:19 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 13:26:24 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:26:27 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:26:27 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:26:27 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:26:27 INFO  time: compiled course-catalog in 2.23s[0m
[0m2021.03.31 13:29:06 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:29:06 INFO  time: compiled course-catalog in 0.47s[0m
Mar 31, 2021 1:29:11 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3527
[0m2021.03.31 13:29:26 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:29:26 INFO  time: compiled course-catalog in 0.5s[0m
Mar 31, 2021 1:29:33 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 1:29:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 13:29:44 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:29:44 INFO  time: compiled course-catalog in 0.46s[0m
[0m2021.03.31 13:29:53 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:29:53 INFO  time: compiled course-catalog in 0.49s[0m
Mar 31, 2021 1:29:56 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3670
[0m2021.03.31 13:30:01 INFO  compiling course-catalog (2 scala sources)[0m
Mar 31, 2021 1:30:03 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3687
[0m2021.03.31 13:30:04 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:30:04 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:30:04 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:30:04 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 13:30:04 INFO  time: compiled course-catalog in 3.2s[0m
[0m2021.03.31 13:30:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:30:18 INFO  time: compiled course-catalog in 1.99s[0m
[0m2021.03.31 13:31:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:31:36 INFO  time: compiled course-catalog in 1.65s[0m
[0m2021.03.31 13:33:24 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:33:24 INFO  time: compiled course-catalog in 0.35s[0m
Mar 31, 2021 1:33:30 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:33:31 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 31, 2021 1:33:32 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 1:33:32 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 13:34:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:34:53 INFO  time: compiled course-catalog in 0.78s[0m
Mar 31, 2021 1:35:01 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 1:35:01 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 13:35:27 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:35:30 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:35:30 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:35:30 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:35:30 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 13:35:30 INFO  time: compiled course-catalog in 3.03s[0m
[0m2021.03.31 13:36:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:36:32 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:36:32 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:36:32 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:36:32 INFO  time: compiled course-catalog in 2.37s[0m
[0m2021.03.31 13:37:01 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:37:05 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:37:05 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:37:05 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:37:05 INFO  time: compiled course-catalog in 3.21s[0m
[0m2021.03.31 13:39:31 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:39:34 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:39:34 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:39:34 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:39:34 INFO  time: compiled course-catalog in 2.43s[0m
[0m2021.03.31 13:40:12 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:40:14 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:40:14 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:40:14 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:40:14 INFO  time: compiled course-catalog in 2.38s[0m
[0m2021.03.31 13:40:50 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:40:50 INFO  time: compiled course-catalog in 0.48s[0m
[0m2021.03.31 13:41:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:41:02 INFO  time: compiled course-catalog in 0.55s[0m
/*
 * Copyright (c) 2011-2014, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scalafx.scene.control

import javafx.scene.{control => jfxsc}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.BooleanProperty
import scalafx.delegate.SFXDelegate
import scalafx.scene.Node

object Button {
  implicit def sfxButton2jfx(v: Button): jfxsc.Button = if (v != null) v.delegate else null
}

class Button(override val delegate: jfxsc.Button = new jfxsc.Button) extends ButtonBase(delegate) with SFXDelegate[jfxsc.Button] {

  /**
   * Creates a button with the specified text as its label.
   */
  def this(text: String) = this(new jfxsc.Button(text))

  /**
   * Creates a button with the specified text and icon for its label.
   */
  def this(text: String, graphic: Node) = this(new jfxsc.Button(text, graphic))

  /**
   * A Cancel Button is the button that receives a keyboard VK_ESC press, if no other node in the
   * scene consumes it.
   */
  def cancelButton: BooleanProperty = delegate.cancelButtonProperty
  def cancelButton_=(b: Boolean) {
    cancelButton() = b
  }

  /**
   * A default Button is the button that receives a keyboard VK_ENTER press, if no other node in the
   * scene consumes it.
   */
  def defaultButton: BooleanProperty = delegate.defaultButtonProperty
  def defaultButton_=(b: Boolean) {
    defaultButton() = b
  }

}
/*
 * Copyright (c) 2011-2014, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scalafx.scene.control

import javafx.scene.{control => jfxsc}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.BooleanProperty
import scalafx.delegate.SFXDelegate
import scalafx.scene.Node

object Button {
  implicit def sfxButton2jfx(v: Button): jfxsc.Button = if (v != null) v.delegate else null
}

class Button(override val delegate: jfxsc.Button = new jfxsc.Button) extends ButtonBase(delegate) with SFXDelegate[jfxsc.Button] {

  /**
   * Creates a button with the specified text as its label.
   */
  def this(text: String) = this(new jfxsc.Button(text))

  /**
   * Creates a button with the specified text and icon for its label.
   */
  def this(text: String, graphic: Node) = this(new jfxsc.Button(text, graphic))

  /**
   * A Cancel Button is the button that receives a keyboard VK_ESC press, if no other node in the
   * scene consumes it.
   */
  def cancelButton: BooleanProperty = delegate.cancelButtonProperty
  def cancelButton_=(b: Boolean) {
    cancelButton() = b
  }

  /**
   * A default Button is the button that receives a keyboard VK_ENTER press, if no other node in the
   * scene consumes it.
   */
  def defaultButton: BooleanProperty = delegate.defaultButtonProperty
  def defaultButton_=(b: Boolean) {
    defaultButton() = b
  }

}
[0m2021.03.31 13:42:04 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:42:07 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:42:07 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:42:07 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:42:07 INFO  time: compiled course-catalog in 2.15s[0m
[0m2021.03.31 13:42:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:42:42 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:42:42 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:42:42 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:42:42 INFO  time: compiled course-catalog in 1.58s[0m
[0m2021.03.31 13:43:14 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:43:15 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:43:15 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:43:15 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:43:15 INFO  time: compiled course-catalog in 1.57s[0m
[0m2021.03.31 13:44:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:44:03 WARN  there was one deprecation warning (since 2.2.60)[0m
[0m2021.03.31 13:44:03 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:44:03 WARN  there were two deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:44:03 INFO  time: compiled course-catalog in 1.54s[0m
Mar 31, 2021 1:46:26 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:47:48 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 13:47:56 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:47:59 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 13:47:59 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:47:59 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:47:59 INFO  time: compiled course-catalog in 2.94s[0m
[0m2021.03.31 13:48:56 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:48:58 WARN  there were two deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 13:48:58 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:48:58 WARN  there were three deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:48:58 INFO  time: compiled course-catalog in 2.38s[0m
Mar 31, 2021 1:49:59 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:49:59 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

[0m2021.03.31 13:51:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:51:51 INFO  time: compiled course-catalog in 0.56s[0m
[0m2021.03.31 13:52:25 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:52:25 INFO  time: compiled course-catalog in 0.5s[0m
[0m2021.03.31 13:54:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 13:54:51 INFO  time: compiled course-catalog in 0.44s[0m
/*
 * Scala (https://www.scala-lang.org)
 *
 * Copyright EPFL and Lightbend, Inc.
 *
 * Licensed under Apache License 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 *
 * See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 */

package scala

import scala.collection.generic._
import scala.collection.{ mutable, immutable }
import mutable.{ ArrayBuilder, ArraySeq }
import scala.reflect.ClassTag
import scala.runtime.ScalaRunTime.{ array_apply, array_update }

/** Contains a fallback builder for arrays when the element type
 *  does not have a class tag. In that case a generic array is built.
 */
class FallbackArrayBuilding {

  /** A builder factory that generates a generic array.
   *  Called instead of `Array.newBuilder` if the element type of an array
   *  does not have a class tag. Note that fallbackBuilder factory
   *  needs an implicit parameter (otherwise it would not be dominated in
   *  implicit search by `Array.canBuildFrom`). We make sure that
   *  implicit search is always successful.
   */
  implicit def fallbackCanBuildFrom[T](implicit m: DummyImplicit): CanBuildFrom[Array[_], T, ArraySeq[T]] =
    new CanBuildFrom[Array[_], T, ArraySeq[T]] {
      def apply(from: Array[_]) = ArraySeq.newBuilder[T]
      def apply() = ArraySeq.newBuilder[T]
    }
}

/** Utility methods for operating on arrays.
 *  For example:
 *  {{{
 *  val a = Array(1, 2)
 *  val b = Array.ofDim[Int](2)
 *  val c = Array.concat(a, b)
 *  }}}
 *  where the array objects `a`, `b` and `c` have respectively the values
 *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.
 *
 *  @author Martin Odersky
 *  @since  1.0
 */
object Array extends FallbackArrayBuilding {
  val emptyBooleanArray = new Array[Boolean](0)
  val emptyByteArray    = new Array[Byte](0)
  val emptyCharArray    = new Array[Char](0)
  val emptyDoubleArray  = new Array[Double](0)
  val emptyFloatArray   = new Array[Float](0)
  val emptyIntArray     = new Array[Int](0)
  val emptyLongArray    = new Array[Long](0)
  val emptyShortArray   = new Array[Short](0)
  val emptyObjectArray  = new Array[Object](0)

  implicit def canBuildFrom[T](implicit tag: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] = {
    val cls = tag.runtimeClass
    (if (cls.isPrimitive) {
      cls match {
        case java.lang.Integer.TYPE   => cbfIntArray
        case java.lang.Double.TYPE    => cbfDoubleArray
        case java.lang.Long.TYPE      => cbfLongArray
        case java.lang.Float.TYPE     => cbfFloatArray
        case java.lang.Character.TYPE => cbfCharArray
        case java.lang.Byte.TYPE      => cbfByteArray
        case java.lang.Short.TYPE     => cbfShortArray
        case java.lang.Boolean.TYPE   => cbfBooleanArray
        case java.lang.Void.TYPE      => cbfUnitArray
      }
    } else if (cls == ObjectClass) {
      cbfObjectArray
    } else {
      refCBF[T with AnyRef](tag.asInstanceOf[ClassTag[T with AnyRef]])
    }).asInstanceOf[CanBuildFrom[Array[_], T, Array[T]]]
  }
  private[this] val ObjectClass = classOf[Object]

  private[this] val cbfBooleanArray = new CanBuildFrom[Array[_], Boolean, Array[Boolean]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofBoolean()
    def apply() = new ArrayBuilder.ofBoolean()
  }

  private[this] val cbfByteArray    = new CanBuildFrom[Array[_], Byte, Array[Byte]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofByte()
    def apply() = new ArrayBuilder.ofByte()
  }

  private[this] val cbfCharArray    = new CanBuildFrom[Array[_], Char, Array[Char]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofChar()
    def apply() = new ArrayBuilder.ofChar()
  }

  private[this] val cbfDoubleArray  = new CanBuildFrom[Array[_], Double, Array[Double]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofDouble()
    def apply() = new ArrayBuilder.ofDouble()
  }

  private[this] val cbfFloatArray   = new CanBuildFrom[Array[_], Float, Array[Float]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofFloat()
    def apply() = new ArrayBuilder.ofFloat()
  }

  private[this] val cbfIntArray     = new CanBuildFrom[Array[_], Int, Array[Int]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofInt()
    def apply() = new ArrayBuilder.ofInt()
  }

  private[this] val cbfLongArray    = new CanBuildFrom[Array[_], Long, Array[Long]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofLong()
    def apply() = new ArrayBuilder.ofLong()
  }

  private[this] val cbfShortArray   = new CanBuildFrom[Array[_], Short, Array[Short]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofShort()
    def apply() = new ArrayBuilder.ofShort()
  }

  private[this] val cbfUnitArray    = new CanBuildFrom[Array[_], Unit, Array[Unit]] {
    def apply(from: Array[_]) = new ArrayBuilder.ofUnit()
    def apply() = new ArrayBuilder.ofUnit()
  }

  private[this] val cbfObjectArray  = refCBF[Object]
  private[this] def refCBF[T <: AnyRef](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] =
    new CanBuildFrom[Array[_], T, Array[T]] {
      def apply(from: Array[_]) = new ArrayBuilder.ofRef[T]()(t)
      def apply() = new ArrayBuilder.ofRef[T]()(t)
    }

  /**
   * Returns a new [[scala.collection.mutable.ArrayBuilder]].
   */
  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] = ArrayBuilder.make[T]()(t)

  private def slowcopy(src : AnyRef,
                       srcPos : Int,
                       dest : AnyRef,
                       destPos : Int,
                       length : Int) {
    var i = srcPos
    var j = destPos
    val srcUntil = srcPos + length
    while (i < srcUntil) {
      array_update(dest, j, array_apply(src, i))
      i += 1
      j += 1
    }
  }

  /** Copy one array to another.
   *  Equivalent to Java's
   *    `System.arraycopy(src, srcPos, dest, destPos, length)`,
   *  except that this also works for polymorphic and boxed arrays.
   *
   *  Note that the passed-in `dest` array will be modified by this call.
   *
   *  @param src the source array.
   *  @param srcPos  starting position in the source array.
   *  @param dest destination array.
   *  @param destPos starting position in the destination array.
   *  @param length the number of array elements to be copied.
   *
   *  @see `java.lang.System#arraycopy`
   */
  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {
    val srcClass = src.getClass
    if (srcClass.isArray && dest.getClass.isAssignableFrom(srcClass))
      java.lang.System.arraycopy(src, srcPos, dest, destPos, length)
    else
      slowcopy(src, srcPos, dest, destPos, length)
  }

  /** Returns an array of length 0 */
  def empty[T: ClassTag]: Array[T] = new Array[T](0)

  /** Creates an array with given elements.
   *
   *  @param xs the elements to put in the array
   *  @return an array containing all elements from xs.
   */
  // Subject to a compiler optimization in Cleanup.
  // Array(e0, ..., en) is translated to { val a = new Array(3); a(i) = ei; a }
  def apply[T: ClassTag](xs: T*): Array[T] = {
    val array = new Array[T](xs.length)
    var i = 0
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Boolean` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Boolean, xs: Boolean*): Array[Boolean] = {
    val array = new Array[Boolean](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Byte` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Byte, xs: Byte*): Array[Byte] = {
    val array = new Array[Byte](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Short` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Short, xs: Short*): Array[Short] = {
    val array = new Array[Short](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Char` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Char, xs: Char*): Array[Char] = {
    val array = new Array[Char](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Int` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Int, xs: Int*): Array[Int] = {
    val array = new Array[Int](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Long` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Long, xs: Long*): Array[Long] = {
    val array = new Array[Long](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Float` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Float, xs: Float*): Array[Float] = {
    val array = new Array[Float](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Double` objects */
  // Subject to a compiler optimization in Cleanup, see above.
  def apply(x: Double, xs: Double*): Array[Double] = {
    val array = new Array[Double](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates an array of `Unit` objects */
  def apply(x: Unit, xs: Unit*): Array[Unit] = {
    val array = new Array[Unit](xs.length + 1)
    array(0) = x
    var i = 1
    for (x <- xs.iterator) { array(i) = x; i += 1 }
    array
  }

  /** Creates array with given dimensions */
  def ofDim[T: ClassTag](n1: Int): Array[T] =
    new Array[T](n1)
  /** Creates a 2-dimensional array */
  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] = {
    val arr: Array[Array[T]] = (new Array[Array[T]](n1): Array[Array[T]])
    for (i <- 0 until n1) arr(i) = new Array[T](n2)
    arr
    // tabulate(n1)(_ => ofDim[T](n2))
  }
  /** Creates a 3-dimensional array */
  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] =
    tabulate(n1)(_ => ofDim[T](n2, n3))
  /** Creates a 4-dimensional array */
  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] =
    tabulate(n1)(_ => ofDim[T](n2, n3, n4))
  /** Creates a 5-dimensional array */
  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] =
    tabulate(n1)(_ => ofDim[T](n2, n3, n4, n5))

  /** Concatenates all arrays into a single array.
   *
   *  @param xss the given arrays
   *  @return   the array created from concatenating `xss`
   */
  def concat[T: ClassTag](xss: Array[T]*): Array[T] = {
    val b = newBuilder[T]
    b.sizeHint(xss.map(_.length).sum)
    for (xs <- xss) b ++= xs
    b.result()
  }

  /** Returns an array that contains the results of some element computation a number
   *  of times.
   *
   *  Note that this means that `elem` is computed a total of n times:
   *  {{{
   * scala> Array.fill(3){ math.random }
   * res3: Array[Double] = Array(0.365461167592537, 1.550395944913685E-4, 0.7907242137333306)
   *  }}}
   *
   *  @param   n  the number of elements desired
   *  @param   elem the element computation
   *  @return an Array of size n, where each element contains the result of computing
   *  `elem`.
   */
  def fill[T: ClassTag](n: Int)(elem: => T): Array[T] = {
    val b = newBuilder[T]
    b.sizeHint(n)
    var i = 0
    while (i < n) {
      b += elem
      i += 1
    }
    b.result()
  }

  /** Returns a two-dimensional array that contains the results of some element
   *  computation a number of times.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   elem the element computation
   */
  def fill[T: ClassTag](n1: Int, n2: Int)(elem: => T): Array[Array[T]] =
    tabulate(n1)(_ => fill(n2)(elem))

  /** Returns a three-dimensional array that contains the results of some element
   *  computation a number of times.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3nd dimension
   *  @param   elem the element computation
   */
  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: => T): Array[Array[Array[T]]] =
    tabulate(n1)(_ => fill(n2, n3)(elem))

  /** Returns a four-dimensional array that contains the results of some element
   *  computation a number of times.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3nd dimension
   *  @param   n4  the number of elements in the 4th dimension
   *  @param   elem the element computation
   */
  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: => T): Array[Array[Array[Array[T]]]] =
    tabulate(n1)(_ => fill(n2, n3, n4)(elem))

  /** Returns a five-dimensional array that contains the results of some element
   *  computation a number of times.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3nd dimension
   *  @param   n4  the number of elements in the 4th dimension
   *  @param   n5  the number of elements in the 5th dimension
   *  @param   elem the element computation
   */
  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => T): Array[Array[Array[Array[Array[T]]]]] =
    tabulate(n1)(_ => fill(n2, n3, n4, n5)(elem))

  /** Returns an array containing values of a given function over a range of integer
   *  values starting from 0.
   *
   *  @param  n   The number of elements in the array
   *  @param  f   The function computing element values
   *  @return A traversable consisting of elements `f(0),f(1), ..., f(n - 1)`
   */
  def tabulate[T: ClassTag](n: Int)(f: Int => T): Array[T] = {
    val b = newBuilder[T]
    b.sizeHint(n)
    var i = 0
    while (i < n) {
      b += f(i)
      i += 1
    }
    b.result()
  }

  /** Returns a two-dimensional array containing values of a given function
   *  over ranges of integer values starting from `0`.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   f   The function computing element values
   */
  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) => T): Array[Array[T]] =
    tabulate(n1)(i1 => tabulate(n2)(f(i1, _)))

  /** Returns a three-dimensional array containing values of a given function
   *  over ranges of integer values starting from `0`.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3rd dimension
   *  @param   f   The function computing element values
   */
  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => T): Array[Array[Array[T]]] =
    tabulate(n1)(i1 => tabulate(n2, n3)(f(i1, _, _)))

  /** Returns a four-dimensional array containing values of a given function
   *  over ranges of integer values starting from `0`.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3rd dimension
   *  @param   n4  the number of elements in the 4th dimension
   *  @param   f   The function computing element values
   */
  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => T): Array[Array[Array[Array[T]]]] =
    tabulate(n1)(i1 => tabulate(n2, n3, n4)(f(i1, _, _, _)))

  /** Returns a five-dimensional array containing values of a given function
   *  over ranges of integer values starting from `0`.
   *
   *  @param   n1  the number of elements in the 1st dimension
   *  @param   n2  the number of elements in the 2nd dimension
   *  @param   n3  the number of elements in the 3rd dimension
   *  @param   n4  the number of elements in the 4th dimension
   *  @param   n5  the number of elements in the 5th dimension
   *  @param   f   The function computing element values
   */
  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => T): Array[Array[Array[Array[Array[T]]]]] =
    tabulate(n1)(i1 => tabulate(n2, n3, n4, n5)(f(i1, _, _, _, _)))

  /** Returns an array containing a sequence of increasing integers in a range.
   *
   *  @param start  the start value of the array
   *  @param end    the end value of the array, exclusive (in other words, this is the first value '''not''' returned)
   *  @return  the array with values in range `start, start + 1, ..., end - 1`
   *  up to, but excluding, `end`.
   */
  def range(start: Int, end: Int): Array[Int] = range(start, end, 1)

  /** Returns an array containing equally spaced values in some integer interval.
   *
   *  @param start the start value of the array
   *  @param end   the end value of the array, exclusive (in other words, this is the first value '''not''' returned)
   *  @param step  the increment value of the array (may not be zero)
   *  @return      the array with values in `start, start + step, ...` up to, but excluding `end`
   */
  def range(start: Int, end: Int, step: Int): Array[Int] = {
    if (step == 0) throw new IllegalArgumentException("zero step")
    val b = newBuilder[Int]
    b.sizeHint(immutable.Range.count(start, end, step, isInclusive = false))

    var i = start
    while (if (step < 0) end < i else i < end) {
      b += i
      i += step
    }
    b.result()
  }

  /** Returns an array containing repeated applications of a function to a start value.
   *
   *  @param start the start value of the array
   *  @param len   the number of elements returned by the array
   *  @param f     the function that is repeatedly applied
   *  @return      the array returning `len` values in the sequence `start, f(start), f(f(start)), ...`
   */
  def iterate[T: ClassTag](start: T, len: Int)(f: T => T): Array[T] = {
    val b = newBuilder[T]

    if (len > 0) {
      b.sizeHint(len)
      var acc = start
      var i = 1
      b += acc

      while (i < len) {
        acc = f(acc)
        i += 1
        b += acc
      }
    }
    b.result()
  }

  /** Called in a pattern match like `{ case Array(x,y,z) => println('3 elements')}`.
   *
   *  @param x the selector value
   *  @return  sequence wrapped in a [[scala.Some]], if `x` is a Seq, otherwise `None`
   */
  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] =
    if (x == null) None else Some(x.toIndexedSeq)
    // !!! the null check should to be necessary, but without it 2241 fails. Seems to be a bug
    // in pattern matcher.  @PP: I noted in #4364 I think the behavior is correct.
}

/** Arrays are mutable, indexed collections of values. `Array[T]` is Scala's representation
 *  for Java's `T[]`.
 *
 *  {{{
 *  val numbers = Array(1, 2, 3, 4)
 *  val first = numbers(0) // read the first element
 *  numbers(3) = 100 // replace the 4th array element with 100
 *  val biggerNumbers = numbers.map(_ * 2) // multiply all numbers by two
 *  }}}
 *
 *  Arrays make use of two common pieces of Scala syntactic sugar, shown on lines 2 and 3 of the above
 *  example code.
 *  Line 2 is translated into a call to `apply(Int)`, while line 3 is translated into a call to
 *  `update(Int, T)`.
 *
 *  Two implicit conversions exist in [[scala.Predef]] that are frequently applied to arrays: a conversion
 *  to [[scala.collection.mutable.ArrayOps]] (shown on line 4 of the example above) and a conversion
 *  to [[scala.collection.mutable.WrappedArray]] (a subtype of [[scala.collection.Seq]]).
 *  Both types make available many of the standard operations found in the Scala collections API.
 *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,
 *  while the conversion to `WrappedArray` is permanent as all operations return a `WrappedArray`.
 *
 *  The conversion to `ArrayOps` takes priority over the conversion to `WrappedArray`. For instance,
 *  consider the following code:
 *
 *  {{{
 *  val arr = Array(1, 2, 3)
 *  val arrReversed = arr.reverse
 *  val seqReversed : Seq[Int] = arr.reverse
 *  }}}
 *
 *  Value `arrReversed` will be of type `Array[Int]`, with an implicit conversion to `ArrayOps` occurring
 *  to perform the `reverse` operation. The value of `seqReversed`, on the other hand, will be computed
 *  by converting to `WrappedArray` first and invoking the variant of `reverse` that returns another
 *  `WrappedArray`.
 *
 *  @author Martin Odersky
 *  @since  1.0
 *  @see [[http://www.scala-lang.org/files/archive/spec/2.12/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)
 *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html "Scala 2.8 Arrays"]] the Scala Improvement Document detailing arrays since Scala 2.8.
 *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html "The Scala 2.8 Collections' API"]] section on `Array` by Martin Odersky for more information.
 *  @hideImplicitConversion scala.Predef.booleanArrayOps
 *  @hideImplicitConversion scala.Predef.byteArrayOps
 *  @hideImplicitConversion scala.Predef.charArrayOps
 *  @hideImplicitConversion scala.Predef.doubleArrayOps
 *  @hideImplicitConversion scala.Predef.floatArrayOps
 *  @hideImplicitConversion scala.Predef.intArrayOps
 *  @hideImplicitConversion scala.Predef.longArrayOps
 *  @hideImplicitConversion scala.Predef.refArrayOps
 *  @hideImplicitConversion scala.Predef.shortArrayOps
 *  @hideImplicitConversion scala.Predef.unitArrayOps
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapRefArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapLongArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapFloatArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapCharArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapBooleanArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.wrapUnitArray
 *  @hideImplicitConversion scala.LowPriorityImplicits.genericWrapArray
 *  @define coll array
 *  @define Coll `Array`
 *  @define orderDependent
 *  @define orderDependentFold
 *  @define mayNotTerminateInf
 *  @define willNotTerminateInf
 *  @define collectExample
 *  @define undefinedorder
 *  @define thatinfo the class of the returned collection. In the standard library configuration,
 *    `That` is either `Array[B]` if an ClassTag is available for B or `ArraySeq[B]` otherwise.
 *  @define zipthatinfo $thatinfo
 *  @define bfinfo an implicit value of class `CanBuildFrom` which determines the result class `That` from the current
 *    representation type `Repr` and the new element type `B`.
 */
final class Array[T](_length: Int) extends java.io.Serializable with java.lang.Cloneable {

  /** The length of the array */
  def length: Int = throw new Error()

  /** The element at given index.
   *
   *  Indices start at `0`; `xs.apply(0)` is the first element of array `xs`.
   *  Note the indexing syntax `xs(i)` is a shorthand for `xs.apply(i)`.
   *
   *  @param    i   the index
   *  @return       the element at the given index
   *  @throws       ArrayIndexOutOfBoundsException if `i < 0` or `length <= i`
   */
  def apply(i: Int): T = throw new Error()

  /** Update the element at given index.
   *
   *  Indices start at `0`; `xs.update(i, x)` replaces the i^th^ element in the array.
   *  Note the syntax `xs(i) = x` is a shorthand for `xs.update(i, x)`.
   *
   *  @param    i   the index
   *  @param    x   the value to be written at index `i`
   *  @throws       ArrayIndexOutOfBoundsException if `i < 0` or `length <= i`
   */
  def update(i: Int, x: T) { throw new Error() }

  /** Clone the Array.
   *
   *  @return A clone of the Array.
   */
  override def clone(): Array[T] = throw new Error()
}

[0m2021.03.31 13:55:12 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:55:14 INFO  time: compiled course-catalog in 1.09s[0m
[0m2021.03.31 13:55:19 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:55:19 INFO  time: compiled course-catalog in 0.45s[0m
Mar 31, 2021 1:55:51 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 1:55:52 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 31, 2021 1:55:54 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

/*
 * Copyright (c) 2011-2014, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scalafx.scene.control

import javafx.scene.{control => jfxsc}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.BooleanProperty
import scalafx.delegate.SFXDelegate
import scalafx.scene.Node

object Button {
  implicit def sfxButton2jfx(v: Button): jfxsc.Button = if (v != null) v.delegate else null
}

class Button(override val delegate: jfxsc.Button = new jfxsc.Button) extends ButtonBase(delegate) with SFXDelegate[jfxsc.Button] {

  /**
   * Creates a button with the specified text as its label.
   */
  def this(text: String) = this(new jfxsc.Button(text))

  /**
   * Creates a button with the specified text and icon for its label.
   */
  def this(text: String, graphic: Node) = this(new jfxsc.Button(text, graphic))

  /**
   * A Cancel Button is the button that receives a keyboard VK_ESC press, if no other node in the
   * scene consumes it.
   */
  def cancelButton: BooleanProperty = delegate.cancelButtonProperty
  def cancelButton_=(b: Boolean) {
    cancelButton() = b
  }

  /**
   * A default Button is the button that receives a keyboard VK_ENTER press, if no other node in the
   * scene consumes it.
   */
  def defaultButton: BooleanProperty = delegate.defaultButtonProperty
  def defaultButton_=(b: Boolean) {
    defaultButton() = b
  }

}
/*
 * Copyright (c) 2011-2014, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package scalafx.scene.control

import javafx.scene.{control => jfxsc}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.BooleanProperty
import scalafx.delegate.SFXDelegate
import scalafx.scene.Node

object Button {
  implicit def sfxButton2jfx(v: Button): jfxsc.Button = if (v != null) v.delegate else null
}

class Button(override val delegate: jfxsc.Button = new jfxsc.Button) extends ButtonBase(delegate) with SFXDelegate[jfxsc.Button] {

  /**
   * Creates a button with the specified text as its label.
   */
  def this(text: String) = this(new jfxsc.Button(text))

  /**
   * Creates a button with the specified text and icon for its label.
   */
  def this(text: String, graphic: Node) = this(new jfxsc.Button(text, graphic))

  /**
   * A Cancel Button is the button that receives a keyboard VK_ESC press, if no other node in the
   * scene consumes it.
   */
  def cancelButton: BooleanProperty = delegate.cancelButtonProperty
  def cancelButton_=(b: Boolean) {
    cancelButton() = b
  }

  /**
   * A default Button is the button that receives a keyboard VK_ENTER press, if no other node in the
   * scene consumes it.
   */
  def defaultButton: BooleanProperty = delegate.defaultButtonProperty
  def defaultButton_=(b: Boolean) {
    defaultButton() = b
  }

}
[0m2021.03.31 13:57:12 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:57:12 INFO  time: compiled course-catalog in 0.14s[0m
[0m2021.03.31 13:57:25 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:57:25 INFO  time: compiled course-catalog in 0.54s[0m
[0m2021.03.31 13:58:06 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:58:06 INFO  time: compiled course-catalog in 0.55s[0m
/*
 * Copyright (c) 2011-2015, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package scalafx.scene

import javafx.scene.{input => jfxsi, layout => jfxsl, paint => jfxsp}
import javafx.{collections => jfxc, event => jfxe, geometry => jfxg, scene => jfxs, util => jfxu}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.{ObjectProperty, ReadOnlyDoubleProperty, ReadOnlyObjectProperty}
import scalafx.collections._
import scalafx.delegate.SFXDelegate
import scalafx.geometry.NodeOrientation
import scalafx.scene.image.WritableImage
import scalafx.scene.input.{Dragboard, Mnemonic, TransferMode}
import scalafx.scene.paint.Paint

object Scene {
  implicit def sfxScene2jfx(v: Scene): jfxs.Scene = if (v != null) v.delegate else null
}

/**
 * Wraps [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Scene.html]].
 *
 * @constructor Create a new ScalaFX Scene with JavaFX Scene as delegate.
 * @param delegate JavaFX Scene delegated. Its default value is a JavaFX Scene with a
 *                 [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Group.html Group]] as root Node.
 */
class Scene(override val delegate: jfxs.Scene = new jfxs.Scene(new jfxs.Group()))
  extends SFXDelegate[jfxs.Scene] {

  /**
   * Creates a Scene with a [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Group.html Group]] as root Node with a
   * specific size.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   */
  def this(width: Double, height: Double) = this(new jfxs.Scene(new jfxs.Group(), width, height))

  /**
   * Creates a Scene for a specific root Node.
   *
   * @param parent The root node of the scene graph
   */
  def this(parent: Parent) = this(new jfxs.Scene(parent))

  /**
   * Creates a Scene for a specific root Node with a specific size.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   */
  def this(parent: Parent, width: Double, height: Double) = this(new jfxs.Scene(parent, width, height))

  /**
   * Constructs a scene consisting of a root, with a dimension of width and height,
   * and specifies whether a depth buffer is created for this scene.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   */
  def this(parent: Parent, width: Double, height: Double, depthBuffer: Boolean) =
    this(new jfxs.Scene(parent, width, height, depthBuffer))

  /**
   * Creates a Scene with a `Group` as parent, with a dimension of width and height,
   * and specifies whether a depth buffer is created for this scene.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   */
  def this(width: Double, height: Double, depthBuffer: Boolean) =
    this(new jfxs.Scene(new jfxs.Group(), width, height, depthBuffer))

  /**
   * Constructs a scene consisting of a root, with a dimension of width and height,
   * specifies whether a depth buffer is created for this scene and specifies
   * the required scene anti-aliasing.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   * @param antiAliasing The required scene anti-aliasing.
   */
  def this(parent: Parent, width: Double, height: Double, depthBuffer: Boolean, antiAliasing: SceneAntialiasing) =
    this(new jfxs.Scene(parent, width, height, depthBuffer, antiAliasing))

  /**
   * Creates a Scene with a `Group` as parent, with a dimension of width and height,
   * specifies whether a depth buffer is created for this scene and specifies
   * the required scene anti-aliasing.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   * @param antiAliasing The required scene anti-aliasing.
   */
  def this(width: Double, height: Double, depthBuffer: Boolean, antiAliasing: SceneAntialiasing) =
    this(new jfxs.Scene(new jfxs.Group(), width, height, depthBuffer, antiAliasing))

  /**
   * Creates a Scene for a specific root Node with a specific size and fill.
   * @param parent  The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param fill The fill
   */
  def this(parent: Parent, width: Double, height: Double, fill: Paint) =
    this(new jfxs.Scene(parent, width, height, fill))

  /**
   * Creates a Scene for a specific root Node with a fill.
   * @param parent  The root node of the scene graph
   * @param fill The fill
   */
  def this(parent: Parent, fill: Paint) = this(new jfxs.Scene(parent, fill))

  /**
   * Returns the root Node of the scene graph
   */
  def root: ObjectProperty[jfxs.Parent] = delegate.rootProperty

  /**
   * Sets the root Node of the scene graph
   */
  def root_=(v: Parent) {
    root() = v
  }

  /**
   * Returns Nodes children from this Scene's `root`.
   */
  def getChildren = root.value match {
    case group: jfxs.Group => group.getChildren
    case pane: jfxsl.Pane  => pane.getChildren
    case _                 => throw new IllegalStateException("Cannot access children of root: " + root + "\n" +
      "Use a class that extends Group or Pane, or override the getChildren method.")
  }

  /**
   * Returns scene's antialiasing setting.
   */
  def antialiasing: SceneAntialiasing = delegate.getAntiAliasing

  /**
   * Returns Content's Node children from this Scene's `root`.
   */
  def content: jfxc.ObservableList[jfxs.Node] = getChildren

  /**
   * Sets the list of Nodes children from this Scene's `root`, replacing the prior content. If you want append to
   * current content, use `add` or similar.
   *
   * @param c list of Nodes children from this Scene's `root` to replace prior content.
   */
  def content_=(c: Iterable[Node]) {
    fillSFXCollection(this.content, c)
  }

  /**
   * Sets a Node child, replacing the prior content. If you want append to current content, use `add` or similar.
   *
   * @param n Node child to replace prior content.
   */
  def content_=(n: Node) {
    fillSFXCollectionWithOne(this.content, n)
  }

  /**
   * Specifies the type of camera use for rendering this `Scene`.
   */
  def camera: ObjectProperty[jfxs.Camera] = delegate.cameraProperty
  def camera_=(v: Camera) {
    camera() = v
  }

  /**
   * Defines the mouse cursor for this `Scene`.
   */
  def cursor: ObjectProperty[jfxs.Cursor] = delegate.cursorProperty
  def cursor_=(v: Cursor) {
    cursor() = v
  }

  /** The effective node orientation of a scene resolves the inheritance of node orientation, returning either left-to-right or right-to-left.  */
  def effectiveNodeOrientation: ReadOnlyObjectProperty[jfxg.NodeOrientation] = delegate.effectiveNodeOrientationProperty

  /**
   * Specifies the event dispatcher for this scene.
   */
  def eventDispatcher: ObjectProperty[jfxe.EventDispatcher] = delegate.eventDispatcherProperty
  def eventDispatcher_=(v: jfxe.EventDispatcher) {
    eventDispatcher() = v
  }

  /**
   * Defines the background fill of this Scene.
   */
  def fill: ObjectProperty[jfxsp.Paint] = delegate.fillProperty
  def fill_=(v: Paint) {
    fill() = v
  }

  /**
   * The height of this Scene
   */
  def height: ReadOnlyDoubleProperty = delegate.heightProperty

  /**
   * The width of this Scene
   */
  def width: ReadOnlyDoubleProperty = delegate.widthProperty

  def nodeOrientation: ObjectProperty[jfxg.NodeOrientation] = delegate.nodeOrientationProperty
  def nodeOrientation_=(v: NodeOrientation) {
    ObjectProperty.fillProperty[jfxg.NodeOrientation](this.nodeOrientation, v)
  }

  /**
   * Defines a function to be called when a mouse button has been clicked (pressed and released) on this `Scene`.
   */
  def onContextMenuRequested = delegate.onContextMenuRequestedProperty
  def onContextMenuRequested_=(v: jfxe.EventHandler[_ >: jfxsi.ContextMenuEvent]) {
    onContextMenuRequested() = v
  }

  /**
   * Defines a function to be called when drag gesture has been detected.
   */
  def onDragDetected = delegate.onDragDetectedProperty
  def onDragDetected_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onDragDetected() = v
  }

  /**
   * Defines a function to be called when this `Scene` is a drag and drop gesture source after its data has been
   * dropped on a drop target.
   */
  def onDragDone = delegate.onDragDoneProperty
  def onDragDone_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragDone() = v
  }

  /**
   * Defines a function to be called when the mouse button is released on this `Scene` during drag and drop gesture.
   */
  def onDragDropped = delegate.onDragDroppedProperty
  def onDragDropped_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragDropped() = v
  }

  /**
   * Defines a function to be called when drag gesture enters this Scene.
   */
  def onDragEntered = delegate.onDragEnteredProperty
  def onDragEntered_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragEntered() = v
  }

  /**
   * Defines a function to be called when drag gesture exits this Scene.
   */
  def onDragExited = delegate.onDragExitedProperty
  def onDragExited_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragExited() = v
  }

  /**
   * Defines a function to be called when drag gesture progresses within this `Scene`.
   */
  def onDragOver = delegate.onDragOverProperty
  def onDragOver_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragOver() = v
  }

  /**
   * Defines a function to be called when this `Node` has input focus and the input method text has changed.
   */
  def onInputMethodTextChanged = delegate.onInputMethodTextChangedProperty
  def onInputMethodTextChanged_=(v: jfxe.EventHandler[_ >: jfxsi.InputMethodEvent]) {
    onInputMethodTextChanged() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been pressed.
   */
  def onKeyPressed = delegate.onKeyPressedProperty
  def onKeyPressed_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyPressed() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been released.
   */
  def onKeyReleased = delegate.onKeyReleasedProperty
  def onKeyReleased_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyReleased() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been typed.
   */
  def onKeyTyped = delegate.onKeyTypedProperty
  def onKeyTyped_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyTyped() = v
  }

  /**
   * Defines a function to be called when a mouse button has been clicked (pressed and released) on this `Scene`.
   */
  def onMouseClicked = delegate.onMouseClickedProperty
  def onMouseClicked_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseClicked() = v
  }

  /**
   * Defines a function to be called when a mouse button is pressed on this `Scene` and then dragged.
   */
  def onMouseDragged = delegate.onMouseDraggedProperty
  def onMouseDragged_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseDragged() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture enters this `Scene`.
   */
  def onMouseDragEntered = delegate.onMouseDragEnteredProperty
  def onMouseDragEntered_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragEntered() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture exits this `Scene`.
   */
  def onMouseDragExited = delegate.onMouseDragExitedProperty
  def onMouseDragExited_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragExited() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture progresses within this `Scene`.
   */
  def onMouseDragOver = delegate.onMouseDragOverProperty
  def onMouseDragOver_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragOver() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture ends within this `Scene`.
   */
  def onMouseDragReleased = delegate.onMouseDragReleasedProperty
  def onMouseDragReleased_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragReleased() = v
  }

  /**
   * Defines a function to be called when the mouse enters this `Scene`.
   */
  def onMouseEntered = delegate.onMouseEnteredProperty
  def onMouseEntered_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseEntered() = v
  }

  /**
   * Defines a function to be called when the mouse exits this `Scene`.
   */
  def onMouseExited = delegate.onMouseExitedProperty
  def onMouseExited_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseExited() = v
  }

  /**
   * Defines a function to be called when mouse cursor moves within this `Scene` but no buttons have been pushed.
   */
  def onMouseMoved = delegate.onMouseMovedProperty
  def onMouseMoved_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseMoved() = v
  }

  /**
   * Defines a function to be called when a mouse button has been pressed on this `Scene`.
   */
  def onMousePressed = delegate.onMousePressedProperty
  def onMousePressed_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMousePressed() = v
  }

  /**
   * Defines a function to be called when a mouse button has been released on this `Scene`.
   */
  def onMouseReleased = delegate.onMouseReleasedProperty
  def onMouseReleased_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseReleased() = v
  }

  /**
   * Defines a function to be called when user performs a scrolling action.
   */
  def onScroll = delegate.onScrollProperty
  def onScroll_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScroll() = v
  }

  /**
   * The URL of the user-agent stylesheet that will be used by this Scene in place of the the platform-default
   * user-agent stylesheet. If the URL does not resolve to a valid location, the platform-default user-agent
   * stylesheet will be used.
   *
   * For additional information about using CSS with the scene graph, see the
   * [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html CSS Reference Guide]].
   *
   * @return The URL of the user-agent stylesheet that will be used by this SubScene, or null if has not been set.
   */
  def userAgentStylesheet: ObjectProperty[String] = delegate.userAgentStylesheetProperty
  /**
   * Set the URL of the user-agent stylesheet that will be used by this Scene in place of the the platform-default
   * user-agent stylesheet. If the URL does not resolve to a valid location, the platform-default user-agent
   * stylesheet will be used.
   *
   * For additional information about using CSS with the scene graph, see the
   * [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html CSS Reference Guide]].
   *
   * @param url  The URL is a hierarchical URI of the form `[scheme:][//authority][path]`.
   *             If the URL does not have a `[scheme:]` component, the URL is considered to be the `[path]`
   *             component only. Any leading '/' character of the `[path]` is ignored and the `[path]` is
   *             treated as a path relative to the root of the application's classpath.
   */
  def userAgentStylesheet_=(url: String) {
    ObjectProperty.fillProperty[String](userAgentStylesheet, url)
  }

  /**
   * The `Window` for this Scene
   */
  def window: ReadOnlyObjectProperty[javafx.stage.Window] = delegate.windowProperty

  /**
   * The horizontal location of this `Scene` on the `Window`.
   */
  def x: ReadOnlyDoubleProperty = delegate.xProperty

  /**
   * The vertical location of this `Scene` on the `Window`.
   */
  def y: ReadOnlyDoubleProperty = delegate.yProperty

  /**
   * Retrieves the depth buffer attribute for this scene.
   */
  def depthBuffer = delegate.isDepthBuffer

  /**
   * Gets an observable list of string URLs linking to the stylesheets to use with this Parent's contents.
   */
  def stylesheets: jfxc.ObservableList[String] = delegate.getStylesheets

  /**
   * Sets the list of stylesheets URLs, replacing the prior content. If you want append to current content, use `add` or
   * similar.
   *
   * @param c list of stylesheets URLs to replace prior content.
   */
  def stylesheets_=(c: Iterable[String]) {
    fillCollection(stylesheets, c)
  }

  /**
   * Looks for any node within the scene graph based on the specified CSS selector.
   *
   * @param selector The css selector to look up
   * @return A [[scala.Some]] containing the Node in the scene which matches the CSS selector, or [[scala.None]]
   *         if none is found.
   */
  def lookup(selector: String): Option[Node] = Option(delegate.lookup(selector))

  /**
   * Registers the specified mnemonic.
   *
   * @param m The Mnemonic
   */
  def addMnemonic(m: Mnemonic) {
    delegate.addMnemonic(m)
  }

  /**
   * Unregisters the specified mnemonic.
   *
   * @param m The Mnemonic to be removed.
   */
  def removeMnemonic(m: Mnemonic) {
    delegate.removeMnemonic(m)
  }

  /**
   * Gets the list of mnemonics for this `Scene`.
   */
  def getMnemonics: jfxc.ObservableMap[jfxsi.KeyCombination, jfxc.ObservableList[jfxsi.Mnemonic]] = delegate.getMnemonics

  /**
   * Gets the list of accelerators for this Scene.
   */
  def accelerators: jfxc.ObservableMap[jfxsi.KeyCombination, Runnable] = delegate.getAccelerators

  /**
   * Confirms a potential drag and drop gesture that is recognized over this `Scene`.
   *
   * @param  transferModes The supported `TransferMode`(s) of this `Node`
   * @return A `Dragboard` to place this `Scene`'s data on
   */
  def startDragAndDrop(transferModes: TransferMode*): Dragboard =
    delegate.startDragAndDrop(transferModes.map(_.delegate): _*)

  /**
   * Starts a full press-drag-release gesture with this scene as gesture source.
   */
  def startFullDrag() {
    delegate.startFullDrag()
  }

  /**
   * The scene's current focus owner node. This node's "focused" variable might be false if this scene has no window,
   * or if the window is inactive (window.focused == false).
   *
   * @since 2.2
   */
  def focusOwner: ReadOnlyObjectProperty[jfxs.Node] = delegate.focusOwnerProperty()

  /**
   * Defines a function to be called when user performs a rotation action.
   *
   * @since 2.2
   */
  def onRotate = delegate.onRotateProperty
  def onRotate_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotate() = v
  }

  /**
   * Defines a function to be called when a rotation gesture ends.
   *
   * @since 2.2
   */
  def onRotationFinished = delegate.onRotationFinishedProperty()
  def onRotationFinished_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotationFinished() = v
  }

  /**
   * Defines a function to be called when a rotation gesture starts.
   *
   * @since 2.2
   */
  def onRotationStarted = delegate.onRotationFinishedProperty()
  def onRotationStarted_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotationStarted() = v
  }

  /**
   * Defines a function to be called when a Scroll gesture ends.
   *
   * @since 2.2
   */
  def onScrollFinished = delegate.onScrollFinishedProperty()
  def onScrollFinished_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScrollFinished() = v
  }

  /**
   * Defines a function to be called when a Scroll gesture starts.
   *
   * @since 2.2
   */
  def onScrollStarted = delegate.onScrollStartedProperty()
  def onScrollStarted_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScrollStarted() = v
  }

  /**
   * Defines a function to be called when a Swipe Down gesture starts.
   *
   * @since 2.2
   */
  def onSwipeDown = delegate.onSwipeDownProperty()
  def onSwipeDown_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeDown() = v
  }

  /**
   * Defines a function to be called when a Swipe Down gesture starts.
   *
   * @since 2.2
   */
  def onSwipeLeft = delegate.onSwipeLeftProperty()
  def onSwipeLeft_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeLeft() = v
  }

  /**
   * Defines a function to be called when a Swipe Up gesture starts.
   *
   * @since 2.2
   */
  def onSwipeUp = delegate.onSwipeUpProperty()
  def onSwipeUp_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeUp() = v
  }

  /**
   * Defines a function to be called when a Swipe Right gesture starts.
   *
   * @since 2.2
   */
  def onSwipeRight = delegate.onSwipeRightProperty()
  def onSwipeRight_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeRight() = v
  }

  /**
   * Defines a function to be called when user performs a Touch action.
   *
   * @since 2.2
   */
  def onZoom = delegate.onZoomProperty()
  def onZoom_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoom() = v
  }

  /**
   * Defines a function to be called when a Zoom gesture ends.
   *
   * @since 2.2
   */
  def onZoomFinished = delegate.onZoomFinishedProperty()
  def onZoomFinished_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoomFinished() = v
  }

  /**
   * Defines a function to be called when a Zoom gesture starts.
   *
   * @since 2.2
   */
  def onZoomStarted = delegate.onZoomStartedProperty()
  def onZoomStarted_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoomStarted() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Moved action.
   *
   * @since 2.2
   */
  def onTouchMoved = delegate.onTouchMovedProperty()
  def onTouchMoved_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchMoved() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Pressed action.
   *
   * @since 2.2
   */
  def onTouchPressed = delegate.onTouchPressedProperty()
  def onTouchPressed_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchPressed() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Released action.
   *
   * @since 2.2
   */
  def onTouchReleased = delegate.onTouchReleasedProperty()
  def onTouchReleased_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchReleased() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Stationary action.
   *
   * @since 2.2
   */
  def onTouchStationary = delegate.onTouchStationaryProperty()
  def onTouchStationary_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchStationary() = v
  }

  /**
   * Takes a snapshot of this scene and returns the rendered image when it is ready.
   *
   * @param image The writable image that will be used to hold the rendered scene.
   * @return the rendered image
   *
   * @since 2.2
   */
  def snapshot(image: WritableImage): WritableImage = delegate.snapshot(image)

  /**
   * Takes a snapshot of this scene at the next frame and calls the specified callback method when the image is ready.
   *
   * @param callback A function to be called  when the image is ready.
   * @param image The writable image that will be used to hold the rendered scene.
   *
   * @since 2.2
   */
  def snapshot(callback: SnapshotResult => Unit, image: WritableImage) {
    val javaCallback = new jfxu.Callback[jfxs.SnapshotResult, java.lang.Void] {
      def call(result: jfxs.SnapshotResult): java.lang.Void = {
        callback(new SnapshotResult(result))
        null
      }
    }
    delegate.snapshot(javaCallback, image)
  }

}
/*
 * Copyright (c) 2011-2015, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package scalafx.scene

import javafx.scene.{input => jfxsi, layout => jfxsl, paint => jfxsp}
import javafx.{collections => jfxc, event => jfxe, geometry => jfxg, scene => jfxs, util => jfxu}

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.beans.property.{ObjectProperty, ReadOnlyDoubleProperty, ReadOnlyObjectProperty}
import scalafx.collections._
import scalafx.delegate.SFXDelegate
import scalafx.geometry.NodeOrientation
import scalafx.scene.image.WritableImage
import scalafx.scene.input.{Dragboard, Mnemonic, TransferMode}
import scalafx.scene.paint.Paint

object Scene {
  implicit def sfxScene2jfx(v: Scene): jfxs.Scene = if (v != null) v.delegate else null
}

/**
 * Wraps [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Scene.html]].
 *
 * @constructor Create a new ScalaFX Scene with JavaFX Scene as delegate.
 * @param delegate JavaFX Scene delegated. Its default value is a JavaFX Scene with a
 *                 [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Group.html Group]] as root Node.
 */
class Scene(override val delegate: jfxs.Scene = new jfxs.Scene(new jfxs.Group()))
  extends SFXDelegate[jfxs.Scene] {

  /**
   * Creates a Scene with a [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/Group.html Group]] as root Node with a
   * specific size.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   */
  def this(width: Double, height: Double) = this(new jfxs.Scene(new jfxs.Group(), width, height))

  /**
   * Creates a Scene for a specific root Node.
   *
   * @param parent The root node of the scene graph
   */
  def this(parent: Parent) = this(new jfxs.Scene(parent))

  /**
   * Creates a Scene for a specific root Node with a specific size.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   */
  def this(parent: Parent, width: Double, height: Double) = this(new jfxs.Scene(parent, width, height))

  /**
   * Constructs a scene consisting of a root, with a dimension of width and height,
   * and specifies whether a depth buffer is created for this scene.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   */
  def this(parent: Parent, width: Double, height: Double, depthBuffer: Boolean) =
    this(new jfxs.Scene(parent, width, height, depthBuffer))

  /**
   * Creates a Scene with a `Group` as parent, with a dimension of width and height,
   * and specifies whether a depth buffer is created for this scene.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   */
  def this(width: Double, height: Double, depthBuffer: Boolean) =
    this(new jfxs.Scene(new jfxs.Group(), width, height, depthBuffer))

  /**
   * Constructs a scene consisting of a root, with a dimension of width and height,
   * specifies whether a depth buffer is created for this scene and specifies
   * the required scene anti-aliasing.
   *
   * @param parent The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   * @param antiAliasing The required scene anti-aliasing.
   */
  def this(parent: Parent, width: Double, height: Double, depthBuffer: Boolean, antiAliasing: SceneAntialiasing) =
    this(new jfxs.Scene(parent, width, height, depthBuffer, antiAliasing))

  /**
   * Creates a Scene with a `Group` as parent, with a dimension of width and height,
   * specifies whether a depth buffer is created for this scene and specifies
   * the required scene anti-aliasing.
   *
   * @param width The width of the scene
   * @param height The height of the scene
   * @param depthBuffer The depth buffer flag
   * @param antiAliasing The required scene anti-aliasing.
   */
  def this(width: Double, height: Double, depthBuffer: Boolean, antiAliasing: SceneAntialiasing) =
    this(new jfxs.Scene(new jfxs.Group(), width, height, depthBuffer, antiAliasing))

  /**
   * Creates a Scene for a specific root Node with a specific size and fill.
   * @param parent  The root node of the scene graph
   * @param width The width of the scene
   * @param height The height of the scene
   * @param fill The fill
   */
  def this(parent: Parent, width: Double, height: Double, fill: Paint) =
    this(new jfxs.Scene(parent, width, height, fill))

  /**
   * Creates a Scene for a specific root Node with a fill.
   * @param parent  The root node of the scene graph
   * @param fill The fill
   */
  def this(parent: Parent, fill: Paint) = this(new jfxs.Scene(parent, fill))

  /**
   * Returns the root Node of the scene graph
   */
  def root: ObjectProperty[jfxs.Parent] = delegate.rootProperty

  /**
   * Sets the root Node of the scene graph
   */
  def root_=(v: Parent) {
    root() = v
  }

  /**
   * Returns Nodes children from this Scene's `root`.
   */
  def getChildren = root.value match {
    case group: jfxs.Group => group.getChildren
    case pane: jfxsl.Pane  => pane.getChildren
    case _                 => throw new IllegalStateException("Cannot access children of root: " + root + "\n" +
      "Use a class that extends Group or Pane, or override the getChildren method.")
  }

  /**
   * Returns scene's antialiasing setting.
   */
  def antialiasing: SceneAntialiasing = delegate.getAntiAliasing

  /**
   * Returns Content's Node children from this Scene's `root`.
   */
  def content: jfxc.ObservableList[jfxs.Node] = getChildren

  /**
   * Sets the list of Nodes children from this Scene's `root`, replacing the prior content. If you want append to
   * current content, use `add` or similar.
   *
   * @param c list of Nodes children from this Scene's `root` to replace prior content.
   */
  def content_=(c: Iterable[Node]) {
    fillSFXCollection(this.content, c)
  }

  /**
   * Sets a Node child, replacing the prior content. If you want append to current content, use `add` or similar.
   *
   * @param n Node child to replace prior content.
   */
  def content_=(n: Node) {
    fillSFXCollectionWithOne(this.content, n)
  }

  /**
   * Specifies the type of camera use for rendering this `Scene`.
   */
  def camera: ObjectProperty[jfxs.Camera] = delegate.cameraProperty
  def camera_=(v: Camera) {
    camera() = v
  }

  /**
   * Defines the mouse cursor for this `Scene`.
   */
  def cursor: ObjectProperty[jfxs.Cursor] = delegate.cursorProperty
  def cursor_=(v: Cursor) {
    cursor() = v
  }

  /** The effective node orientation of a scene resolves the inheritance of node orientation, returning either left-to-right or right-to-left.  */
  def effectiveNodeOrientation: ReadOnlyObjectProperty[jfxg.NodeOrientation] = delegate.effectiveNodeOrientationProperty

  /**
   * Specifies the event dispatcher for this scene.
   */
  def eventDispatcher: ObjectProperty[jfxe.EventDispatcher] = delegate.eventDispatcherProperty
  def eventDispatcher_=(v: jfxe.EventDispatcher) {
    eventDispatcher() = v
  }

  /**
   * Defines the background fill of this Scene.
   */
  def fill: ObjectProperty[jfxsp.Paint] = delegate.fillProperty
  def fill_=(v: Paint) {
    fill() = v
  }

  /**
   * The height of this Scene
   */
  def height: ReadOnlyDoubleProperty = delegate.heightProperty

  /**
   * The width of this Scene
   */
  def width: ReadOnlyDoubleProperty = delegate.widthProperty

  def nodeOrientation: ObjectProperty[jfxg.NodeOrientation] = delegate.nodeOrientationProperty
  def nodeOrientation_=(v: NodeOrientation) {
    ObjectProperty.fillProperty[jfxg.NodeOrientation](this.nodeOrientation, v)
  }

  /**
   * Defines a function to be called when a mouse button has been clicked (pressed and released) on this `Scene`.
   */
  def onContextMenuRequested = delegate.onContextMenuRequestedProperty
  def onContextMenuRequested_=(v: jfxe.EventHandler[_ >: jfxsi.ContextMenuEvent]) {
    onContextMenuRequested() = v
  }

  /**
   * Defines a function to be called when drag gesture has been detected.
   */
  def onDragDetected = delegate.onDragDetectedProperty
  def onDragDetected_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onDragDetected() = v
  }

  /**
   * Defines a function to be called when this `Scene` is a drag and drop gesture source after its data has been
   * dropped on a drop target.
   */
  def onDragDone = delegate.onDragDoneProperty
  def onDragDone_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragDone() = v
  }

  /**
   * Defines a function to be called when the mouse button is released on this `Scene` during drag and drop gesture.
   */
  def onDragDropped = delegate.onDragDroppedProperty
  def onDragDropped_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragDropped() = v
  }

  /**
   * Defines a function to be called when drag gesture enters this Scene.
   */
  def onDragEntered = delegate.onDragEnteredProperty
  def onDragEntered_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragEntered() = v
  }

  /**
   * Defines a function to be called when drag gesture exits this Scene.
   */
  def onDragExited = delegate.onDragExitedProperty
  def onDragExited_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragExited() = v
  }

  /**
   * Defines a function to be called when drag gesture progresses within this `Scene`.
   */
  def onDragOver = delegate.onDragOverProperty
  def onDragOver_=(v: jfxe.EventHandler[_ >: jfxsi.DragEvent]) {
    onDragOver() = v
  }

  /**
   * Defines a function to be called when this `Node` has input focus and the input method text has changed.
   */
  def onInputMethodTextChanged = delegate.onInputMethodTextChangedProperty
  def onInputMethodTextChanged_=(v: jfxe.EventHandler[_ >: jfxsi.InputMethodEvent]) {
    onInputMethodTextChanged() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been pressed.
   */
  def onKeyPressed = delegate.onKeyPressedProperty
  def onKeyPressed_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyPressed() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been released.
   */
  def onKeyReleased = delegate.onKeyReleasedProperty
  def onKeyReleased_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyReleased() = v
  }

  /**
   * Defines a function to be called when some `Node` of this `Scene` has input focus and a key has been typed.
   */
  def onKeyTyped = delegate.onKeyTypedProperty
  def onKeyTyped_=(v: jfxe.EventHandler[_ >: jfxsi.KeyEvent]) {
    onKeyTyped() = v
  }

  /**
   * Defines a function to be called when a mouse button has been clicked (pressed and released) on this `Scene`.
   */
  def onMouseClicked = delegate.onMouseClickedProperty
  def onMouseClicked_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseClicked() = v
  }

  /**
   * Defines a function to be called when a mouse button is pressed on this `Scene` and then dragged.
   */
  def onMouseDragged = delegate.onMouseDraggedProperty
  def onMouseDragged_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseDragged() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture enters this `Scene`.
   */
  def onMouseDragEntered = delegate.onMouseDragEnteredProperty
  def onMouseDragEntered_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragEntered() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture exits this `Scene`.
   */
  def onMouseDragExited = delegate.onMouseDragExitedProperty
  def onMouseDragExited_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragExited() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture progresses within this `Scene`.
   */
  def onMouseDragOver = delegate.onMouseDragOverProperty
  def onMouseDragOver_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragOver() = v
  }

  /**
   * Defines a function to be called when a full press-drag-release gesture ends within this `Scene`.
   */
  def onMouseDragReleased = delegate.onMouseDragReleasedProperty
  def onMouseDragReleased_=(v: jfxe.EventHandler[_ >: jfxsi.MouseDragEvent]) {
    onMouseDragReleased() = v
  }

  /**
   * Defines a function to be called when the mouse enters this `Scene`.
   */
  def onMouseEntered = delegate.onMouseEnteredProperty
  def onMouseEntered_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseEntered() = v
  }

  /**
   * Defines a function to be called when the mouse exits this `Scene`.
   */
  def onMouseExited = delegate.onMouseExitedProperty
  def onMouseExited_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseExited() = v
  }

  /**
   * Defines a function to be called when mouse cursor moves within this `Scene` but no buttons have been pushed.
   */
  def onMouseMoved = delegate.onMouseMovedProperty
  def onMouseMoved_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseMoved() = v
  }

  /**
   * Defines a function to be called when a mouse button has been pressed on this `Scene`.
   */
  def onMousePressed = delegate.onMousePressedProperty
  def onMousePressed_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMousePressed() = v
  }

  /**
   * Defines a function to be called when a mouse button has been released on this `Scene`.
   */
  def onMouseReleased = delegate.onMouseReleasedProperty
  def onMouseReleased_=(v: jfxe.EventHandler[_ >: jfxsi.MouseEvent]) {
    onMouseReleased() = v
  }

  /**
   * Defines a function to be called when user performs a scrolling action.
   */
  def onScroll = delegate.onScrollProperty
  def onScroll_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScroll() = v
  }

  /**
   * The URL of the user-agent stylesheet that will be used by this Scene in place of the the platform-default
   * user-agent stylesheet. If the URL does not resolve to a valid location, the platform-default user-agent
   * stylesheet will be used.
   *
   * For additional information about using CSS with the scene graph, see the
   * [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html CSS Reference Guide]].
   *
   * @return The URL of the user-agent stylesheet that will be used by this SubScene, or null if has not been set.
   */
  def userAgentStylesheet: ObjectProperty[String] = delegate.userAgentStylesheetProperty
  /**
   * Set the URL of the user-agent stylesheet that will be used by this Scene in place of the the platform-default
   * user-agent stylesheet. If the URL does not resolve to a valid location, the platform-default user-agent
   * stylesheet will be used.
   *
   * For additional information about using CSS with the scene graph, see the
   * [[http://docs.oracle.com/javase/8/javafx/api/javafx/scene/doc-files/cssref.html CSS Reference Guide]].
   *
   * @param url  The URL is a hierarchical URI of the form `[scheme:][//authority][path]`.
   *             If the URL does not have a `[scheme:]` component, the URL is considered to be the `[path]`
   *             component only. Any leading '/' character of the `[path]` is ignored and the `[path]` is
   *             treated as a path relative to the root of the application's classpath.
   */
  def userAgentStylesheet_=(url: String) {
    ObjectProperty.fillProperty[String](userAgentStylesheet, url)
  }

  /**
   * The `Window` for this Scene
   */
  def window: ReadOnlyObjectProperty[javafx.stage.Window] = delegate.windowProperty

  /**
   * The horizontal location of this `Scene` on the `Window`.
   */
  def x: ReadOnlyDoubleProperty = delegate.xProperty

  /**
   * The vertical location of this `Scene` on the `Window`.
   */
  def y: ReadOnlyDoubleProperty = delegate.yProperty

  /**
   * Retrieves the depth buffer attribute for this scene.
   */
  def depthBuffer = delegate.isDepthBuffer

  /**
   * Gets an observable list of string URLs linking to the stylesheets to use with this Parent's contents.
   */
  def stylesheets: jfxc.ObservableList[String] = delegate.getStylesheets

  /**
   * Sets the list of stylesheets URLs, replacing the prior content. If you want append to current content, use `add` or
   * similar.
   *
   * @param c list of stylesheets URLs to replace prior content.
   */
  def stylesheets_=(c: Iterable[String]) {
    fillCollection(stylesheets, c)
  }

  /**
   * Looks for any node within the scene graph based on the specified CSS selector.
   *
   * @param selector The css selector to look up
   * @return A [[scala.Some]] containing the Node in the scene which matches the CSS selector, or [[scala.None]]
   *         if none is found.
   */
  def lookup(selector: String): Option[Node] = Option(delegate.lookup(selector))

  /**
   * Registers the specified mnemonic.
   *
   * @param m The Mnemonic
   */
  def addMnemonic(m: Mnemonic) {
    delegate.addMnemonic(m)
  }

  /**
   * Unregisters the specified mnemonic.
   *
   * @param m The Mnemonic to be removed.
   */
  def removeMnemonic(m: Mnemonic) {
    delegate.removeMnemonic(m)
  }

  /**
   * Gets the list of mnemonics for this `Scene`.
   */
  def getMnemonics: jfxc.ObservableMap[jfxsi.KeyCombination, jfxc.ObservableList[jfxsi.Mnemonic]] = delegate.getMnemonics

  /**
   * Gets the list of accelerators for this Scene.
   */
  def accelerators: jfxc.ObservableMap[jfxsi.KeyCombination, Runnable] = delegate.getAccelerators

  /**
   * Confirms a potential drag and drop gesture that is recognized over this `Scene`.
   *
   * @param  transferModes The supported `TransferMode`(s) of this `Node`
   * @return A `Dragboard` to place this `Scene`'s data on
   */
  def startDragAndDrop(transferModes: TransferMode*): Dragboard =
    delegate.startDragAndDrop(transferModes.map(_.delegate): _*)

  /**
   * Starts a full press-drag-release gesture with this scene as gesture source.
   */
  def startFullDrag() {
    delegate.startFullDrag()
  }

  /**
   * The scene's current focus owner node. This node's "focused" variable might be false if this scene has no window,
   * or if the window is inactive (window.focused == false).
   *
   * @since 2.2
   */
  def focusOwner: ReadOnlyObjectProperty[jfxs.Node] = delegate.focusOwnerProperty()

  /**
   * Defines a function to be called when user performs a rotation action.
   *
   * @since 2.2
   */
  def onRotate = delegate.onRotateProperty
  def onRotate_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotate() = v
  }

  /**
   * Defines a function to be called when a rotation gesture ends.
   *
   * @since 2.2
   */
  def onRotationFinished = delegate.onRotationFinishedProperty()
  def onRotationFinished_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotationFinished() = v
  }

  /**
   * Defines a function to be called when a rotation gesture starts.
   *
   * @since 2.2
   */
  def onRotationStarted = delegate.onRotationFinishedProperty()
  def onRotationStarted_=(v: jfxe.EventHandler[_ >: jfxsi.RotateEvent]) {
    onRotationStarted() = v
  }

  /**
   * Defines a function to be called when a Scroll gesture ends.
   *
   * @since 2.2
   */
  def onScrollFinished = delegate.onScrollFinishedProperty()
  def onScrollFinished_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScrollFinished() = v
  }

  /**
   * Defines a function to be called when a Scroll gesture starts.
   *
   * @since 2.2
   */
  def onScrollStarted = delegate.onScrollStartedProperty()
  def onScrollStarted_=(v: jfxe.EventHandler[_ >: jfxsi.ScrollEvent]) {
    onScrollStarted() = v
  }

  /**
   * Defines a function to be called when a Swipe Down gesture starts.
   *
   * @since 2.2
   */
  def onSwipeDown = delegate.onSwipeDownProperty()
  def onSwipeDown_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeDown() = v
  }

  /**
   * Defines a function to be called when a Swipe Down gesture starts.
   *
   * @since 2.2
   */
  def onSwipeLeft = delegate.onSwipeLeftProperty()
  def onSwipeLeft_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeLeft() = v
  }

  /**
   * Defines a function to be called when a Swipe Up gesture starts.
   *
   * @since 2.2
   */
  def onSwipeUp = delegate.onSwipeUpProperty()
  def onSwipeUp_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeUp() = v
  }

  /**
   * Defines a function to be called when a Swipe Right gesture starts.
   *
   * @since 2.2
   */
  def onSwipeRight = delegate.onSwipeRightProperty()
  def onSwipeRight_=(v: jfxe.EventHandler[_ >: jfxsi.SwipeEvent]) {
    onSwipeRight() = v
  }

  /**
   * Defines a function to be called when user performs a Touch action.
   *
   * @since 2.2
   */
  def onZoom = delegate.onZoomProperty()
  def onZoom_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoom() = v
  }

  /**
   * Defines a function to be called when a Zoom gesture ends.
   *
   * @since 2.2
   */
  def onZoomFinished = delegate.onZoomFinishedProperty()
  def onZoomFinished_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoomFinished() = v
  }

  /**
   * Defines a function to be called when a Zoom gesture starts.
   *
   * @since 2.2
   */
  def onZoomStarted = delegate.onZoomStartedProperty()
  def onZoomStarted_=(v: jfxe.EventHandler[_ >: jfxsi.ZoomEvent]) {
    onZoomStarted() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Moved action.
   *
   * @since 2.2
   */
  def onTouchMoved = delegate.onTouchMovedProperty()
  def onTouchMoved_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchMoved() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Pressed action.
   *
   * @since 2.2
   */
  def onTouchPressed = delegate.onTouchPressedProperty()
  def onTouchPressed_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchPressed() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Released action.
   *
   * @since 2.2
   */
  def onTouchReleased = delegate.onTouchReleasedProperty()
  def onTouchReleased_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchReleased() = v
  }

  /**
   * Defines a function to be called when user performs a Touch Stationary action.
   *
   * @since 2.2
   */
  def onTouchStationary = delegate.onTouchStationaryProperty()
  def onTouchStationary_=(v: jfxe.EventHandler[_ >: jfxsi.TouchEvent]) {
    onTouchStationary() = v
  }

  /**
   * Takes a snapshot of this scene and returns the rendered image when it is ready.
   *
   * @param image The writable image that will be used to hold the rendered scene.
   * @return the rendered image
   *
   * @since 2.2
   */
  def snapshot(image: WritableImage): WritableImage = delegate.snapshot(image)

  /**
   * Takes a snapshot of this scene at the next frame and calls the specified callback method when the image is ready.
   *
   * @param callback A function to be called  when the image is ready.
   * @param image The writable image that will be used to hold the rendered scene.
   *
   * @since 2.2
   */
  def snapshot(callback: SnapshotResult => Unit, image: WritableImage) {
    val javaCallback = new jfxu.Callback[jfxs.SnapshotResult, java.lang.Void] {
      def call(result: jfxs.SnapshotResult): java.lang.Void = {
        callback(new SnapshotResult(result))
        null
      }
    }
    delegate.snapshot(javaCallback, image)
  }

}
Mar 31, 2021 1:58:44 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 13:59:07 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 13:59:10 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 13:59:10 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 13:59:10 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 13:59:10 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CourseCatalog.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CourseCatalog.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 13:59:10 INFO  time: compiled course-catalog in 3.56s[0m
Mar 31, 2021 2:03:16 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 14:03:20 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:03:20 INFO  time: compiled course-catalog in 0.5s[0m
[0m2021.03.31 14:03:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:03:39 INFO  time: compiled course-catalog in 0.57s[0m
Mar 31, 2021 2:04:04 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 14:04:20 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:04:23 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:04:23 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:04:23 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:04:23 INFO  time: compiled course-catalog in 2.43s[0m
[0m2021.03.31 14:05:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:06:00 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:06:00 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:06:00 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:06:00 INFO  time: compiled course-catalog in 2.93s[0m
[0m2021.03.31 14:06:34 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:06:36 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:06:36 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:06:36 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:06:36 INFO  time: compiled course-catalog in 2.51s[0m
Mar 31, 2021 2:08:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6337
Mar 31, 2021 2:09:07 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6347
[0m2021.03.31 14:16:18 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:16:19 INFO  time: compiled course-catalog in 1.66s[0m
[0m2021.03.31 14:16:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:16:41 INFO  time: compiled course-catalog in 1.75s[0m
[0m2021.03.31 14:19:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:19:18 INFO  time: compiled course-catalog in 2.13s[0m
[0m2021.03.31 14:20:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:20:21 INFO  time: compiled course-catalog in 2.17s[0m
Mar 31, 2021 2:24:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6810
[0m2021.03.31 14:25:08 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:25:10 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\Group.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\Group.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 14:25:10 INFO  time: compiled course-catalog in 1.86s[0m
Mar 31, 2021 2:25:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6846
Mar 31, 2021 2:26:11 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6860
[0m2021.03.31 14:26:35 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:26:37 INFO  time: compiled course-catalog in 2.71s[0m
Mar 31, 2021 2:26:39 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6916
[0m2021.03.31 14:28:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:28:19 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:28:19 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:28:19 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:28:19 INFO  time: compiled course-catalog in 2.51s[0m
Mar 31, 2021 2:29:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6947
[0m2021.03.31 14:29:45 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:29:46 INFO  time: compiled course-catalog in 1.22s[0m
[0m2021.03.31 14:33:03 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:33:05 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:33:05 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:33:05 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:33:05 INFO  time: compiled course-catalog in 1.79s[0m
[0m2021.03.31 14:33:36 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 2:33:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7283
[0m2021.03.31 14:33:38 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:33:38 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:33:38 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:33:38 INFO  time: compiled course-catalog in 1.63s[0m
[0m2021.03.31 14:33:55 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:33:56 INFO  time: compiled course-catalog in 1.48s[0m
[0m2021.03.31 14:34:01 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:34:03 INFO  time: compiled course-catalog in 1.35s[0m
[0m2021.03.31 14:34:20 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:34:21 INFO  time: compiled course-catalog in 1.22s[0m
Mar 31, 2021 2:35:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7384
[0m2021.03.31 14:35:57 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:35:59 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:35:59 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:35:59 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:35:59 INFO  time: compiled course-catalog in 1.5s[0m
[0m2021.03.31 14:38:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:38:21 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:38:21 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:38:21 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:38:21 INFO  time: compiled course-catalog in 2.59s[0m
Mar 31, 2021 2:39:12 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7727
Mar 31, 2021 2:40:49 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7941
[0m2021.03.31 14:41:24 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:41:26 INFO  time: compiled course-catalog in 2.27s[0m
[0m2021.03.31 14:41:26 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 2:41:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8053
[0m2021.03.31 14:41:28 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 14:41:28 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 14:41:28 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 14:41:28 INFO  time: compiled course-catalog in 1.22s[0m
Mar 31, 2021 2:41:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8068
Mar 31, 2021 2:41:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8074
[0m2021.03.31 14:42:43 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:42:44 INFO  time: compiled course-catalog in 1.27s[0m
[0m2021.03.31 14:44:08 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 14:44:09 INFO  time: compiled course-catalog in 1.22s[0m
Mar 31, 2021 2:44:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8122
Mar 31, 2021 2:44:35 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8133
Mar 31, 2021 2:45:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8141
Mar 31, 2021 2:45:37 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8165
Mar 31, 2021 4:50:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8176
Mar 31, 2021 4:50:53 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 4:50:53 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 31, 2021 4:50:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8237
[0m2021.03.31 16:51:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 16:51:19 INFO  time: compiled course-catalog in 1.57s[0m
[0m2021.03.31 16:53:25 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 16:53:26 INFO  time: compiled course-catalog in 1.03s[0m
[0m2021.03.31 16:54:42 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 16:54:43 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CourseCatalog.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-OmU9qxPcTa2r32WzGvbYyA==\META-INF\semanticdb\src\main\scala\cc\CourseCatalog.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 16:54:43 INFO  time: compiled course-catalog in 1.46s[0m
Mar 31, 2021 4:55:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8731
Mar 31, 2021 4:55:29 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8738
Mar 31, 2021 4:58:31 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8753
[0m2021.03.31 16:58:45 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 4:58:46 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8788
[0m2021.03.31 16:58:46 INFO  time: compiled course-catalog in 1.2s[0m
Mar 31, 2021 5:01:16 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8901
[0m2021.03.31 17:02:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:02:40 INFO  time: compiled course-catalog in 0.63s[0m
[0m2021.03.31 17:02:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:02:41 INFO  time: compiled course-catalog in 0.48s[0m
Mar 31, 2021 5:03:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9007
Mar 31, 2021 5:03:24 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9012
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 106)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 99)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 100)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 101)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 102)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 104)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 104)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in Set[cc.Course]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 93, 93, 104)
[0m2021.03.31 17:03:57 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:03:57 INFO  time: compiled course-catalog in 0.72s[0m
[0m2021.03.31 17:04:17 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:04:17 INFO  time: compiled course-catalog in 0.77s[0m
Mar 31, 2021 5:04:34 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9261
[0m2021.03.31 17:05:03 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:05:04 INFO  time: compiled course-catalog in 1.19s[0m
Mar 31, 2021 5:05:22 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9393
Mar 31, 2021 5:06:45 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9585
[0m2021.03.31 17:07:11 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:07:13 INFO  time: compiled course-catalog in 1.37s[0m
Mar 31, 2021 5:08:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9822
Mar 31, 2021 5:08:32 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9835
[0m2021.03.31 17:12:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:12:46 INFO  time: compiled course-catalog in 0.18s[0m
Mar 31, 2021 5:12:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10618
[0m2021.03.31 17:12:56 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 17:12:56 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.31 17:13:13 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 17:13:15 INFO  time: compiled course-catalog in 1.34s[0m
[0m2021.03.31 17:13:25 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:13:27 INFO  time: compiled course-catalog in 1.2s[0m
[0m2021.03.31 17:15:07 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:15:09 INFO  time: compiled course-catalog in 1.92s[0m
[0m2021.03.31 17:15:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:15:49 INFO  time: compiled course-catalog in 1.24s[0m
[0m2021.03.31 17:18:07 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:18:08 INFO  time: compiled course-catalog in 1.19s[0m
Mar 31, 2021 5:18:10 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11114
[0m2021.03.31 17:21:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:21:48 INFO  time: compiled course-catalog in 0.74s[0m
[0m2021.03.31 17:21:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:21:50 INFO  time: compiled course-catalog in 0.61s[0m
[0m2021.03.31 17:22:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:22:40 INFO  time: compiled course-catalog in 0.83s[0m
[0m2021.03.31 17:23:09 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:23:09 INFO  time: compiled course-catalog in 0.84s[0m
Mar 31, 2021 5:24:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11663
[0m2021.03.31 17:25:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:25:40 INFO  time: compiled course-catalog in 0.8s[0m
[0m2021.03.31 17:31:22 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:31:23 INFO  time: compiled course-catalog in 1.23s[0m
Mar 31, 2021 5:31:25 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11859
Mar 31, 2021 5:31:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11866
[0m2021.03.31 17:31:28 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:31:28 INFO  time: compiled course-catalog in 0.63s[0m
[0m2021.03.31 17:31:28 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:31:29 INFO  time: compiled course-catalog in 0.62s[0m
Mar 31, 2021 5:32:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11880
[0m2021.03.31 17:41:41 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:41:41 INFO  time: compiled course-catalog in 0.79s[0m
[0m2021.03.31 17:41:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:41:46 INFO  time: compiled course-catalog in 0.94s[0m
[0m2021.03.31 17:42:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:42:02 INFO  time: compiled course-catalog in 0.96s[0m
Mar 31, 2021 5:42:21 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11995
[0m2021.03.31 17:42:29 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:42:29 INFO  time: compiled course-catalog in 0.82s[0m
[0m2021.03.31 17:44:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:44:05 INFO  time: compiled course-catalog in 0.84s[0m
[0m2021.03.31 17:44:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:44:06 INFO  time: compiled course-catalog in 0.8s[0m
Mar 31, 2021 5:44:25 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 5:44:25 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

[0m2021.03.31 17:49:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:49:53 INFO  time: compiled course-catalog in 0.91s[0m
Mar 31, 2021 5:50:33 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12801
[0m2021.03.31 17:50:53 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:50:54 INFO  time: compiled course-catalog in 1.63s[0m
Mar 31, 2021 5:50:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12849
[0m2021.03.31 17:51:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 17:51:58 INFO  time: compiled course-catalog in 0.84s[0m
[0m2021.03.31 17:52:45 INFO  shutting down Metals[0m
[0m2021.03.31 17:52:45 INFO  Shut down connection with build server.[0m
[0m2021.03.31 17:52:45 INFO  Shut down connection with build server.[0m
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.31 17:52:45 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.03.31 21:14:10 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.55.0.[0m
[0m2021.03.31 21:14:14 INFO  time: initialize in 4.29s[0m
[0m2021.03.31 21:14:15 INFO  Attempting to connect to the build server...[0m
[0m2021.03.31 21:14:15 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala[0m
[0m2021.03.31 21:14:15 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CatalogApp.scala[0m
[0m2021.03.31 21:14:16 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 21:14:16 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 44949'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:44949...
The server is listening for incoming connections at tcp://127.0.0.1:44949...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.31 21:14:19 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 21:14:19 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
[0m2021.03.31 21:14:19Opening a bsp server connection with 'bsp --protocol tcp --port 34001'... 
INFO  Attempting to connect to the build server...[0m
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 30175'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:34001...
The server is listening for incoming connections at tcp://127.0.0.1:34001...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:30175...
The server is listening for incoming connections at tcp://127.0.0.1:30175...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.03.31 21:14:24 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 21:14:24 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.03.31 21:14:24 INFO  time: Connected to build server in 8.67s[0m
[0m2021.03.31 21:14:24 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.03.31 21:14:26 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.03.31 21:14:26 INFO  time: Imported build in 0.49s[0m
[0m2021.03.31 21:14:28 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
Mar 31, 2021 9:14:28 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
package cc

import scala.collection.mutable.Set

class Requirement(var name: String) extends Complete{
  var and = Set[Course]()
  var or = Set[Set[Course]]()

  override def toString(): String = {
    var ret = name + {if(done){"\tDone"}else{"\tNot Done"}}+"\n"
    and.foreach(x => ret += x.code + ", ")
    or.foreach(s => {
      ret += "\n"
      s.foreach(x => ret += x.code + "/ ")
    })
    ret
  }
  def checkReady():Unit = {
    var ret = true
    and.foreach(x=> if(!x.done){ret=false})
    if(ret){
        or.foreach(x=> {
            var temp = false
            x.foreach(y=>
                if(y.done){temp=true}
            )
            if(!temp){ret=false}
        })
    }
    if(ret){done=true}
  }
}

package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.03.31 21:14:32 INFO  time: code lens generation in 2.58s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 2.7s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 2.77s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 2.85s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.1s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.3s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.4s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.55s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.82s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 3.93s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 4.13s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 4.06s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 4.27s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 4.35s[0m
[0m2021.03.31 21:14:32 INFO  time: code lens generation in 4.64s[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.03.31 21:14:33 INFO  time: code lens generation in 16s[0m
[0m2021.03.31 21:14:39 INFO  time: indexed workspace in 13s[0m
Mar 31, 2021 9:14:50 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 9:15:11 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
Mar 31, 2021 9:15:12 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.meta.internal.pc.completions.OverrideCompletions.scala$meta$internal$pc$completions$OverrideCompletions$$getMembers(OverrideCompletions.scala:161)
	at scala.meta.internal.pc.completions.OverrideCompletions$OverrideCompletion.contribute(OverrideCompletions.scala:60)
	at scala.meta.internal.pc.CompletionProvider.expected$1(CompletionProvider.scala:389)
	at scala.meta.internal.pc.CompletionProvider.safeCompletionsAt(CompletionProvider.scala:468)
	at scala.meta.internal.pc.CompletionProvider.completions(CompletionProvider.scala:57)

Mar 31, 2021 9:15:17 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 9:15:17 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 31, 2021 9:17:19 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 9:17:19 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 31, 2021 9:18:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 526
[0m2021.03.31 21:19:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:19:40 INFO  time: compiled course-catalog in 0.61s[0m
[0m2021.03.31 21:19:48 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:19:50 INFO  time: compiled course-catalog in 1.93s[0m
Mar 31, 2021 9:19:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 709
[0m2021.03.31 21:20:03 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:20:03 INFO  time: compiled course-catalog in 0.27s[0m
[0m2021.03.31 21:20:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:20:37 INFO  time: compiled course-catalog in 0.29s[0m
[0m2021.03.31 21:20:57 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:20:59 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:20:59 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:20:59 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:20:59 INFO  time: compiled course-catalog in 1.89s[0m
Mar 31, 2021 9:23:32 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 9:23:33 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 31, 2021 9:23:55 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 887
[0m2021.03.31 21:23:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:23:58 INFO  time: compiled course-catalog in 0.29s[0m
[0m2021.03.31 21:24:03 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 21:24:03 INFO  time: compiled course-catalog in 0.32s[0m
[0m2021.03.31 21:25:51 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 21:25:51 INFO  time: compiled course-catalog in 0.28s[0m
[0m2021.03.31 21:26:00 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 21:26:03 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:26:03 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:26:03 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:26:03 INFO  time: compiled course-catalog in 3.25s[0m
[0m2021.03.31 21:26:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:26:51 INFO  time: compiled course-catalog in 0.17s[0m
[0m2021.03.31 21:27:01 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:27:01 INFO  time: compiled course-catalog in 0.19s[0m
Mar 31, 2021 9:27:42 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1232
[0m2021.03.31 21:27:48 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:78:23: stale bloop error: value += is not a member of Array[scalafx.scene.control.Button]
  Expression does not convert to assignment because:
    type mismatch;
     found   : String
     required: Array[scalafx.scene.control.Button]
    expansion: ret = ret.$plus(x.toString().+("\n"))
    grad.foreach(x=> {ret+=x.toString()+"\n"})
                      ^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.31 21:27:48 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\CourseCatalog.scala:78:23: stale bloop error: value += is not a member of Array[scalafx.scene.control.Button]
  Expression does not convert to assignment because:
    type mismatch;
     found   : String
     required: Array[scalafx.scene.control.Button]
    expansion: ret = ret.$plus(x.toString().+("\n"))
    grad.foreach(x=> {ret+=x.toString()+"\n"})
                      ^^^^^^^^^^^^^^^^^^^^^^[0m
[0m2021.03.31 21:27:58 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:27:58 INFO  time: compiled course-catalog in 0.16s[0m
[0m2021.03.31 21:28:56 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:28:57 INFO  time: compiled course-catalog in 1.2s[0m
[0m2021.03.31 21:28:57 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:28:57 INFO  time: compiled course-catalog in 0.27s[0m
Mar 31, 2021 9:29:00 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1470
[0m2021.03.31 21:29:04 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:29:05 INFO  time: compiled course-catalog in 1.48s[0m
[0m2021.03.31 21:29:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:29:05 INFO  time: compiled course-catalog in 0.21s[0m
[0m2021.03.31 21:29:09 INFO  compiling course-catalog (2 scala sources)[0m
[0m2021.03.31 21:29:10 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:29:10 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:29:10 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:29:10 INFO  time: compiled course-catalog in 1.81s[0m
[0m2021.03.31 21:29:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:29:38 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:29:38 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:29:38 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:29:38 INFO  time: compiled course-catalog in 1.48s[0m
Mar 31, 2021 9:30:06 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
Mar 31, 2021 9:30:06 PM scala.meta.internal.pc.CompilerAccess handleError
SEVERE: null
java.lang.NullPointerException
	at scala.reflect.internal.Definitions$DefinitionsClass.isByNameParamType(Definitions.scala:417)
	at scala.reflect.internal.TreeInfo.isStableIdent(TreeInfo.scala:138)
	at scala.reflect.internal.TreeInfo.isStableIdentifier(TreeInfo.scala:113)
	at scala.reflect.internal.TreeInfo.isPath(TreeInfo.scala:102)
	at scala.reflect.internal.TreeInfo.admitsTypeSelection(TreeInfo.scala:156)
	at scala.tools.nsc.interactive.Global.stabilizedType(Global.scala:959)
	at scala.tools.nsc.interactive.Global.typedTreeAt(Global.scala:807)
	at scala.meta.internal.pc.SignatureHelpProvider.signatureHelp(SignatureHelpProvider.scala:23)

Mar 31, 2021 9:31:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1832
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.mutable.Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 384, 397)
[0m2021.03.31 21:32:30 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:32:30 INFO  time: compiled course-catalog in 0.19s[0m
[0m2021.03.31 21:32:52 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:32:52 INFO  time: compiled course-catalog in 0.17s[0m
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.mutable.Set[cc.Requirement]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 384, 400)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.mutable.Set[cc.Requirement]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 384, 400)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.mutable.Set[cc.Requirement]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 384, 400)
[0m2021.03.31 21:33:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:33:18 INFO  time: compiled course-catalog in 1.58s[0m
Mar 31, 2021 9:34:23 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2162
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.immutable.Set[cc.Requirement]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 411, 427)
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala in scala.collection.mutable.Map[String,cc.Requirement]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/CourseCatalog.scala, 384, 384, 407)
[0m2021.03.31 21:35:09 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:35:11 INFO  time: compiled course-catalog in 1.26s[0m
Mar 31, 2021 9:35:14 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2330
[0m2021.03.31 21:35:15 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:35:17 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:35:17 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:35:17 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:35:17 WARN  unexpected error processing the file C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-WIMqooxRRwOARiH5pd3lnw==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb
java.nio.file.FileSystemException: C:\Users\Jenny\course-catalog\.bloop\course-catalog\bloop-bsp-clients-classes\classes-Metals-WIMqooxRRwOARiH5pd3lnw==\META-INF\semanticdb\src\main\scala\cc\CatalogApp.scala.semanticdb: The process cannot access the file because it is being used by another process.

	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:92)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.nio.file.Files.newByteChannel(Files.java:371)
	at java.nio.file.Files.newByteChannel(Files.java:422)
	at java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.metals.SemanticdbIndexer.onChange(SemanticdbIndexer.scala:96)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeWatchedFiles$5(MetalsLanguageServer.scala:1220)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.03.31 21:35:17 INFO  time: compiled course-catalog in 1.38s[0m
[0m2021.03.31 21:35:36 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:35:38 INFO  time: compiled course-catalog in 1.55s[0m
[0m2021.03.31 21:36:28 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:36:30 INFO  time: compiled course-catalog in 1.59s[0m
Mar 31, 2021 9:37:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2530
Mar 31, 2021 9:38:09 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2542
Mar 31, 2021 9:38:50 PM scala.meta.internal.pc.CompletionProvider expected$1
WARNING: null
[0m2021.03.31 21:39:12 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:39:13 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.03.31 21:39:13 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.03.31 21:39:13 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.03.31 21:39:13 INFO  time: compiled course-catalog in 1.42s[0m
Mar 31, 2021 9:39:58 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2822
[0m2021.03.31 21:40:17 INFO  compiling course-catalog (1 scala source)[0m
Mar 31, 2021 9:40:18 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2850
[0m2021.03.31 21:40:18 INFO  time: compiled course-catalog in 1.57s[0m
[0m2021.03.31 21:40:52 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:40:52 INFO  time: compiled course-catalog in 74ms[0m
[0m2021.03.31 21:41:18 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:41:18 INFO  time: compiled course-catalog in 85ms[0m
[0m2021.03.31 21:41:33 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:41:34 INFO  time: compiled course-catalog in 1.15s[0m
[0m2021.03.31 21:41:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:41:46 INFO  time: compiled course-catalog in 0.85s[0m
[0m2021.03.31 21:43:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:43:37 INFO  time: compiled course-catalog in 72ms[0m
[0m2021.03.31 21:43:44 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:43:44 INFO  time: compiled course-catalog in 0.13s[0m
[0m2021.03.31 21:44:40 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:23:7: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value done is not a member of scala.collection.mutable.Set[cc.Course]
    expansion: ret = ret.+(if (s.<done: error>)
  "\tDone"
else
  "\tNot Done")
> ret+= {if (s.done) { "\tDone" }
>         else { "\tNot Done" }[0m
[0m2021.03.31 21:44:40 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:23:7: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value done is not a member of scala.collection.mutable.Set[cc.Course]
    expansion: ret = ret.+(if (s.<done: error>)
  "\tDone"
else
  "\tNot Done")
> ret+= {if (s.done) { "\tDone" }
>         else { "\tNot Done" }[0m
[0m2021.03.31 21:44:42 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:23:7: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value done is not a member of scala.collection.mutable.Set[cc.Course]
    expansion: ret = ret.+(if (s.<done: error>)
  "\tDone"
else
  "\tNot Done")
> ret+= {if (s.done) { "\tDone" }
>         else { "\tNot Done" }[0m
[0m2021.03.31 21:44:42 INFO  C:\Users\Jenny\course-catalog\src\main\scala\cc\Requirement.scala:23:7: stale bloop error: value += is not a member of String
  Expression does not convert to assignment because:
    value done is not a member of scala.collection.mutable.Set[cc.Course]
    expansion: ret = ret.+(if (s.<done: error>)
  "\tDone"
else
  "\tNot Done")
> ret+= {if (s.done) { "\tDone" }
>         else { "\tNot Done" }[0m
[0m2021.03.31 21:44:44 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:44:44 INFO  time: compiled course-catalog in 0.89s[0m
Mar 31, 2021 9:44:48 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3070
Mar 31, 2021 9:45:44 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3082
something's wrong: no file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala in scala.collection.mutable.Set[<error>]RangePosition(file:///C:/Users/Jenny/course-catalog/src/main/scala/cc/Requirement.scala, 649, 649, 662)
[0m2021.03.31 21:49:39 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:49:39 INFO  time: compiled course-catalog in 0.86s[0m
[0m2021.03.31 21:49:49 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:49:49 INFO  time: compiled course-catalog in 0.91s[0m
[0m2021.03.31 21:52:05 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:52:06 INFO  time: compiled course-catalog in 1.07s[0m
Mar 31, 2021 9:52:43 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3473
[0m2021.03.31 21:52:55 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 21:52:55 INFO  time: compiled course-catalog in 0.84s[0m
Mar 31, 2021 10:58:27 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3504
[0m2021.03.31 22:59:06 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.03.31 22:59:07 INFO  time: compiled course-catalog in 1.27s[0m
[0m2021.04.01 12:48:16 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:48:20 INFO  time: compiled course-catalog in 3.64s[0m
Apr 01, 2021 12:49:20 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3825
[0m2021.04.01 12:50:19 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:50:21 INFO  time: compiled course-catalog in 1.91s[0m
[0m2021.04.01 12:51:51 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:51:53 INFO  time: compiled course-catalog in 1.68s[0m
[0m2021.04.01 12:52:40 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:52:41 INFO  time: compiled course-catalog in 1.84s[0m
Apr 01, 2021 12:53:38 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4161
[0m2021.04.01 12:54:03 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:54:07 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.01 12:54:07 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.01 12:54:07 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.01 12:54:07 INFO  time: compiled course-catalog in 4.62s[0m
[0m2021.04.01 12:54:38 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:54:39 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.01 12:54:39 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.01 12:54:39 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.01 12:54:39 INFO  time: compiled course-catalog in 1.79s[0m
[0m2021.04.01 12:56:18 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 12:56:20 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.01 12:56:20 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.01 12:56:20 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.01 12:56:20 INFO  time: compiled course-catalog in 2.85s[0m
Apr 01, 2021 12:56:53 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4301
Apr 01, 2021 1:12:36 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4314
Apr 01, 2021 1:12:41 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4320
Apr 01, 2021 1:12:47 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4326
Apr 01, 2021 1:15:57 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4361
Apr 01, 2021 1:15:59 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4372
[0m2021.04.01 13:16:02 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 13:16:03 INFO  shutting down Metals[0m
[0m2021.04.01 13:16:03 INFO  Shut down connection with build server.[0m
[0m2021.04.01 13:16:03 INFO  Shut down connection with build server.[0m
[0m2021.04.01 13:16:03 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
[0m2021.04.01 15:22:17 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.55.0.[0m
[0m2021.04.01 15:22:19 INFO  time: initialize in 2.73s[0m
[0m2021.04.01 15:22:21 INFO  Attempting to connect to the build server...[0m
[0m2021.04.01 15:22:21 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CatalogApp.scala[0m
[0m2021.04.01 15:22:21 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.04.01 15:22:21 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 20284'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:20284...
The server is listening for incoming connections at tcp://127.0.0.1:20284...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.01 15:22:24 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.01 15:22:24 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 37358'...
Waiting for the bsp connection to come up...
[0m2021.04.01 15:22:24 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 13285'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:13285...
The server is listening for incoming connections at tcp://127.0.0.1:13285...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:37358...
The server is listening for incoming connections at tcp://127.0.0.1:37358...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.01 15:22:27 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.01 15:22:28 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.01 15:22:28 INFO  time: Connected to build server in 7.32s[0m
[0m2021.04.01 15:22:28 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.04.01 15:22:29 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.04.01 15:22:29 INFO  time: Imported build in 0.27s[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          },
          new Button("View Graduation Requirements"){
            onAction = (e:ActionEvent) =>{gradReqs()}
          }
        )
      }
      def gradReqs():Unit = {
        var temp = catalog.getGradShort()
        temp.foreach(x=> x.onAction=(e:ActionEvent)=>gradReq(catalog.reqs(x.text.value)))
        screen.children = Array(
          new Label("Graduation Requirements: "),
          new Label(catalog.getReqCompl()))++temp++Array(
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradReq(x:Requirement):Unit = {
        screen.children = Array(
          new Text( x.toString()),
          new Button("Back"){onAction=(e:ActionEvent)=>gradReqs()},
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.04.01 15:22:35 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          },
          new Button("View Graduation Requirements"){
            onAction = (e:ActionEvent) =>{gradReqs()}
          }
        )
      }
      def gradReqs():Unit = {
        var temp = catalog.getGradShort()
        temp.foreach(x=> x.onAction=(e:ActionEvent)=>gradReq(catalog.reqs(x.text.value)))
        screen.children = Array(
          new Label("Graduation Requirements: "),
          new Label(catalog.getReqCompl()))++temp++Array(
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradReq(x:Requirement):Unit = {
        screen.children = Array(
          new Text( x.toString()),
          new Button("Back"){onAction=(e:ActionEvent)=>gradReqs()},
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.04.01 15:22:35 INFO  time: code lens generation in 14s[0m
[0m2021.04.01 15:22:41 INFO  time: indexed workspace in 11s[0m
[0m2021.04.01 15:22:46 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.01 15:22:54 INFO  time: compiled course-catalog in 8.48s[0m
Apr 01, 2021 6:14:08 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
[0m2021.04.01 18:14:08 INFO  shutting down Metals[0m
[0m2021.04.01 18:14:08 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the client stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.04.02 17:14:42 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.55.0.[0m
[0m2021.04.02 17:14:45 INFO  time: initialize in 3.32s[0m
[0m2021.04.02 17:14:46 INFO  Attempting to connect to the build server...[0m
[0m2021.04.02 17:14:46 WARN  no build target for: C:\Users\Jenny\course-catalog\src\main\scala\cc\CatalogApp.scala[0m
[0m2021.04.02 17:14:47 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.04.02 17:14:47 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 39360'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:39360...
The server is listening for incoming connections at tcp://127.0.0.1:39360...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.02 17:14:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:14:50 INFO  Attempting to connect to the build server...[0m
[0m2021.04.02 17:14:50 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 38798'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 27340'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:38798...
The server is listening for incoming connections at tcp://127.0.0.1:38798...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:27340...
The server is listening for incoming connections at tcp://127.0.0.1:27340...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.02 17:14:56 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
[0m2021.04.02 17:14:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:14:57 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:14:57 INFO  time: Connected to build server in 10s[0m
[0m2021.04.02 17:14:57 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.04.02 17:14:57 INFO  time: Imported build in 0.25s[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          },
          new Button("View Graduation Requirements"){
            onAction = (e:ActionEvent) =>{gradReqs()}
          }
        )
      }
      def gradReqs():Unit = {
        var temp = catalog.getGradShort()
        temp.foreach(x=> x.onAction=(e:ActionEvent)=>gradReq(catalog.reqs(x.text.value)))
        screen.children = Array(
          new Label("Graduation Requirements: "),
          new Label(catalog.getReqCompl()))++temp++Array(
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradReq(x:Requirement):Unit = {
        screen.children = Array(
          new Text( x.toString()),
          new Button("Back"){onAction=(e:ActionEvent)=>gradReqs()},
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.04.02 17:15:01 INFO  time: code lens generation in 4.01s[0m
[0m2021.04.02 17:15:01 INFO  time: code lens generation in 2.4s[0m
[0m2021.04.02 17:15:02 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
Apr 02, 2021 5:15:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 29
Apr 02, 2021 5:15:02 PM org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 35
[0m2021.04.02 17:15:05 INFO  no build target: using presentation compiler with only scala-library: 2.12.12[0m
[0m2021.04.02 17:15:09 INFO  time: indexed workspace in 12s[0m
package cc

import scalafx.application.JFXApp
import scalafx.scene.Scene
import scala.collection.mutable
import scalafx.scene.layout.FlowPane
import scalafx.geometry.Orientation
import scalafx.scene.control.Label
import scalafx.scene.control.Button
import javafx.event.ActionEvent
import scalafx.scene.text.Text
import scalafx.scene.text.TextAlignment

object CatalogApp extends JFXApp {
  stage = new JFXApp.PrimaryStage {
    title = "Course Catalog"
    scene = new Scene(1200, 600) {
      var catalog = new CourseCatalog()
      var screen = new FlowPane(Orientation.VERTICAL) {
        children = Array(
          new Label("Welcome to Your Course Catalog"),
          new Button("continue") { onAction = (e: ActionEvent) => home() }
        )
      }
      screen.prefWrapLength.value = 580

      def home(): Unit = {
        screen.children = Array(
          new Label("Home Page"),
          new Button("View Grades & GPA") {
            onAction = (e: ActionEvent) => { gradesGpa() }
          },
          new Button("View Credit") {
            onAction = (e: ActionEvent) => { credit() }
          },
          new Button("View Current Classes") {
            onAction = (e: ActionEvent) => { current() }
          },
          new Button("View Next Semester") {
            onAction = (e: ActionEvent) => { next() }
          },
          new Button("View All Courses") {
            onAction = (e: ActionEvent) => { all() }
          },
          new Button("View Graduation Requirements"){
            onAction = (e:ActionEvent) =>{gradReqs()}
          }
        )
      }
      def gradReqs():Unit = {
        var temp = catalog.getGradShort()
        temp.foreach(x=> x.onAction=(e:ActionEvent)=>gradReq(catalog.reqs(x.text.value)))
        screen.children = Array(
          new Label("Graduation Requirements: "),
          new Label(catalog.getReqCompl()))++temp++Array(
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradReq(x:Requirement):Unit = {
        screen.children = Array(
          new Text( x.toString()),
          new Button("Back"){onAction=(e:ActionEvent)=>gradReqs()},
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def gradesGpa(): Unit = {
        screen.children = Array(
          new Label("Grades"),
          new Label(catalog.getGrades),
          new Label("GPA"),
          new Label(catalog.getGPA),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def credit(): Unit = {
        screen.children = Array(
          new Label("Credit\n"),
          new Label(catalog.getCredit()),
          new Label("\nTotal: " + catalog.getHours() + " hours"),
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def current(): Unit = {
        var temp = catalog.getCurrent()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => current() }
            )
        )
        screen.children = Array(
          new Label("Current Semester: " + catalog.current.name)
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.current.getHours()),new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def courseLong(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          back,
          new Button("Home") { onAction = (e: ActionEvent) => home() }
        )
      }
      def courseEdit(x: Course, back: Button): Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Remove Course") {
            onAction = (e: ActionEvent) => catalog.next.remove(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def courseAdd(x: Course, back: Button):Unit = {
        var temp = new Text(x.getLong())
        temp.setTextAlignment(TextAlignment.LEFT)
        temp.wrappingWidth.value = 800
        screen.children = Array(
          temp,
          new Button("Add Course") {
            onAction = (e: ActionEvent) => catalog.next.add(x)
          },
          back,
          new Button("Next Semester") { onAction = (e: ActionEvent) => next() }
        )
      }
      def next(): Unit = {
        var temp = catalog.getNext()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseEdit(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => next() }
            )
        )
        screen.children = Array(
          new Label("Next Semester: " + catalog.next.name),new Label("Recommended Courses: Data Abstr., CS Coll., Func. Lang.")
        ) ++ temp ++ Array(new Label("Total Hours: "+catalog.next.getHours()),new Button("Add a Course"){onAction=(e:ActionEvent)=>allEdit(new Button("Back"){onAction=(e:ActionEvent)=>next()})},new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def all(): Unit = {
        var temp = catalog.getAll()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseLong(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back") { onAction = (e: ActionEvent) => all() }
            )
        )
        screen.children = Array(
          new Label("All Courses: ")
        ) ++ temp ++ Array(new Button("Home") {
          onAction = (e: ActionEvent) => home()
        })
      }
      def allEdit(back: Button): Unit = {
        var temp = catalog.getReady()
        temp.foreach(x =>
          x.onAction = (e: ActionEvent) =>
            courseAdd(
              catalog.courses(x.text.value.substring(0, 9)),
              new Button("Back"){onAction=(e:ActionEvent)=>allEdit(back)}
            )
        )
        screen.children = Array(
          new Label("Available Courses: ")
        ) ++ temp ++ Array(
          back,
          new Button("Home") {
            onAction = (e: ActionEvent) => home()
          }
        )
      }

      content = screen
    }
  }
}

[0m2021.04.02 17:15:15 INFO  time: code lens generation in 19s[0m
[0m2021.04.02 17:15:15 INFO  time: code lens generation in 25s[0m
[0m2021.04.02 17:15:15 INFO  time: code lens generation in 28s[0m
[0m2021.04.02 17:15:15 INFO  time: code lens generation in 28s[0m
/*
 * Copyright (c) 2011-2015, ScalaFX Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the ScalaFX Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE SCALAFX PROJECT OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package scalafx.geometry

import javafx.{geometry => jfxg}

import scalafx.delegate.{SFXEnumDelegate, SFXEnumDelegateCompanion}

/** Wrapper for [[http://docs.oracle.com/javase/8/javafx/api/javafx/geometry/Orientation.html javafx.geometry.Orientation]] */
object Orientation
  extends SFXEnumDelegateCompanion[jfxg.Orientation, Orientation] {

  val Horizontal = new Orientation(jfxg.Orientation.HORIZONTAL)
  @deprecated ("Use Horizontal; HORIZONTAL will be removed in a future release", "8.0.60-R10")
  val HORIZONTAL = Horizontal

  val Vertical = new Orientation(jfxg.Orientation.VERTICAL)
  @deprecated ("Use Vertical; VERTICAL will be removed in a future release", "8.0.60-R10")
  val VERTICAL = Vertical

  protected override def unsortedValues: Array[Orientation] = Array(Horizontal, Vertical)
}


sealed case class Orientation(override val delegate: jfxg.Orientation)
  extends SFXEnumDelegate[jfxg.Orientation]

[0m2021.04.02 17:15:25 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.02 17:15:29 INFO  time: compiled course-catalog in 4.13s[0m
Apr 02, 2021 5:15:32 PM scala.meta.internal.pc.CompilerAccess retryWithCleanCompiler
INFO: compiler crashed due to an error in the Scala compiler, retrying with new compiler instance.
[0m2021.04.02 17:15:38 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.02 17:15:48 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.02 17:15:48 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.02 17:15:48 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.02 17:15:48 INFO  time: compiled course-catalog in 10s[0m
[0m2021.04.02 17:16:06 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.02 17:16:08 INFO  shutting down Metals[0m
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.04.02 17:16:08 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
[0m2021.04.02 17:16:08 INFO  Shut down connection with build server.[0m
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
No more data in the server stdin, exiting...
[0m2021.04.02 17:16:08 INFO  Shut down connection with build server.[0m
No more data in the client stdin, exiting...
No more data in the client stdin, exiting...
[0m2021.04.02 17:44:13 INFO  Started: Metals version 0.10.0 in workspace 'C:\Users\Jenny\course-catalog' for client vscode 1.55.0.[0m
[0m2021.04.02 17:44:16 INFO  time: initialize in 2.89s[0m
[0m2021.04.02 17:44:17 INFO  Attempting to connect to the build server...[0m
[0m2021.04.02 17:44:17 ERROR failed to index classpath for workspace/symbol
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:268)
	at scala.meta.internal.metals.CompressedPackageIndex.<init>(CompressedPackageIndex.scala:23)
	at scala.meta.internal.metals.CompressedPackageIndex$.flushBucket$1(CompressedPackageIndex.scala:104)
	at scala.meta.internal.metals.CompressedPackageIndex$.fromPackages(CompressedPackageIndex.scala:144)
	at scala.meta.internal.metals.ClasspathSearch$.fromPackages(ClasspathSearch.scala:89)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspathUnsafe(WorkspaceSymbolProvider.scala:105)
	at scala.meta.internal.metals.WorkspaceSymbolProvider.indexClasspath(WorkspaceSymbolProvider.scala:65)
	at scala.meta.internal.metals.MetalsLanguageServer.$anonfun$didChangeConfiguration$1(MetalsLanguageServer.scala:1122)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
[0m
[0m2021.04.02 17:44:18 INFO  skipping build import with status 'Installed'[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 31857'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:31857...
The server is listening for incoming connections at tcp://127.0.0.1:31857...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.02 17:44:20 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:44:20 INFO  Attempting to connect to the build server...[0m
[0m2021.04.02 17:44:20 INFO  Attempting to connect to the build server...[0m
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 40424'...
Waiting for the bsp connection to come up...
Starting the bsp launcher for bloop...
Opening a bsp server connection with 'bsp --protocol tcp --port 37503'...
Waiting for the bsp connection to come up...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:40424...
The server is listening for incoming connections at tcp://127.0.0.1:40424...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m[32m[D][0m Loading workspace settings from bloop.settings.json
[0m[32m[D][0m Waiting for a connection at 127.0.0.1:37503...
The server is listening for incoming connections at tcp://127.0.0.1:37503...
Starting thread that pumps stdin and redirects it to the bsp server...
Starting thread that pumps server stdout and redirects it to the client stdout...
[0m2021.04.02 17:44:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:44:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\Jenny\AppData\Local\scalameta\metals\cache\bsp.trace.json[0m
[0m2021.04.02 17:44:22 INFO  time: Connected to build server in 4.93s[0m
[0m2021.04.02 17:44:22 INFO  Connected to Build server: Bloop v1.4.8[0m
[0m2021.04.02 17:44:22 INFO  time: Imported build in 0.25s[0m
[0m2021.04.02 17:44:32 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.02 17:44:33 INFO  time: indexed workspace in 10s[0m
[0m2021.04.02 17:44:37 INFO  Deduplicating compilation of course-catalog from bsp client 'Metals 0.10.0' (since 16.524s)[0m
[0m2021.04.02 17:44:37 INFO  compiling course-catalog (1 scala source)[0m
[0m2021.04.02 17:44:41 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.02 17:44:41 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.02 17:44:41 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.02 17:44:41 WARN  there were three deprecation warnings (since 2.2.60)[0m
[0m2021.04.02 17:44:41 WARN  there was one deprecation warning (since 8.0.60-R10)[0m
[0m2021.04.02 17:44:41 WARN  there were four deprecation warnings in total; re-run with -deprecation for details[0m
[0m2021.04.02 17:44:41 INFO  time: compiled course-catalog in 4.71s[0m
Apr 02, 2021 5:45:20 PM org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
